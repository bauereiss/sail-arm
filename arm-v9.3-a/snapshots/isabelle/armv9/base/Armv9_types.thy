chapter \<open>Generated by Lem from \<open>lem/armv9_types.lem\<close>.\<close>

theory "Armv9_types" 

imports
  Main
  "LEM.Lem_pervasives_extra"
  "Sail.Sail2_instr_kinds"
  "Sail.Sail2_values"
  "Sail.Sail2_operators_mwords"
  "Sail.Sail2_concurrency_interface"
  "Sail.Sail2_monadic_combinators"
  "Sail.Sail2_string"
  "Sail.Sail2_undefined"
  "Prelude"

begin 

\<comment> \<open>\<open>Generated by Sail from armv9.\<close>\<close>
\<comment> \<open>\<open>open import Pervasives_extra\<close>\<close>
\<comment> \<open>\<open>open import Sail2_instr_kinds\<close>\<close>
\<comment> \<open>\<open>open import Sail2_values\<close>\<close>
\<comment> \<open>\<open>open import Sail2_string\<close>\<close>
\<comment> \<open>\<open>open import Sail2_operators_mwords\<close>\<close>
\<comment> \<open>\<open>open import Sail2_concurrency_interface\<close>\<close>
\<comment> \<open>\<open>open import Sail2_monadic_combinators\<close>\<close>
\<comment> \<open>\<open>open import Sail2_undefined\<close>\<close>
\<comment> \<open>\<open>open import Prelude\<close>\<close>
type_synonym 'n bits =" ( 'n::len)Word.word "

datatype signal =   LOW | HIGH



datatype exception  =
    Error_Undefined " (unit)"
  | Error_See " (string)"
  | Error_ImplementationDefined " (string)"
  | Error_ReservedEncoding " (unit)"
  | Error_ExceptionTaken " (unit)"
  | Error_Unpredictable " (unit)"
  | Error_ConstrainedUnpredictable " (unit)"
  | Error_SError " (unit)"









\<comment> \<open>\<open>type result 'a 'b = | Ok of ('a) | Err of ('b)



type Access_variety = | AV_plain | AV_exclusive | AV_atomic_rmw



type Access_strength = | AS_normal | AS_rel_or_acq | AS_acq_rcpc



type Explicit_access_kind  =
  <| Explicit_access_kind_variety : Access_variety; Explicit_access_kind_strength : Access_strength; |>


type Access_kind 'arch_ak =
  | AK_explicit of (Explicit_access_kind)
  | AK_ifetch of (unit)
  | AK_ttw of (unit)
  | AK_arch of ('arch_ak)



type Mem_read_request 'n 'vasize 'pa 'ts 'arch_ak =
  <| Mem_read_request_access_kind : Access_kind 'arch_ak;
     Mem_read_request_va : maybe (bits 'vasize);
     Mem_read_request_pa : 'pa;
     Mem_read_request_translation : 'ts;
     Mem_read_request_size : integer;
     Mem_read_request_tag : bool; |>
declare isabelle target_sorts Mem_read_request = `len` `len` _ _ _


type Mem_write_request 'n 'vasize 'pa 'ts 'arch_ak =
  <| Mem_write_request_access_kind : Access_kind 'arch_ak;
     Mem_write_request_va : maybe (bits 'vasize);
     Mem_write_request_pa : 'pa;
     Mem_write_request_translation : 'ts;
     Mem_write_request_size : integer;
     Mem_write_request_value : maybe (bits 'int8_times_n);
     Mem_write_request_tag : maybe bool; |>
declare isabelle target_sorts Mem_write_request = `len` `len` _ _ _\<close>\<close>


datatype SecurityState =   SS_NonSecure | SS_Root | SS_Realm | SS_Secure



datatype AccType =
    AccType_NORMAL
  | AccType_STREAM
  | AccType_VEC
  | AccType_VECSTREAM
  | AccType_SVE
  | AccType_SVESTREAM
  | AccType_SME
  | AccType_SMESTREAM
  | AccType_UNPRIVSTREAM
  | AccType_A32LSMD
  | AccType_ATOMIC
  | AccType_ATOMICRW
  | AccType_ORDERED
  | AccType_ORDEREDRW
  | AccType_ORDEREDATOMIC
  | AccType_ORDEREDATOMICRW
  | AccType_ATOMICLS64
  | AccType_LIMITEDORDERED
  | AccType_UNPRIV
  | AccType_IFETCH
  | AccType_TTW
  | AccType_NONFAULT
  | AccType_CNOTFIRST
  | AccType_NV2REGISTER
  | AccType_DC
  | AccType_IC
  | AccType_DCZVA
  | AccType_ATPAN
  | AccType_AT



datatype Fault =
    Fault_None
  | Fault_AccessFlag
  | Fault_Alignment
  | Fault_Background
  | Fault_Domain
  | Fault_Permission
  | Fault_Translation
  | Fault_AddressSize
  | Fault_SyncExternal
  | Fault_SyncExternalOnWalk
  | Fault_SyncParity
  | Fault_SyncParityOnWalk
  | Fault_GPCFOnWalk
  | Fault_GPCFOnOutput
  | Fault_AsyncParity
  | Fault_AsyncExternal
  | Fault_Debug
  | Fault_TLBConflict
  | Fault_BranchTarget
  | Fault_HWUpdateAccessFlag
  | Fault_Lockdown
  | Fault_Exclusive
  | Fault_ICacheMaint



datatype Regime =   Regime_EL3 | Regime_EL30 | Regime_EL2 | Regime_EL20 | Regime_EL10



datatype PASpace =   PAS_NonSecure | PAS_Secure | PAS_Root | PAS_Realm



record FullAddress  = 
 FullAddress_paspace ::" PASpace " 
 FullAddress_address ::" 52 bits "  



datatype GPCF =   GPCF_None | GPCF_AddressSize | GPCF_Walk | GPCF_EABT | GPCF_Fail



record GPCFRecord  = 
 GPCFRecord_gpf ::" GPCF " 
 GPCFRecord_level ::" ii "  



record FaultRecord  =
  
 FaultRecord_statuscode ::" Fault " 

     FaultRecord_acctype ::" AccType " 

     FaultRecord_ipaddress ::" FullAddress " 

     FaultRecord_gpcf ::" GPCFRecord " 

     FaultRecord_paddress ::" FullAddress " 

     FaultRecord_gpcfs2walk ::" bool " 

     FaultRecord_s2fs1walk ::" bool " 

     FaultRecord_write ::" bool " 

     FaultRecord_level ::" ii " 

     FaultRecord_extflag ::" 1 bits " 

     FaultRecord_secondstage ::" bool " 

     FaultRecord_domain ::" 4 bits " 

     FaultRecord_errortype ::" 2 bits " 

     FaultRecord_debugmoe ::" 4 bits "  



type_synonym TranslationInfo  =" unit "

datatype arm_acc_type  =
    SAcc_STREAM " (unit)"
  | SAcc_VEC " (bool)"
  | SAcc_SVE " (bool)"
  | SAcc_SME " (bool)"
  | SAcc_UNPRIV " (bool)"
  | SAcc_A32LSMD " (unit)"
  | SAcc_ATOMICLS64 " (unit)"
  | SAcc_LIMITEDORDERED " (unit)"
  | SAcc_NONFAULT " (unit)"
  | SAcc_CNOTFIRST " (unit)"
  | SAcc_NV2REGISTER " (unit)"
  | SAcc_DC " (unit)"
  | SAcc_IC " (unit)"
  | SAcc_DCZVA " (unit)"
  | SAcc_ATPAN " (unit)"
  | SAcc_AT " (unit)"



datatype TLBILevel =   TLBILevel_Any | TLBILevel_Last



datatype TLBIMemAttr =   TLBI_AllAttr | TLBI_ExcludeXS



datatype TLBIOp =
    TLBIOp_DALL
  | TLBIOp_DASID
  | TLBIOp_DVA
  | TLBIOp_IALL
  | TLBIOp_IASID
  | TLBIOp_IVA
  | TLBIOp_ALL
  | TLBIOp_ASID
  | TLBIOp_IPAS2
  | TLBIOp_VAA
  | TLBIOp_VA
  | TLBIOp_VMALL
  | TLBIOp_VMALLS12
  | TLBIOp_RIPAS2
  | TLBIOp_RVAA
  | TLBIOp_RVA
  | TLBIOp_RPA
  | TLBIOp_PAALL



record TLBIRecord  =
  
 TLBIRecord_op ::" TLBIOp " 

     TLBIRecord_from_aarch64 ::" bool " 

     TLBIRecord_security ::" SecurityState " 

     TLBIRecord_regime ::" Regime " 

     TLBIRecord_vmid ::" 16 bits " 

     TLBIRecord_asid ::" 16 bits " 

     TLBIRecord_level ::" TLBILevel " 

     TLBIRecord_attr ::" TLBIMemAttr " 

     TLBIRecord_ipaspace ::" PASpace " 

     TLBIRecord_address ::" 64 bits " 

     TLBIRecord_end_address_name ::" 64 bits " 

     TLBIRecord_tg ::" 2 bits "  



datatype Shareability =   Shareability_NSH | Shareability_ISH | Shareability_OSH



record TLBI  = 
 TLBI_rec ::" TLBIRecord " 
 TLBI_shareability ::" Shareability "  



datatype MBReqDomain =
    MBReqDomain_Nonshareable
  | MBReqDomain_InnerShareable
  | MBReqDomain_OuterShareable
  | MBReqDomain_FullSystem



datatype MBReqTypes =   MBReqTypes_Reads | MBReqTypes_Writes | MBReqTypes_All



record DxB  = 
 DxB_domain ::" MBReqDomain " 
 DxB_types ::" MBReqTypes " 
 DxB_nXS ::" bool "  



datatype Barrier  =
    Barrier_DSB0 " (DxB)"
  | Barrier_DMB0 " (DxB)"
  | Barrier_ISB0 " (unit)"
  | Barrier_SSBB " (unit)"
  | Barrier_PSSBB " (unit)"
  | Barrier_SB " (unit)"



datatype ArchVersion =
    ARMv8p0
  | ARMv8p1
  | ARMv8p2
  | ARMv8p3
  | ARMv8p4
  | ARMv8p5
  | ARMv8p6
  | ARMv8p7
  | ARMv8p8
  | ARMv9p0
  | ARMv9p1
  | ARMv9p2
  | ARMv9p3



record ProcState  =
  
 ProcState_N ::" 1 bits " 

     ProcState_Z ::" 1 bits " 

     ProcState_C ::" 1 bits " 

     ProcState_V ::" 1 bits " 

     ProcState_D ::" 1 bits " 

     ProcState_A ::" 1 bits " 

     ProcState_I ::" 1 bits " 

     ProcState_F ::" 1 bits " 

     ProcState_PAN ::" 1 bits " 

     ProcState_UAO ::" 1 bits " 

     ProcState_DIT ::" 1 bits " 

     ProcState_TCO ::" 1 bits " 

     ProcState_BTYPE ::" 2 bits " 

     ProcState_ZA ::" 1 bits " 

     ProcState_SM ::" 1 bits " 

     ProcState_ALLINT ::" 1 bits " 

     ProcState_SS ::" 1 bits " 

     ProcState_IL ::" 1 bits " 

     ProcState_EL ::" 2 bits " 

     ProcState_nRW ::" 1 bits " 

     ProcState_SP ::" 1 bits " 

     ProcState_Q ::" 1 bits " 

     ProcState_GE ::" 4 bits " 

     ProcState_SSBS ::" 1 bits " 

     ProcState_IT ::" 8 bits " 

     ProcState_J ::" 1 bits " 

     ProcState_T ::" 1 bits " 

     ProcState_E ::" 1 bits " 

     ProcState_M ::" 5 bits "  



datatype Constraint =
    Constraint_NONE
  | Constraint_UNKNOWN
  | Constraint_UNDEF
  | Constraint_UNDEFEL0
  | Constraint_NOP
  | Constraint_TRUE
  | Constraint_FALSE
  | Constraint_DISABLED
  | Constraint_UNCOND
  | Constraint_COND
  | Constraint_ADDITIONAL_DECODE
  | Constraint_WBSUPPRESS
  | Constraint_FAULT
  | Constraint_LIMITED_ATOMICITY
  | Constraint_NVNV1_00
  | Constraint_NVNV1_01
  | Constraint_NVNV1_11
  | Constraint_OSH
  | Constraint_ISH
  | Constraint_NSH
  | Constraint_NC
  | Constraint_WT
  | Constraint_WB
  | Constraint_FORCE
  | Constraint_FORCENOSLCHECK
  | Constraint_PMSCR_PCT_VIRT



datatype Unpredictable =
    Unpredictable_VMSR
  | Unpredictable_WBOVERLAPLD
  | Unpredictable_WBOVERLAPST
  | Unpredictable_LDPOVERLAP
  | Unpredictable_BASEOVERLAP
  | Unpredictable_DATAOVERLAP
  | Unpredictable_DEVPAGE2
  | Unpredictable_INSTRDEVICE
  | Unpredictable_RESCPACR
  | Unpredictable_RESMAIR
  | Unpredictable_S1CTAGGED
  | Unpredictable_S2RESMEMATTR
  | Unpredictable_RESTEXCB
  | Unpredictable_RESPRRR
  | Unpredictable_RESDACR
  | Unpredictable_RESVTCRS
  | Unpredictable_RESTnSZ
  | Unpredictable_RESTCF
  | Unpredictable_DEVICETAGSTORE
  | Unpredictable_OORTnSZ
  | Unpredictable_LARGEIPA
  | Unpredictable_ESRCONDPASS
  | Unpredictable_ILZEROIT
  | Unpredictable_ILZEROT
  | Unpredictable_BPVECTORCATCHPRI
  | Unpredictable_VCMATCHHALF
  | Unpredictable_VCMATCHDAPA
  | Unpredictable_WPMASKANDBAS
  | Unpredictable_WPBASCONTIGUOUS
  | Unpredictable_RESWPMASK
  | Unpredictable_WPMASKEDBITS
  | Unpredictable_RESBPWPCTRL
  | Unpredictable_BPNOTIMPL
  | Unpredictable_RESBPTYPE
  | Unpredictable_BPNOTCTXCMP
  | Unpredictable_BPMATCHHALF
  | Unpredictable_BPMISMATCHHALF
  | Unpredictable_RESTARTALIGNPC
  | Unpredictable_RESTARTZEROUPPERPC
  | Unpredictable_ZEROUPPER
  | Unpredictable_ERETZEROUPPERPC
  | Unpredictable_A32FORCEALIGNPC
  | Unpredictable_SMD
  | Unpredictable_NONFAULT
  | Unpredictable_SVEZEROUPPER
  | Unpredictable_SVELDNFDATA
  | Unpredictable_SVELDNFZERO
  | Unpredictable_CHECKSPNONEACTIVE
  | Unpredictable_SMEZEROUPPER
  | Unpredictable_NVNV1
  | Unpredictable_Shareability
  | Unpredictable_AFUPDATE
  | Unpredictable_IESBinDebug
  | Unpredictable_BADPMSFCR
  | Unpredictable_ZEROBTYPE
  | Unpredictable_EL2TIMESTAMP
  | Unpredictable_EL1TIMESTAMP
  | Unpredictable_RESERVEDNSxB
  | Unpredictable_WFxTDEBUG
  | Unpredictable_LS64UNSUPPORTED
  | Unpredictable_MISALIGNEDATOMIC
  | Unpredictable_CLEARERRITEZERO
  | Unpredictable_ALUEXCEPTIONRETURN
  | Unpredictable_IGNORETRAPINDEBUG
  | Unpredictable_DBGxVR_RESS
  | Unpredictable_PMUEVENTCOUNTER
  | Unpredictable_PMSCR_PCT
  | Unpredictable_BRBFILTRATE



datatype Exception =
    Exception_Uncategorized
  | Exception_WFxTrap
  | Exception_CP15RTTrap
  | Exception_CP15RRTTrap
  | Exception_CP14RTTrap
  | Exception_CP14DTTrap
  | Exception_CP14RRTTrap
  | Exception_AdvSIMDFPAccessTrap
  | Exception_FPIDTrap
  | Exception_LDST64BTrap
  | Exception_PACTrap
  | Exception_IllegalState
  | Exception_SupervisorCall
  | Exception_HypervisorCall
  | Exception_MonitorCall
  | Exception_SystemRegisterTrap
  | Exception_ERetTrap
  | Exception_InstructionAbort
  | Exception_PCAlignment
  | Exception_DataAbort
  | Exception_NV2DataAbort
  | Exception_PACFail
  | Exception_SPAlignment
  | Exception_FPTrappedException
  | Exception_SError
  | Exception_Breakpoint
  | Exception_SoftwareStep
  | Exception_Watchpoint
  | Exception_NV2Watchpoint
  | Exception_SoftwareBreakpoint
  | Exception_VectorCatch
  | Exception_IRQ
  | Exception_SVEAccessTrap
  | Exception_SMEAccessTrap
  | Exception_TSTARTAccessTrap
  | Exception_GPC
  | Exception_BranchTarget
  | Exception_MemCpyMemSet
  | Exception_FIQ



record ExceptionRecord  =
  
 ExceptionRecord_exceptype ::" Exception " 

     ExceptionRecord_syndrome ::" 25 bits " 

     ExceptionRecord_syndrome2 ::" 5 bits " 

     ExceptionRecord_paddress ::" FullAddress " 

     ExceptionRecord_vaddress ::" 64 bits " 

     ExceptionRecord_ipavalid ::" bool " 

     ExceptionRecord_NS ::" 1 bits " 

     ExceptionRecord_ipaddress ::" 52 bits " 

     ExceptionRecord_trappedsyscallinst ::" bool "  



datatype InstrEnc =   A64 | A32 | T16 | T32



datatype ExceptionalOccurrenceTargetState =   AArch32_NonDebugState | AArch64_NonDebugState | DebugState







record TMState  =
  
 TMState_depth ::" ii " 

     TMState_Rt ::" ii " 

     TMState_nPC ::" 64 bits " 

     TMState_X ::" ( 64 bits) list " 

     TMState_Z ::" ( 2048 bits) list " 

     TMState_P ::" ( 256 bits) list " 

     TMState_FFR ::" 256 bits " 

     TMState_SP ::" 64 bits " 

     TMState_FPCR ::" 64 bits " 

     TMState_FPSR ::" 64 bits " 

     TMState_ICC_PMR_EL1 ::" 64 bits " 

     TMState_nzcv ::" 4 bits " 

     TMState_D ::" 1 bits " 

     TMState_A ::" 1 bits " 

     TMState_I ::" 1 bits " 

     TMState_F ::" 1 bits "  



datatype BranchType =
    BranchType_DIRCALL
  | BranchType_INDCALL
  | BranchType_ERET
  | BranchType_DBGEXIT
  | BranchType_RET
  | BranchType_DIR
  | BranchType_INDIR
  | BranchType_EXCEPTION
  | BranchType_TMFAIL
  | BranchType_RESET
  | BranchType_UNKNOWN



datatype InstrSet =   InstrSet_A64 | InstrSet_A32 | InstrSet_T32



datatype CrossTriggerIn =
    CrossTriggerIn_CrossHalt
  | CrossTriggerIn_PMUOverflow
  | CrossTriggerIn_RSVD2
  | CrossTriggerIn_RSVD3
  | CrossTriggerIn_TraceExtOut0
  | CrossTriggerIn_TraceExtOut1
  | CrossTriggerIn_TraceExtOut2
  | CrossTriggerIn_TraceExtOut3



datatype TMFailure =
    TMFailure_CNCL
  | TMFailure_DBG
  | TMFailure_ERR
  | TMFailure_NEST
  | TMFailure_SIZE
  | TMFailure_MEM
  | TMFailure_TRIVIAL
  | TMFailure_IMP



record MPAMinfo  =
  
 MPAMinfo_mpam_sp ::" 2 bits " 
 MPAMinfo_partid ::" 16 bits " 
 MPAMinfo_pmg ::" 8 bits "  



record AccessDescriptor  =
  
 AccessDescriptor_transactional ::" bool " 

     AccessDescriptor_mpam ::" MPAMinfo " 

     AccessDescriptor_acctype ::" AccType "  



datatype DeviceType =   DeviceType_GRE | DeviceType_nGRE | DeviceType_nGnRE | DeviceType_nGnRnE



record MemAttrHints  =
  
 MemAttrHints_attrs ::" 2 bits " 
 MemAttrHints_hints ::" 2 bits " 
 MemAttrHints_transient ::" bool "  



datatype MemType =   MemType_Normal | MemType_Device



record MemoryAttributes  =
  
 MemoryAttributes_memtype ::" MemType " 

     MemoryAttributes_device ::" DeviceType " 

     MemoryAttributes_inner ::" MemAttrHints " 

     MemoryAttributes_outer ::" MemAttrHints " 

     MemoryAttributes_shareability ::" Shareability " 

     MemoryAttributes_tagged ::" bool " 

     MemoryAttributes_xs ::" 1 bits "  



datatype TGx =   TGx_4KB | TGx_16KB | TGx_64KB



record TLBContext  =
  
 TLBContext_ss ::" SecurityState " 

     TLBContext_regime ::" Regime " 

     TLBContext_vmid ::" 16 bits " 

     TLBContext_asid ::" 16 bits " 

     TLBContext_nG ::" 1 bits " 

     TLBContext_ipaspace ::" PASpace " 

     TLBContext_includes_s1_name ::" bool " 

     TLBContext_includes_s2_name ::" bool " 

     TLBContext_includes_gpt_name ::" bool " 

     TLBContext_ia ::" 64 bits " 

     TLBContext_tg ::" TGx " 

     TLBContext_cnp ::" 1 bits " 

     TLBContext_xs ::" 1 bits "  



record AddressDescriptor  =
  
 AddressDescriptor_fault ::" FaultRecord " 

     AddressDescriptor_memattrs ::" MemoryAttributes " 

     AddressDescriptor_paddress ::" FullAddress " 

     AddressDescriptor_tlbcontext ::" TLBContext " 

     AddressDescriptor_vaddress ::" 64 bits "  



record PhysMemRetStatus  =
  
 PhysMemRetStatus_statuscode ::" Fault " 

     PhysMemRetStatus_extflag ::" 1 bits " 

     PhysMemRetStatus_errortype ::" 2 bits " 

     PhysMemRetStatus_store64bstatus ::" 64 bits " 

     PhysMemRetStatus_acctype ::" AccType "  



datatype VARange =   VARange_LOWER | VARange_UPPER



record S1TTWParams  =
  
 S1TTWParams_ha ::" 1 bits " 

     S1TTWParams_hd ::" 1 bits " 

     S1TTWParams_tbi ::" 1 bits " 

     S1TTWParams_tbid ::" 1 bits " 

     S1TTWParams_nfd ::" 1 bits " 

     S1TTWParams_e0pd ::" 1 bits " 

     S1TTWParams_ds ::" 1 bits " 

     S1TTWParams_ps ::" 3 bits " 

     S1TTWParams_txsz ::" 6 bits " 

     S1TTWParams_epan ::" 1 bits " 

     S1TTWParams_dct ::" 1 bits " 

     S1TTWParams_nv1 ::" 1 bits " 

     S1TTWParams_cmow ::" 1 bits " 

     S1TTWParams_t0sz ::" 3 bits " 

     S1TTWParams_t1sz ::" 3 bits " 

     S1TTWParams_uwxn ::" 1 bits " 

     S1TTWParams_tgx ::" TGx " 

     S1TTWParams_irgn ::" 2 bits " 

     S1TTWParams_orgn ::" 2 bits " 

     S1TTWParams_sh ::" 2 bits " 

     S1TTWParams_hpd ::" 1 bits " 

     S1TTWParams_ee ::" 1 bits " 

     S1TTWParams_wxn ::" 1 bits " 

     S1TTWParams_ntlsmd ::" 1 bits " 

     S1TTWParams_dc ::" 1 bits " 

     S1TTWParams_sif ::" 1 bits " 

     S1TTWParams_mair ::" 64 bits "  



record GPTEntry  =
  
 GPTEntry_gpi ::" 4 bits " 
 GPTEntry_size ::" ii " 
 GPTEntry_contig_size ::" ii " 
 GPTEntry_level ::" ii "  



datatype PGSe =   PGS_4KB | PGS_16KB | PGS_64KB



record GPTTable  = 
 GPTTable_address ::" 52 bits "  



record Permissions  =
  
 Permissions_ap_table ::" 2 bits " 

     Permissions_xn_table ::" 1 bits " 

     Permissions_pxn_table ::" 1 bits " 

     Permissions_uxn_table ::" 1 bits " 

     Permissions_ap ::" 3 bits " 

     Permissions_xn ::" 1 bits " 

     Permissions_uxn ::" 1 bits " 

     Permissions_pxn ::" 1 bits " 

     Permissions_s2ap ::" 2 bits " 

     Permissions_s2xnx ::" 1 bits " 

     Permissions_s2xn ::" 1 bits "  



datatype SDFType =
    SDFType_Table
  | SDFType_Invalid
  | SDFType_Supersection
  | SDFType_Section
  | SDFType_LargePage
  | SDFType_SmallPage



record TTWState  =
  
 TTWState_istable ::" bool " 

     TTWState_level ::" ii " 

     TTWState_baseaddress ::" FullAddress " 

     TTWState_contiguous ::" 1 bits " 

     TTWState_nG ::" 1 bits " 

     TTWState_guardedpage ::" 1 bits " 

     TTWState_sdftype ::" SDFType " 

     TTWState_domain ::" 4 bits " 

     TTWState_memattrs ::" MemoryAttributes " 

     TTWState_permissions ::" Permissions "  



datatype DescriptorType =
    DescriptorType_Table | DescriptorType_Block | DescriptorType_Page | DescriptorType_Invalid



record S2TTWParams  =
  
 S2TTWParams_ha ::" 1 bits " 

     S2TTWParams_hd ::" 1 bits " 

     S2TTWParams_sl2 ::" 1 bits " 

     S2TTWParams_ds ::" 1 bits " 

     S2TTWParams_sw ::" 1 bits " 

     S2TTWParams_nsw ::" 1 bits " 

     S2TTWParams_sa ::" 1 bits " 

     S2TTWParams_nsa ::" 1 bits " 

     S2TTWParams_ps ::" 3 bits " 

     S2TTWParams_txsz ::" 6 bits " 

     S2TTWParams_fwb ::" 1 bits " 

     S2TTWParams_cmow ::" 1 bits " 

     S2TTWParams_s ::" 1 bits " 

     S2TTWParams_t0sz ::" 4 bits " 

     S2TTWParams_tgx ::" TGx " 

     S2TTWParams_sl0 ::" 2 bits " 

     S2TTWParams_irgn ::" 2 bits " 

     S2TTWParams_orgn ::" 2 bits " 

     S2TTWParams_sh ::" 2 bits " 

     S2TTWParams_ee ::" 1 bits " 

     S2TTWParams_ptw ::" 1 bits " 

     S2TTWParams_vm ::" 1 bits "  



record TLBRecord  =
  
 TLBRecord_context ::" TLBContext " 

     TLBRecord_walkstate ::" TTWState " 

     TLBRecord_blocksize ::" ii " 

     TLBRecord_contigsize ::" ii " 

     TLBRecord_s1descriptor ::" 64 bits " 

     TLBRecord_s2descriptor ::" 64 bits "  



record TLBLine  = 
 TLBLine_tlbrecord ::" TLBRecord " 
 TLBLine_valid_name ::" bool "  



datatype ATAccess =   ATAccess_Read | ATAccess_Write | ATAccess_ReadPAN | ATAccess_WritePAN



datatype TranslationStage =   TranslationStage_1 | TranslationStage_12



datatype RestrictType =   RestrictType_DataValue | RestrictType_ControlFlow | RestrictType_CachePrefetch



record ExecutionCntxt  =
  
 ExecutionCntxt_is_vmid_valid ::" bool " 

     ExecutionCntxt_all_vmid ::" bool " 

     ExecutionCntxt_vmid ::" 16 bits " 

     ExecutionCntxt_is_asid_valid ::" bool " 

     ExecutionCntxt_all_asid ::" bool " 

     ExecutionCntxt_asid ::" 16 bits " 

     ExecutionCntxt_target_el ::" 2 bits " 

     ExecutionCntxt_security ::" SecurityState " 

     ExecutionCntxt_restriction ::" RestrictType "  



datatype CacheOp =   CacheOp_Clean | CacheOp_Invalidate | CacheOp_CleanInvalidate



datatype CacheOpScope =
    CacheOpScope_SetWay
  | CacheOpScope_PoU
  | CacheOpScope_PoC
  | CacheOpScope_PoP
  | CacheOpScope_PoDP
  | CacheOpScope_ALLU
  | CacheOpScope_ALLUIS



datatype CachePASpace =
    CPAS_NonSecure
  | CPAS_Any
  | CPAS_RealmNonSecure
  | CPAS_Realm
  | CPAS_Root
  | CPAS_SecureNonSecure
  | CPAS_Secure



datatype CacheType =   CacheType_Data | CacheType_Tag | CacheType_Data_Tag | CacheType_Instruction



record CacheRecord  =
  
 CacheRecord_acctype ::" AccType " 

     CacheRecord_cacheop ::" CacheOp " 

     CacheRecord_opscope ::" CacheOpScope " 

     CacheRecord_cachetype ::" CacheType " 

     CacheRecord_regval ::" 64 bits " 

     CacheRecord_paddress ::" FullAddress " 

     CacheRecord_vaddress ::" 64 bits " 

     CacheRecord_set ::" ii " 

     CacheRecord_way ::" ii " 

     CacheRecord_level ::" ii " 

     CacheRecord_shareability ::" Shareability " 

     CacheRecord_translated ::" bool " 

     CacheRecord_is_vmid_valid ::" bool " 

     CacheRecord_vmid ::" 16 bits " 

     CacheRecord_is_asid_valid ::" bool " 

     CacheRecord_asid ::" 16 bits " 

     CacheRecord_security ::" SecurityState " 

     CacheRecord_cpas ::" CachePASpace "  



datatype PrivilegeLevel =   PL3 | PL2 | PL1 | PL0



datatype PrefetchHint =   Prefetch_READ | Prefetch_WRITE | Prefetch_EXEC



datatype DSBAlias =   DSBAlias_SSBB | DSBAlias_PSSBB | DSBAlias_DSB



datatype WFxType =   WFxType_WFE | WFxType_WFI | WFxType_WFET | WFxType_WFIT



datatype FPExc =
    FPExc_InvalidOp
  | FPExc_DivideByZero
  | FPExc_Overflow
  | FPExc_Underflow
  | FPExc_Inexact
  | FPExc_InputDenorm



datatype FPRounding =
    FPRounding_TIEEVEN
  | FPRounding_POSINF
  | FPRounding_NEGINF
  | FPRounding_ZERO
  | FPRounding_TIEAWAY
  | FPRounding_ODD



datatype FPType =
    FPType_Zero | FPType_Denormal | FPType_Nonzero | FPType_Infinity | FPType_QNaN | FPType_SNaN



datatype InterruptID =
    InterruptID_PMUIRQ
  | InterruptID_COMMIRQ
  | InterruptID_CTIIRQ
  | InterruptID_COMMRX
  | InterruptID_COMMTX
  | InterruptID_CNTP
  | InterruptID_CNTHP
  | InterruptID_CNTHPS
  | InterruptID_CNTPS
  | InterruptID_CNTV
  | InterruptID_CNTHV
  | InterruptID_CNTHVS



datatype SVECmp =   Cmp_EQ | Cmp_NE | Cmp_GE | Cmp_GT | Cmp_LT | Cmp_LE | Cmp_UN



datatype SMEExceptionType =
    SMEExceptionType_AccessTrap
  | SMEExceptionType_Streaming
  | SMEExceptionType_NotStreaming
  | SMEExceptionType_InactiveZA



datatype MOPSStage =   MOPSStage_Prologue | MOPSStage_Main | MOPSStage_Epilogue



datatype CountOp =   CountOp_CLZ | CountOp_CLS | CountOp_CNT



datatype ExtendType =
    ExtendType_SXTB
  | ExtendType_SXTH
  | ExtendType_SXTW
  | ExtendType_SXTX
  | ExtendType_UXTB
  | ExtendType_UXTH
  | ExtendType_UXTW
  | ExtendType_UXTX



datatype FPMaxMinOp =   FPMaxMinOp_MAX | FPMaxMinOp_MIN | FPMaxMinOp_MAXNUM | FPMaxMinOp_MINNUM



datatype FPUnaryOp =   FPUnaryOp_ABS | FPUnaryOp_MOV | FPUnaryOp_NEG | FPUnaryOp_SQRT



datatype FPConvOp =
    FPConvOp_CVT_FtoI
  | FPConvOp_CVT_ItoF
  | FPConvOp_MOV_FtoI
  | FPConvOp_MOV_ItoF
  | FPConvOp_CVT_FtoI_JS



datatype MoveWideOp =   MoveWideOp_N | MoveWideOp_Z | MoveWideOp_K



datatype ShiftType =   ShiftType_LSL | ShiftType_LSR | ShiftType_ASR | ShiftType_ROR



datatype LogicalOp =   LogicalOp_AND | LogicalOp_EOR | LogicalOp_ORR



datatype MemOp =   MemOp_LOAD | MemOp_STORE | MemOp_PREFETCH



datatype MemAtomicOp =
    MemAtomicOp_ADD
  | MemAtomicOp_BIC
  | MemAtomicOp_EOR
  | MemAtomicOp_ORR
  | MemAtomicOp_SMAX
  | MemAtomicOp_SMIN
  | MemAtomicOp_UMAX
  | MemAtomicOp_UMIN
  | MemAtomicOp_SWP



datatype SystemHintOp =
    SystemHintOp_NOP
  | SystemHintOp_YIELD
  | SystemHintOp_WFE
  | SystemHintOp_WFI
  | SystemHintOp_SEV
  | SystemHintOp_SEVL
  | SystemHintOp_DGH
  | SystemHintOp_ESB
  | SystemHintOp_PSB
  | SystemHintOp_TSB
  | SystemHintOp_BTI
  | SystemHintOp_WFET
  | SystemHintOp_WFIT
  | SystemHintOp_CSDB



datatype PSTATEField =
    PSTATEField_DAIFSet
  | PSTATEField_DAIFClr
  | PSTATEField_PAN
  | PSTATEField_UAO
  | PSTATEField_DIT
  | PSTATEField_SSBS
  | PSTATEField_TCO
  | PSTATEField_SVCRSM
  | PSTATEField_SVCRZA
  | PSTATEField_SVCRSMZA
  | PSTATEField_ALLINT
  | PSTATEField_SP



datatype VBitOp =   VBitOp_VBIF | VBitOp_VBIT | VBitOp_VBSL | VBitOp_VEOR



datatype CompareOp =   CompareOp_GT | CompareOp_GE | CompareOp_EQ | CompareOp_LE | CompareOp_LT



datatype ImmediateOp =   ImmediateOp_MOVI | ImmediateOp_MVNI | ImmediateOp_ORR | ImmediateOp_BIC



datatype ReduceOp =
    ReduceOp_FMINNUM
  | ReduceOp_FMAXNUM
  | ReduceOp_FMIN
  | ReduceOp_FMAX
  | ReduceOp_FADD
  | ReduceOp_ADD



datatype SRType =   SRType_LSL | SRType_LSR | SRType_ASR | SRType_ROR | SRType_RRX



datatype VCGEType =   VCGEType_signed | VCGEType_unsigned | VCGEType_fp



datatype VFPNegMul =   VFPNegMul_VNMLA | VFPNegMul_VNMLS | VFPNegMul_VNMUL



datatype VCGTtype =   VCGTtype_signed | VCGTtype_unsigned | VCGTtype_fp



datatype VBitOps =   VBitOps_VBIF | VBitOps_VBIT | VBitOps_VBSL



record AArch32_SErrorSyndrome  =
  
 AArch32_SErrorSyndrome_AET ::" 2 bits " 
 AArch32_SErrorSyndrome_ExT ::" 1 bits "  



datatype register_value  =
    Regval_vector " ( register_value list)"
  | Regval_list " ( register_value list)"
  | Regval_option " ( register_value option)"
  | Regval_bool " (bool)"
  | Regval_int " (ii)"
  | Regval_real " (real)"
  | Regval_string " (string)"
  | Regval_ProcState " (ProcState)"
  | Regval_TMState " (TMState)"
  | Regval___InstrEnc " (InstrEnc)"
  | Regval_bit " (bitU)"
  | Regval_bitvector_13_dec " ( 13 Word.word)"
  | Regval_bitvector_16_dec " ( 16 Word.word)"
  | Regval_bitvector_1_dec " ( 1 Word.word)"
  | Regval_bitvector_2048_dec " ( 2048 Word.word)"
  | Regval_bitvector_256_dec " ( 256 Word.word)"
  | Regval_bitvector_29_dec " ( 29 Word.word)"
  | Regval_bitvector_2_dec " ( 2 Word.word)"
  | Regval_bitvector_32_dec " ( 32 Word.word)"
  | Regval_bitvector_3_dec " ( 3 Word.word)"
  | Regval_bitvector_4_dec " ( 4 Word.word)"
  | Regval_bitvector_52_dec " ( 52 Word.word)"
  | Regval_bitvector_63_dec " ( 63 Word.word)"
  | Regval_bitvector_64_dec " ( 64 Word.word)"
  | Regval_bitvector_88_dec " ( 88 Word.word)"
  | Regval_bitvector_8_dec " ( 8 Word.word)"
  | Regval_signal " (signal)"



record regstate  =
  
 ProcState_reg ::" string \<Rightarrow> ProcState " 

     TMState_reg ::" string \<Rightarrow> TMState " 

     InstrEnc_reg ::" string \<Rightarrow> InstrEnc " 

     bitvector_13_dec_reg ::" string \<Rightarrow>  13 Word.word " 

     bitvector_16_dec_reg ::" string \<Rightarrow>  16 Word.word " 

     bitvector_1_dec_reg ::" string \<Rightarrow>  1 Word.word " 

     bitvector_256_dec_reg ::" string \<Rightarrow>  256 Word.word " 

     bitvector_29_dec_reg ::" string \<Rightarrow>  29 Word.word " 

     bitvector_2_dec_reg ::" string \<Rightarrow>  2 Word.word " 

     bitvector_32_dec_reg ::" string \<Rightarrow>  32 Word.word " 

     bitvector_3_dec_reg ::" string \<Rightarrow>  3 Word.word " 

     bitvector_4_dec_reg ::" string \<Rightarrow>  4 Word.word " 

     bitvector_52_dec_reg ::" string \<Rightarrow>  52 Word.word " 

     bitvector_63_dec_reg ::" string \<Rightarrow>  63 Word.word " 

     bitvector_64_dec_reg ::" string \<Rightarrow>  64 Word.word " 

     bitvector_88_dec_reg ::" string \<Rightarrow>  88 Word.word " 

     bitvector_8_dec_reg ::" string \<Rightarrow>  8 Word.word " 

     bool_reg ::" string \<Rightarrow> bool " 

     int_reg ::" string \<Rightarrow> ii " 

     signal_reg ::" string \<Rightarrow> signal " 

     vector_16_inc_bitvector_256_dec_reg ::" string \<Rightarrow> ( 256 Word.word) list " 

     vector_16_inc_bitvector_64_dec_reg ::" string \<Rightarrow> ( 64 Word.word) list " 

     vector_256_inc_bitvector_2048_dec_reg ::" string \<Rightarrow> ( 2048 Word.word) list " 

     vector_31_inc_bitvector_64_dec_reg ::" string \<Rightarrow> ( 64 Word.word) list " 

     vector_31_inc_int_reg ::" string \<Rightarrow> ii list " 

     vector_32_inc_bitvector_2048_dec_reg ::" string \<Rightarrow> ( 2048 Word.word) list " 

     vector_32_inc_bitvector_64_dec_reg ::" string \<Rightarrow> ( 64 Word.word) list " 

     vector_4_inc_bitvector_64_dec_reg ::" string \<Rightarrow> ( 64 Word.word) list " 

     vector_5_inc_bitvector_64_dec_reg ::" string \<Rightarrow> ( 64 Word.word) list " 

     vector_64_inc_bitvector_64_dec_reg ::" string \<Rightarrow> ( 64 Word.word) list " 

     vector_7_inc_bitvector_64_dec_reg ::" string \<Rightarrow> ( 64 Word.word) list "  





\<comment> \<open>\<open>val ProcState_of_regval : register_value -> (maybe ProcState)\<close>\<close>

fun ProcState_of_regval  :: \<open> register_value \<Rightarrow>(ProcState)option \<close>  where 
     \<open> ProcState_of_regval (Regval_ProcState (v)) = ( Some v )\<close> 
  for  "v"  :: " ProcState "
|\<open> ProcState_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_ProcState : ProcState -> register_value\<close>\<close>

definition regval_of_ProcState  :: \<open> ProcState \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_ProcState v = ( Regval_ProcState v )\<close> 
  for  "v"  :: " ProcState "


\<comment> \<open>\<open>val TMState_of_regval : register_value -> (maybe TMState)\<close>\<close>

fun TMState_of_regval  :: \<open> register_value \<Rightarrow>(TMState)option \<close>  where 
     \<open> TMState_of_regval (Regval_TMState (v)) = ( Some v )\<close> 
  for  "v"  :: " TMState "
|\<open> TMState_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_TMState : TMState -> register_value\<close>\<close>

definition regval_of_TMState  :: \<open> TMState \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_TMState v = ( Regval_TMState v )\<close> 
  for  "v"  :: " TMState "


\<comment> \<open>\<open>val __InstrEnc_of_regval : register_value -> (maybe __InstrEnc)\<close>\<close>

fun InstrEnc_of_regval  :: \<open> register_value \<Rightarrow>(InstrEnc)option \<close>  where 
     \<open> InstrEnc_of_regval (Regval___InstrEnc (v)) = ( Some v )\<close> 
  for  "v"  :: " InstrEnc "
|\<open> InstrEnc_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of___InstrEnc : __InstrEnc -> register_value\<close>\<close>

definition regval_of___InstrEnc  :: \<open> InstrEnc \<Rightarrow> register_value \<close>  where 
     \<open> regval_of___InstrEnc v = ( Regval___InstrEnc v )\<close> 
  for  "v"  :: " InstrEnc "


\<comment> \<open>\<open>val bit_of_regval : register_value -> (maybe bitU)\<close>\<close>

fun bit_of_regval  :: \<open> register_value \<Rightarrow>(bitU)option \<close>  where 
     \<open> bit_of_regval (Regval_bit (v)) = ( Some v )\<close> 
  for  "v"  :: " bitU "
|\<open> bit_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bit : bitU -> register_value\<close>\<close>

definition regval_of_bit  :: \<open> bitU \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bit v = ( Regval_bit v )\<close> 
  for  "v"  :: " bitU "


\<comment> \<open>\<open>val bitvector_13_dec_of_regval : register_value -> (maybe (mword ty13))\<close>\<close>

fun bitvector_13_dec_of_regval  :: \<open> register_value \<Rightarrow>((13)Word.word)option \<close>  where 
     \<open> bitvector_13_dec_of_regval (Regval_bitvector_13_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(13)Word.word "
|\<open> bitvector_13_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_13_dec : mword ty13 -> register_value\<close>\<close>

definition regval_of_bitvector_13_dec  :: \<open>(13)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_13_dec v = ( Regval_bitvector_13_dec v )\<close> 
  for  "v"  :: "(13)Word.word "


\<comment> \<open>\<open>val bitvector_16_dec_of_regval : register_value -> (maybe (mword ty16))\<close>\<close>

fun bitvector_16_dec_of_regval  :: \<open> register_value \<Rightarrow>((16)Word.word)option \<close>  where 
     \<open> bitvector_16_dec_of_regval (Regval_bitvector_16_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(16)Word.word "
|\<open> bitvector_16_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_16_dec : mword ty16 -> register_value\<close>\<close>

definition regval_of_bitvector_16_dec  :: \<open>(16)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_16_dec v = ( Regval_bitvector_16_dec v )\<close> 
  for  "v"  :: "(16)Word.word "


\<comment> \<open>\<open>val bitvector_1_dec_of_regval : register_value -> (maybe (mword ty1))\<close>\<close>

fun bitvector_1_dec_of_regval  :: \<open> register_value \<Rightarrow>((1)Word.word)option \<close>  where 
     \<open> bitvector_1_dec_of_regval (Regval_bitvector_1_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(1)Word.word "
|\<open> bitvector_1_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_1_dec : mword ty1 -> register_value\<close>\<close>

definition regval_of_bitvector_1_dec  :: \<open>(1)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_1_dec v = ( Regval_bitvector_1_dec v )\<close> 
  for  "v"  :: "(1)Word.word "


\<comment> \<open>\<open>val bitvector_2048_dec_of_regval : register_value -> (maybe (mword ty2048))\<close>\<close>

fun bitvector_2048_dec_of_regval  :: \<open> register_value \<Rightarrow>((2048)Word.word)option \<close>  where 
     \<open> bitvector_2048_dec_of_regval (Regval_bitvector_2048_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(2048)Word.word "
|\<open> bitvector_2048_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_2048_dec : mword ty2048 -> register_value\<close>\<close>

definition regval_of_bitvector_2048_dec  :: \<open>(2048)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_2048_dec v = ( Regval_bitvector_2048_dec v )\<close> 
  for  "v"  :: "(2048)Word.word "


\<comment> \<open>\<open>val bitvector_256_dec_of_regval : register_value -> (maybe (mword ty256))\<close>\<close>

fun bitvector_256_dec_of_regval  :: \<open> register_value \<Rightarrow>((256)Word.word)option \<close>  where 
     \<open> bitvector_256_dec_of_regval (Regval_bitvector_256_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(256)Word.word "
|\<open> bitvector_256_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_256_dec : mword ty256 -> register_value\<close>\<close>

definition regval_of_bitvector_256_dec  :: \<open>(256)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_256_dec v = ( Regval_bitvector_256_dec v )\<close> 
  for  "v"  :: "(256)Word.word "


\<comment> \<open>\<open>val bitvector_29_dec_of_regval : register_value -> (maybe (mword ty29))\<close>\<close>

fun bitvector_29_dec_of_regval  :: \<open> register_value \<Rightarrow>((29)Word.word)option \<close>  where 
     \<open> bitvector_29_dec_of_regval (Regval_bitvector_29_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(29)Word.word "
|\<open> bitvector_29_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_29_dec : mword ty29 -> register_value\<close>\<close>

definition regval_of_bitvector_29_dec  :: \<open>(29)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_29_dec v = ( Regval_bitvector_29_dec v )\<close> 
  for  "v"  :: "(29)Word.word "


\<comment> \<open>\<open>val bitvector_2_dec_of_regval : register_value -> (maybe (mword ty2))\<close>\<close>

fun bitvector_2_dec_of_regval  :: \<open> register_value \<Rightarrow>((2)Word.word)option \<close>  where 
     \<open> bitvector_2_dec_of_regval (Regval_bitvector_2_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(2)Word.word "
|\<open> bitvector_2_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_2_dec : mword ty2 -> register_value\<close>\<close>

definition regval_of_bitvector_2_dec  :: \<open>(2)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_2_dec v = ( Regval_bitvector_2_dec v )\<close> 
  for  "v"  :: "(2)Word.word "


\<comment> \<open>\<open>val bitvector_32_dec_of_regval : register_value -> (maybe (mword ty32))\<close>\<close>

fun bitvector_32_dec_of_regval  :: \<open> register_value \<Rightarrow>((32)Word.word)option \<close>  where 
     \<open> bitvector_32_dec_of_regval (Regval_bitvector_32_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(32)Word.word "
|\<open> bitvector_32_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_32_dec : mword ty32 -> register_value\<close>\<close>

definition regval_of_bitvector_32_dec  :: \<open>(32)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_32_dec v = ( Regval_bitvector_32_dec v )\<close> 
  for  "v"  :: "(32)Word.word "


\<comment> \<open>\<open>val bitvector_3_dec_of_regval : register_value -> (maybe (mword ty3))\<close>\<close>

fun bitvector_3_dec_of_regval  :: \<open> register_value \<Rightarrow>((3)Word.word)option \<close>  where 
     \<open> bitvector_3_dec_of_regval (Regval_bitvector_3_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(3)Word.word "
|\<open> bitvector_3_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_3_dec : mword ty3 -> register_value\<close>\<close>

definition regval_of_bitvector_3_dec  :: \<open>(3)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_3_dec v = ( Regval_bitvector_3_dec v )\<close> 
  for  "v"  :: "(3)Word.word "


\<comment> \<open>\<open>val bitvector_4_dec_of_regval : register_value -> (maybe (mword ty4))\<close>\<close>

fun bitvector_4_dec_of_regval  :: \<open> register_value \<Rightarrow>((4)Word.word)option \<close>  where 
     \<open> bitvector_4_dec_of_regval (Regval_bitvector_4_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(4)Word.word "
|\<open> bitvector_4_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_4_dec : mword ty4 -> register_value\<close>\<close>

definition regval_of_bitvector_4_dec  :: \<open>(4)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_4_dec v = ( Regval_bitvector_4_dec v )\<close> 
  for  "v"  :: "(4)Word.word "


\<comment> \<open>\<open>val bitvector_52_dec_of_regval : register_value -> (maybe (mword ty52))\<close>\<close>

fun bitvector_52_dec_of_regval  :: \<open> register_value \<Rightarrow>((52)Word.word)option \<close>  where 
     \<open> bitvector_52_dec_of_regval (Regval_bitvector_52_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(52)Word.word "
|\<open> bitvector_52_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_52_dec : mword ty52 -> register_value\<close>\<close>

definition regval_of_bitvector_52_dec  :: \<open>(52)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_52_dec v = ( Regval_bitvector_52_dec v )\<close> 
  for  "v"  :: "(52)Word.word "


\<comment> \<open>\<open>val bitvector_63_dec_of_regval : register_value -> (maybe (mword ty63))\<close>\<close>

fun bitvector_63_dec_of_regval  :: \<open> register_value \<Rightarrow>((63)Word.word)option \<close>  where 
     \<open> bitvector_63_dec_of_regval (Regval_bitvector_63_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(63)Word.word "
|\<open> bitvector_63_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_63_dec : mword ty63 -> register_value\<close>\<close>

definition regval_of_bitvector_63_dec  :: \<open>(63)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_63_dec v = ( Regval_bitvector_63_dec v )\<close> 
  for  "v"  :: "(63)Word.word "


\<comment> \<open>\<open>val bitvector_64_dec_of_regval : register_value -> (maybe (mword ty64))\<close>\<close>

fun bitvector_64_dec_of_regval  :: \<open> register_value \<Rightarrow>((64)Word.word)option \<close>  where 
     \<open> bitvector_64_dec_of_regval (Regval_bitvector_64_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(64)Word.word "
|\<open> bitvector_64_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_64_dec : mword ty64 -> register_value\<close>\<close>

definition regval_of_bitvector_64_dec  :: \<open>(64)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_64_dec v = ( Regval_bitvector_64_dec v )\<close> 
  for  "v"  :: "(64)Word.word "


\<comment> \<open>\<open>val bitvector_88_dec_of_regval : register_value -> (maybe (mword ty88))\<close>\<close>

fun bitvector_88_dec_of_regval  :: \<open> register_value \<Rightarrow>((88)Word.word)option \<close>  where 
     \<open> bitvector_88_dec_of_regval (Regval_bitvector_88_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(88)Word.word "
|\<open> bitvector_88_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_88_dec : mword ty88 -> register_value\<close>\<close>

definition regval_of_bitvector_88_dec  :: \<open>(88)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_88_dec v = ( Regval_bitvector_88_dec v )\<close> 
  for  "v"  :: "(88)Word.word "


\<comment> \<open>\<open>val bitvector_8_dec_of_regval : register_value -> (maybe (mword ty8))\<close>\<close>

fun bitvector_8_dec_of_regval  :: \<open> register_value \<Rightarrow>((8)Word.word)option \<close>  where 
     \<open> bitvector_8_dec_of_regval (Regval_bitvector_8_dec (v)) = ( Some v )\<close> 
  for  "v"  :: "(8)Word.word "
|\<open> bitvector_8_dec_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_bitvector_8_dec : mword ty8 -> register_value\<close>\<close>

definition regval_of_bitvector_8_dec  :: \<open>(8)Word.word \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_bitvector_8_dec v = ( Regval_bitvector_8_dec v )\<close> 
  for  "v"  :: "(8)Word.word "


\<comment> \<open>\<open>val signal_of_regval : register_value -> (maybe signal)\<close>\<close>

fun signal_of_regval  :: \<open> register_value \<Rightarrow>(signal)option \<close>  where 
     \<open> signal_of_regval (Regval_signal (v)) = ( Some v )\<close> 
  for  "v"  :: " signal "
|\<open> signal_of_regval _ = ( None )\<close>


\<comment> \<open>\<open>val regval_of_signal : signal -> register_value\<close>\<close>

definition regval_of_signal  :: \<open> signal \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_signal v = ( Regval_signal v )\<close> 
  for  "v"  :: " signal "




\<comment> \<open>\<open>val bool_of_register_value : register_value -> maybe bool\<close>\<close>
fun bool_of_register_value  :: \<open> register_value \<Rightarrow>(bool)option \<close>  where 
     \<open> bool_of_register_value (Regval_bool v) = ( Some v )\<close> 
  for  "v"  :: " bool "
|\<open> bool_of_register_value _ = ( None )\<close>

\<comment> \<open>\<open>val register_value_of_bool : bool -> register_value\<close>\<close>
definition register_value_of_bool  :: \<open> bool \<Rightarrow> register_value \<close>  where 
     \<open> register_value_of_bool v = ( Regval_bool v )\<close> 
  for  "v"  :: " bool "

\<comment> \<open>\<open>val int_of_register_value : register_value -> maybe integer\<close>\<close>
fun int_of_register_value  :: \<open> register_value \<Rightarrow>(int)option \<close>  where 
     \<open> int_of_register_value (Regval_int v) = ( Some v )\<close> 
  for  "v"  :: " int "
|\<open> int_of_register_value _ = ( None )\<close>

\<comment> \<open>\<open>val register_value_of_int : integer -> register_value\<close>\<close>
definition register_value_of_int  :: \<open> int \<Rightarrow> register_value \<close>  where 
     \<open> register_value_of_int v = ( Regval_int v )\<close> 
  for  "v"  :: " int "

\<comment> \<open>\<open>val real_of_register_value : register_value -> maybe real\<close>\<close>
fun real_of_register_value  :: \<open> register_value \<Rightarrow>(real)option \<close>  where 
     \<open> real_of_register_value (Regval_real v) = ( Some v )\<close> 
  for  "v"  :: " real "
|\<open> real_of_register_value _ = ( None )\<close>

\<comment> \<open>\<open>val register_value_of_real : real -> register_value\<close>\<close>
definition register_value_of_real  :: \<open> real \<Rightarrow> register_value \<close>  where 
     \<open> register_value_of_real v = ( Regval_real v )\<close> 
  for  "v"  :: " real "

\<comment> \<open>\<open>val string_of_register_value : register_value -> maybe string\<close>\<close>
fun string_of_register_value  :: \<open> register_value \<Rightarrow>(string)option \<close>  where 
     \<open> string_of_register_value (Regval_string v) = ( Some v )\<close> 
  for  "v"  :: " string "
|\<open> string_of_register_value _ = ( None )\<close>

\<comment> \<open>\<open>val register_value_of_string : string -> register_value\<close>\<close>
definition register_value_of_string  :: \<open> string \<Rightarrow> register_value \<close>  where 
     \<open> register_value_of_string v = ( Regval_string v )\<close> 
  for  "v"  :: " string "


definition instance_Sail2_values_Register_Value_Armv9_types_register_value_dict  :: \<open>(register_value)Register_Value_class \<close>  where 
     \<open> instance_Sail2_values_Register_Value_Armv9_types_register_value_dict = ((|

  bool_of_regval_method = bool_of_register_value,

  regval_of_bool_method = register_value_of_bool,

  int_of_regval_method = int_of_register_value,

  regval_of_int_method = register_value_of_int,

  real_of_regval_method = real_of_register_value,

  regval_of_real_method = register_value_of_real,

  string_of_regval_method = string_of_register_value,

  regval_of_string_method = register_value_of_string |) )\<close>

\<comment> \<open>\<open>val vector_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)\<close>\<close>
fun vector_of_regval  :: \<open>(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a list)option \<close>  where 
     \<open> vector_of_regval of_regval1 (Regval_vector v) = ( just_list (List.map of_regval1 v))\<close> 
  for  "of_regval1"  :: " register_value \<Rightarrow> 'a option " 
  and  "v"  :: "(register_value)list "
|\<open> vector_of_regval of_regval1 _ = ( None )\<close> 
  for  "of_regval1"  :: " register_value \<Rightarrow> 'a option "


\<comment> \<open>\<open>val regval_of_vector : forall 'a. ('a -> register_value) -> list 'a -> register_value\<close>\<close>
definition regval_of_vector  :: \<open>('a \<Rightarrow> register_value)\<Rightarrow> 'a list \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_vector regval_of1 xs = ( Regval_vector (List.map regval_of1 xs))\<close> 
  for  "regval_of1"  :: " 'a \<Rightarrow> register_value " 
  and  "xs"  :: " 'a list "


\<comment> \<open>\<open>val list_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)\<close>\<close>
fun list_of_regval  :: \<open>(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a list)option \<close>  where 
     \<open> list_of_regval of_regval1 (Regval_list v) = ( just_list (List.map of_regval1 v))\<close> 
  for  "of_regval1"  :: " register_value \<Rightarrow> 'a option " 
  and  "v"  :: "(register_value)list "
|\<open> list_of_regval of_regval1 _ = ( None )\<close> 
  for  "of_regval1"  :: " register_value \<Rightarrow> 'a option "


\<comment> \<open>\<open>val regval_of_list : forall 'a. ('a -> register_value) -> list 'a -> register_value\<close>\<close>
definition regval_of_list  :: \<open>('a \<Rightarrow> register_value)\<Rightarrow> 'a list \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_list regval_of1 xs = ( Regval_list (List.map regval_of1 xs))\<close> 
  for  "regval_of1"  :: " 'a \<Rightarrow> register_value " 
  and  "xs"  :: " 'a list "


\<comment> \<open>\<open>val option_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (maybe 'a)\<close>\<close>
fun option_of_regval  :: \<open>(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a option)option \<close>  where 
     \<open> option_of_regval of_regval1 (Regval_option v) = ( Some (Option.bind v of_regval1))\<close> 
  for  "of_regval1"  :: " register_value \<Rightarrow> 'a option " 
  and  "v"  :: "(register_value)option "
|\<open> option_of_regval of_regval1 _ = ( None )\<close> 
  for  "of_regval1"  :: " register_value \<Rightarrow> 'a option "


\<comment> \<open>\<open>val regval_of_option : forall 'a. ('a -> register_value) -> maybe 'a -> register_value\<close>\<close>
definition regval_of_option  :: \<open>('a \<Rightarrow> register_value)\<Rightarrow> 'a option \<Rightarrow> register_value \<close>  where 
     \<open> regval_of_option regval_of1 v = ( Regval_option (map_option regval_of1 v))\<close> 
  for  "regval_of1"  :: " 'a \<Rightarrow> register_value " 
  and  "v"  :: " 'a option "



definition STACK_LIMIT_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> STACK_LIMIT_ref = ( (|
  name = (''STACK_LIMIT''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''STACK_LIMIT''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''STACK_LIMIT'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition STACK_BASE_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> STACK_BASE_ref = ( (|
  name = (''STACK_BASE''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''STACK_BASE''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''STACK_BASE'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HEAP_LIMIT_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HEAP_LIMIT_ref = ( (|
  name = (''HEAP_LIMIT''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HEAP_LIMIT''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HEAP_LIMIT'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HEAP_BASE_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HEAP_BASE_ref = ( (|
  name = (''HEAP_BASE''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HEAP_BASE''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HEAP_BASE'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBG_ROM_ADDR_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> DBG_ROM_ADDR_ref = ( (|
  name = (''__DBG_ROM_ADDR''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__DBG_ROM_ADDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__DBG_ROM_ADDR'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition mops_forward_copy_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> mops_forward_copy_ref = ( (|
  name = (''__mops_forward_copy''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__mops_forward_copy''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__mops_forward_copy'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition trickbox_enabled_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> trickbox_enabled_ref = ( (|
  name = (''__trickbox_enabled''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__trickbox_enabled''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__trickbox_enabled'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition v93_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> v93_implemented_ref = ( (|
  name = (''__v93_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__v93_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__v93_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition v92_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> v92_implemented_ref = ( (|
  name = (''__v92_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__v92_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__v92_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition v91_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> v91_implemented_ref = ( (|
  name = (''__v91_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__v91_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__v91_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition v90_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> v90_implemented_ref = ( (|
  name = (''__v90_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__v90_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__v90_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition v88_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> v88_implemented_ref = ( (|
  name = (''__v88_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__v88_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__v88_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition v87_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> v87_implemented_ref = ( (|
  name = (''__v87_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__v87_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__v87_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition v86_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> v86_implemented_ref = ( (|
  name = (''__v86_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__v86_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__v86_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition v85_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> v85_implemented_ref = ( (|
  name = (''__v85_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__v85_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__v85_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition v84_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> v84_implemented_ref = ( (|
  name = (''__v84_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__v84_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__v84_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition v83_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> v83_implemented_ref = ( (|
  name = (''__v83_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__v83_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__v83_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition v82_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> v82_implemented_ref = ( (|
  name = (''__v82_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__v82_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__v82_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition v81_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> v81_implemented_ref = ( (|
  name = (''__v81_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__v81_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__v81_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition syncAbortOnDeviceWrite_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> syncAbortOnDeviceWrite_ref = ( (|
  name = (''__syncAbortOnDeviceWrite''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__syncAbortOnDeviceWrite''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__syncAbortOnDeviceWrite'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition syncAbortOnWriteNormNonCache_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> syncAbortOnWriteNormNonCache_ref = ( (|
  name = (''__syncAbortOnWriteNormNonCache''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__syncAbortOnWriteNormNonCache''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__syncAbortOnWriteNormNonCache'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition syncAbortOnWriteNormCache_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> syncAbortOnWriteNormCache_ref = ( (|
  name = (''__syncAbortOnWriteNormCache''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__syncAbortOnWriteNormCache''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__syncAbortOnWriteNormCache'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition syncAbortOnTTWNonCache_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> syncAbortOnTTWNonCache_ref = ( (|
  name = (''__syncAbortOnTTWNonCache''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__syncAbortOnTTWNonCache''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__syncAbortOnTTWNonCache'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition syncAbortOnTTWCache_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> syncAbortOnTTWCache_ref = ( (|
  name = (''__syncAbortOnTTWCache''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__syncAbortOnTTWCache''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__syncAbortOnTTWCache'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition syncAbortOnPrefetch_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> syncAbortOnPrefetch_ref = ( (|
  name = (''__syncAbortOnPrefetch''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__syncAbortOnPrefetch''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__syncAbortOnPrefetch'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition syncAbortOnSoWrite_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> syncAbortOnSoWrite_ref = ( (|
  name = (''__syncAbortOnSoWrite''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__syncAbortOnSoWrite''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__syncAbortOnSoWrite'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition syncAbortOnSoRead_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> syncAbortOnSoRead_ref = ( (|
  name = (''__syncAbortOnSoRead''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__syncAbortOnSoRead''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__syncAbortOnSoRead'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition syncAbortOnDeviceRead_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> syncAbortOnDeviceRead_ref = ( (|
  name = (''__syncAbortOnDeviceRead''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__syncAbortOnDeviceRead''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__syncAbortOnDeviceRead'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition syncAbortOnReadNormNonCache_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> syncAbortOnReadNormNonCache_ref = ( (|
  name = (''__syncAbortOnReadNormNonCache''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__syncAbortOnReadNormNonCache''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__syncAbortOnReadNormNonCache'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition syncAbortOnReadNormCache_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> syncAbortOnReadNormCache_ref = ( (|
  name = (''__syncAbortOnReadNormCache''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__syncAbortOnReadNormCache''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__syncAbortOnReadNormCache'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition PMUBase_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> PMUBase_ref = ( (|
  name = (''__PMUBase''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__PMUBase''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__PMUBase'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition GICITSControlBase_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> GICITSControlBase_ref = ( (|
  name = (''__GICITSControlBase''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__GICITSControlBase''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__GICITSControlBase'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition GICDistBase_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> GICDistBase_ref = ( (|
  name = (''__GICDistBase''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__GICDistBase''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__GICDistBase'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition GICCPUInterfaceBase_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> GICCPUInterfaceBase_ref = ( (|
  name = (''__GICCPUInterfaceBase''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__GICCPUInterfaceBase''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__GICCPUInterfaceBase'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition ExtDebugBase_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> ExtDebugBase_ref = ( (|
  name = (''__ExtDebugBase''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__ExtDebugBase''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__ExtDebugBase'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition CNTControlBase_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> CNTControlBase_ref = ( (|
  name = (''__CNTControlBase''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__CNTControlBase''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__CNTControlBase'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition CTIBase_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> CTIBase_ref = ( (|
  name = (''__CTIBase''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__CTIBase''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__CTIBase'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition CNTSCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTSCR_ref = ( (|
  name = (''CNTSCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTSCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTSCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ExclusiveMonitorSet_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> ExclusiveMonitorSet_ref = ( (|
  name = (''__ExclusiveMonitorSet''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__ExclusiveMonitorSet''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__ExclusiveMonitorSet'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition ETEBase_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> ETEBase_ref = ( (|
  name = (''__ETEBase''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__ETEBase''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__ETEBase'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition VLPI_base_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> VLPI_base_ref = ( (|
  name = (''__VLPI_base''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__VLPI_base''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__VLPI_base'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition SGI_base_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> SGI_base_ref = ( (|
  name = (''__SGI_base''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__SGI_base''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__SGI_base'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition RD_base_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> RD_base_ref = ( (|
  name = (''__RD_base''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__RD_base''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__RD_base'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition CNTCTLBase_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> CNTCTLBase_ref = ( (|
  name = (''__CNTCTLBase''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__CNTCTLBase''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__CNTCTLBase'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition CNTEL0BaseN_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> CNTEL0BaseN_ref = ( (|
  name = (''__CNTEL0BaseN''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__CNTEL0BaseN''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__CNTEL0BaseN'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition CNTBaseN_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> CNTBaseN_ref = ( (|
  name = (''__CNTBaseN''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__CNTBaseN''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__CNTBaseN'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition CNTReadBase_ref  :: \<open>((regstate),(register_value),((52)Word.word))register_ref \<close>  where 
     \<open> CNTReadBase_ref = ( (|
  name = (''__CNTReadBase''),
  read_from = ((\<lambda> s . (bitvector_52_dec_reg   s) (''__CNTReadBase''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_52_dec_reg :=
  ((\<lambda> reg .  if reg = (''__CNTReadBase'') then v else(bitvector_52_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_52_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_52_dec v)) |) )\<close>


definition InstructionStep_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> InstructionStep_ref = ( (|
  name = (''__InstructionStep''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__InstructionStep''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__InstructionStep'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition DTRTX_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DTRTX_ref = ( (|
  name = (''DTRTX''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DTRTX''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DTRTX'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DTRRX_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DTRRX_ref = ( (|
  name = (''DTRRX''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DTRRX''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DTRRX'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition Dclone_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> Dclone_ref = ( (|
  name = (''_Dclone''),
  read_from = ((\<lambda> s . (vector_32_inc_bitvector_64_dec_reg   s) (''_Dclone''))),
  write_to = ((\<lambda> v s .  (( s (| vector_32_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''_Dclone'') then v else(vector_32_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition BTypeCompatible_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> BTypeCompatible_ref = ( (|
  name = (''BTypeCompatible''),
  read_from = ((\<lambda> s . (bool_reg   s) (''BTypeCompatible''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''BTypeCompatible'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition BTypeNext_ref  :: \<open>((regstate),(register_value),((2)Word.word))register_ref \<close>  where 
     \<open> BTypeNext_ref = ( (|
  name = (''BTypeNext''),
  read_from = ((\<lambda> s . (bitvector_2_dec_reg   s) (''BTypeNext''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_2_dec_reg :=
  ((\<lambda> reg .  if reg = (''BTypeNext'') then v else(bitvector_2_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_2_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_2_dec v)) |) )\<close>


definition RC_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> RC_ref = ( (|
  name = (''RC''),
  read_from = ((\<lambda> s . (vector_5_inc_bitvector_64_dec_reg   s) (''RC''))),
  write_to = ((\<lambda> v s .  (( s (| vector_5_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RC'') then v else(vector_5_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition EventRegister_ref  :: \<open>((regstate),(register_value),((1)Word.word))register_ref \<close>  where 
     \<open> EventRegister_ref = ( (|
  name = (''EventRegister''),
  read_from = ((\<lambda> s . (bitvector_1_dec_reg   s) (''EventRegister''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_1_dec_reg :=
  ((\<lambda> reg .  if reg = (''EventRegister'') then v else(bitvector_1_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_1_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_1_dec v)) |) )\<close>


definition ShouldAdvanceSS_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> ShouldAdvanceSS_ref = ( (|
  name = (''ShouldAdvanceSS''),
  read_from = ((\<lambda> s . (bool_reg   s) (''ShouldAdvanceSS''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''ShouldAdvanceSS'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition ShouldAdvanceIT_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> ShouldAdvanceIT_ref = ( (|
  name = (''ShouldAdvanceIT''),
  read_from = ((\<lambda> s . (bool_reg   s) (''ShouldAdvanceIT''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''ShouldAdvanceIT'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition IsWFEsleep_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> IsWFEsleep_ref = ( (|
  name = (''IsWFEsleep''),
  read_from = ((\<lambda> s . (bool_reg   s) (''IsWFEsleep''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''IsWFEsleep'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition IsWFIsleep_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> IsWFIsleep_ref = ( (|
  name = (''IsWFIsleep''),
  read_from = ((\<lambda> s . (bool_reg   s) (''IsWFIsleep''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''IsWFIsleep'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition DBGOSLAR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGOSLAR_ref = ( (|
  name = (''DBGOSLAR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGOSLAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGOSLAR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition TPIDRURW_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> TPIDRURW_S_ref = ( (|
  name = (''TPIDRURW_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''TPIDRURW_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDRURW_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition TPIDRURO_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> TPIDRURO_S_ref = ( (|
  name = (''TPIDRURO_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''TPIDRURO_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDRURO_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition TPIDRPRW_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> TPIDRPRW_S_ref = ( (|
  name = (''TPIDRPRW_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''TPIDRPRW_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDRPRW_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition TCMTR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> TCMTR_ref = ( (|
  name = (''TCMTR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''TCMTR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''TCMTR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTP_CVAL_S_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTP_CVAL_S_ref = ( (|
  name = (''CNTP_CVAL_S''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTP_CVAL_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTP_CVAL_S'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMAIR1_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMAIR1_S_ref = ( (|
  name = (''AMAIR1_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMAIR1_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMAIR1_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMAIR0_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMAIR0_S_ref = ( (|
  name = (''AMAIR0_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMAIR0_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMAIR0_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AIFSR_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AIFSR_S_ref = ( (|
  name = (''AIFSR_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AIFSR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AIFSR_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ADFSR_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ADFSR_S_ref = ( (|
  name = (''ADFSR_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ADFSR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ADFSR_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ACTLR_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ACTLR_S_ref = ( (|
  name = (''ACTLR_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ACTLR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ACTLR_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ACTLR2_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ACTLR2_S_ref = ( (|
  name = (''ACTLR2_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ACTLR2_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ACTLR2_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CP15SDISABLE2_ref  :: \<open>((regstate),(register_value),(signal))register_ref \<close>  where 
     \<open> CP15SDISABLE2_ref = ( (|
  name = (''CP15SDISABLE2''),
  read_from = ((\<lambda> s . (signal_reg   s) (''CP15SDISABLE2''))),
  write_to = ((\<lambda> v s .  (( s (| signal_reg :=
  ((\<lambda> reg .  if reg = (''CP15SDISABLE2'') then v else(signal_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  signal_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_signal v)) |) )\<close>


definition CP15SDISABLE_ref  :: \<open>((regstate),(register_value),(signal))register_ref \<close>  where 
     \<open> CP15SDISABLE_ref = ( (|
  name = (''CP15SDISABLE''),
  read_from = ((\<lambda> s . (signal_reg   s) (''CP15SDISABLE''))),
  write_to = ((\<lambda> v s .  (( s (| signal_reg :=
  ((\<lambda> reg .  if reg = (''CP15SDISABLE'') then v else(signal_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  signal_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_signal v)) |) )\<close>


definition DACR_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DACR_S_ref = ( (|
  name = (''DACR_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DACR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DACR_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CONTEXTIDR_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CONTEXTIDR_S_ref = ( (|
  name = (''CONTEXTIDR_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CONTEXTIDR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CONTEXTIDR_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ignore_rvbar_in_aarch32_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> ignore_rvbar_in_aarch32_ref = ( (|
  name = (''__ignore_rvbar_in_aarch32''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__ignore_rvbar_in_aarch32''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__ignore_rvbar_in_aarch32'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition CFG_RMR_AA64_ref  :: \<open>((regstate),(register_value),((1)Word.word))register_ref \<close>  where 
     \<open> CFG_RMR_AA64_ref = ( (|
  name = (''CFG_RMR_AA64''),
  read_from = ((\<lambda> s . (bitvector_1_dec_reg   s) (''CFG_RMR_AA64''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_1_dec_reg :=
  ((\<lambda> reg .  if reg = (''CFG_RMR_AA64'') then v else(bitvector_1_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_1_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_1_dec v)) |) )\<close>


definition rme_l0gptsz_ref  :: \<open>((regstate),(register_value),((4)Word.word))register_ref \<close>  where 
     \<open> rme_l0gptsz_ref = ( (|
  name = (''__rme_l0gptsz''),
  read_from = ((\<lambda> s . (bitvector_4_dec_reg   s) (''__rme_l0gptsz''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_4_dec_reg :=
  ((\<lambda> reg .  if reg = (''__rme_l0gptsz'') then v else(bitvector_4_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_4_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_4_dec v)) |) )\<close>


definition pan_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> pan_implemented_ref = ( (|
  name = (''__pan_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__pan_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__pan_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition mpam_has_altsp_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> mpam_has_altsp_ref = ( (|
  name = (''__mpam_has_altsp''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__mpam_has_altsp''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__mpam_has_altsp'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition gmid_log2_block_size_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> gmid_log2_block_size_ref = ( (|
  name = (''__gmid_log2_block_size''),
  read_from = ((\<lambda> s . (int_reg   s) (''__gmid_log2_block_size''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__gmid_log2_block_size'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition empam_frac_ref  :: \<open>((regstate),(register_value),((4)Word.word))register_ref \<close>  where 
     \<open> empam_frac_ref = ( (|
  name = (''__empam_frac''),
  read_from = ((\<lambda> s . (bitvector_4_dec_reg   s) (''__empam_frac''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_4_dec_reg :=
  ((\<lambda> reg .  if reg = (''__empam_frac'') then v else(bitvector_4_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_4_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_4_dec v)) |) )\<close>


definition dot_product_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> dot_product_implemented_ref = ( (|
  name = (''__dot_product_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__dot_product_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__dot_product_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition dczid_log2_block_size_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> dczid_log2_block_size_ref = ( (|
  name = (''__dczid_log2_block_size''),
  read_from = ((\<lambda> s . (int_reg   s) (''__dczid_log2_block_size''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__dczid_log2_block_size'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition crc32_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> crc32_implemented_ref = ( (|
  name = (''__crc32_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__crc32_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__crc32_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition CNTbase_frequency_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTbase_frequency_ref = ( (|
  name = (''__CNTbase_frequency''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''__CNTbase_frequency''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''__CNTbase_frequency'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICD_TYPER_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICD_TYPER_ref = ( (|
  name = (''GICD_TYPER''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICD_TYPER''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICD_TYPER'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIDEVARCH_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIDEVARCH_ref = ( (|
  name = (''CTIDEVARCH''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIDEVARCH''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIDEVARCH'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTFID0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTFID0_ref = ( (|
  name = (''CNTFID0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTFID0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTFID0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CFG_MPIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CFG_MPIDR_ref = ( (|
  name = (''CFG_MPIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CFG_MPIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CFG_MPIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMIIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMIIDR_ref = ( (|
  name = (''AMIIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMIIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMIIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMDEVARCH_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMDEVARCH_ref = ( (|
  name = (''AMDEVARCH''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMDEVARCH''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMDEVARCH'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTV_TVAL_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTV_TVAL_EL0_ref = ( (|
  name = (''CNTV_TVAL_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTV_TVAL_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTV_TVAL_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTP_TVAL_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTP_TVAL_EL0_ref = ( (|
  name = (''CNTP_TVAL_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTP_TVAL_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTP_TVAL_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTPS_TVAL_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTPS_TVAL_EL1_ref = ( (|
  name = (''CNTPS_TVAL_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTPS_TVAL_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTPS_TVAL_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHV_TVAL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHV_TVAL_EL2_ref = ( (|
  name = (''CNTHV_TVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHV_TVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHV_TVAL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHVS_TVAL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHVS_TVAL_EL2_ref = ( (|
  name = (''CNTHVS_TVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHVS_TVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHVS_TVAL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHP_TVAL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHP_TVAL_EL2_ref = ( (|
  name = (''CNTHP_TVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHP_TVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHP_TVAL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHPS_TVAL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHPS_TVAL_EL2_ref = ( (|
  name = (''CNTHPS_TVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHPS_TVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHPS_TVAL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition fp16_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> fp16_implemented_ref = ( (|
  name = (''__fp16_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__fp16_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__fp16_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition exclusive_granule_size_ref  :: \<open>((regstate),(register_value),((4)Word.word))register_ref \<close>  where 
     \<open> exclusive_granule_size_ref = ( (|
  name = (''__exclusive_granule_size''),
  read_from = ((\<lambda> s . (bitvector_4_dec_reg   s) (''__exclusive_granule_size''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_4_dec_reg :=
  ((\<lambda> reg .  if reg = (''__exclusive_granule_size'') then v else(bitvector_4_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_4_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_4_dec v)) |) )\<close>


definition ConfigReg_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ConfigReg_ref = ( (|
  name = (''_ConfigReg''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''_ConfigReg''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''_ConfigReg'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition TLBTR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> TLBTR_ref = ( (|
  name = (''TLBTR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''TLBTR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''TLBTR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition NMRR_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> NMRR_S_ref = ( (|
  name = (''NMRR_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''NMRR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''NMRR_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition FPSID_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> FPSID_ref = ( (|
  name = (''FPSID''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''FPSID''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''FPSID'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DBGDEVID_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGDEVID_ref = ( (|
  name = (''DBGDEVID''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGDEVID''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGDEVID'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition TTBR1_S_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TTBR1_S_ref = ( (|
  name = (''TTBR1_S''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TTBR1_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBR1_S'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TTBR0_S_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TTBR0_S_ref = ( (|
  name = (''TTBR0_S''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TTBR0_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBR0_S'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TTBCR2_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> TTBCR2_S_ref = ( (|
  name = (''TTBCR2_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''TTBCR2_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBCR2_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SDCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SDCR_ref = ( (|
  name = (''SDCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SDCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SDCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition MAIR0_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MAIR0_S_ref = ( (|
  name = (''MAIR0_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MAIR0_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MAIR0_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMVIDSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMVIDSR_ref = ( (|
  name = (''PMVIDSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMVIDSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMVIDSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMPIDR4_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMPIDR4_ref = ( (|
  name = (''PMPIDR4''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMPIDR4''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMPIDR4'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMPIDR3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMPIDR3_ref = ( (|
  name = (''PMPIDR3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMPIDR3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMPIDR3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMPIDR2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMPIDR2_ref = ( (|
  name = (''PMPIDR2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMPIDR2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMPIDR2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMPIDR1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMPIDR1_ref = ( (|
  name = (''PMPIDR1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMPIDR1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMPIDR1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMPIDR0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMPIDR0_ref = ( (|
  name = (''PMPIDR0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMPIDR0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMPIDR0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMPCSR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMPCSR_ref = ( (|
  name = (''PMPCSR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMPCSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMPCSR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMMIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMMIR_ref = ( (|
  name = (''PMMIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMMIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMMIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMLSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMLSR_ref = ( (|
  name = (''PMLSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMLSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMLSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMLAR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMLAR_ref = ( (|
  name = (''PMLAR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMLAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMLAR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMITCTRL_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMITCTRL_ref = ( (|
  name = (''PMITCTRL''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMITCTRL''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMITCTRL'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMDEVTYPE_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMDEVTYPE_ref = ( (|
  name = (''PMDEVTYPE''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMDEVTYPE''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMDEVTYPE'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMDEVID_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMDEVID_ref = ( (|
  name = (''PMDEVID''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMDEVID''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMDEVID'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMCIDR3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMCIDR3_ref = ( (|
  name = (''PMCIDR3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMCIDR3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCIDR3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMCIDR2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMCIDR2_ref = ( (|
  name = (''PMCIDR2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMCIDR2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCIDR2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMCIDR1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMCIDR1_ref = ( (|
  name = (''PMCIDR1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMCIDR1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCIDR1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMCIDR0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMCIDR0_ref = ( (|
  name = (''PMCIDR0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMCIDR0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCIDR0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMCFGR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMCFGR_ref = ( (|
  name = (''PMCFGR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMCFGR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCFGR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMAUTHSTATUS_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> PMAUTHSTATUS_ref = ( (|
  name = (''PMAUTHSTATUS''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''PMAUTHSTATUS''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMAUTHSTATUS'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PAR_S_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PAR_S_ref = ( (|
  name = (''PAR_S''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PAR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PAR_S'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition JOSCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> JOSCR_ref = ( (|
  name = (''JOSCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''JOSCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''JOSCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition JMCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> JMCR_ref = ( (|
  name = (''JMCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''JMCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''JMCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition JIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> JIDR_ref = ( (|
  name = (''JIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''JIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''JIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_MSRE_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_MSRE_ref = ( (|
  name = (''ICC_MSRE''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_MSRE''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_MSRE'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_MGRPEN1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_MGRPEN1_ref = ( (|
  name = (''ICC_MGRPEN1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_MGRPEN1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_MGRPEN1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ICC_MCTLR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ICC_MCTLR_ref = ( (|
  name = (''ICC_MCTLR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''ICC_MCTLR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_MCTLR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GITS_TYPER_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GITS_TYPER_ref = ( (|
  name = (''GITS_TYPER''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GITS_TYPER''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GITS_TYPER'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GITS_STATUSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GITS_STATUSR_ref = ( (|
  name = (''GITS_STATUSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GITS_STATUSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GITS_STATUSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GITS_SGIR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GITS_SGIR_ref = ( (|
  name = (''GITS_SGIR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GITS_SGIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GITS_SGIR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GITS_PARTIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GITS_PARTIDR_ref = ( (|
  name = (''GITS_PARTIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GITS_PARTIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GITS_PARTIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GITS_MPIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GITS_MPIDR_ref = ( (|
  name = (''GITS_MPIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GITS_MPIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GITS_MPIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GITS_MPAMIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GITS_MPAMIDR_ref = ( (|
  name = (''GITS_MPAMIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GITS_MPAMIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GITS_MPAMIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GITS_IIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GITS_IIDR_ref = ( (|
  name = (''GITS_IIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GITS_IIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GITS_IIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GITS_CWRITER_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GITS_CWRITER_ref = ( (|
  name = (''GITS_CWRITER''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GITS_CWRITER''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GITS_CWRITER'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GITS_CTLR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GITS_CTLR_ref = ( (|
  name = (''GITS_CTLR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GITS_CTLR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GITS_CTLR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GITS_CREADR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GITS_CREADR_ref = ( (|
  name = (''GITS_CREADR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GITS_CREADR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GITS_CREADR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GITS_CBASER_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GITS_CBASER_ref = ( (|
  name = (''GITS_CBASER''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GITS_CBASER''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GITS_CBASER'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GICV_STATUSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_STATUSR_ref = ( (|
  name = (''GICV_STATUSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_STATUSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_STATUSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICV_RPR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_RPR_ref = ( (|
  name = (''GICV_RPR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_RPR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_RPR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICV_PMR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_PMR_ref = ( (|
  name = (''GICV_PMR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_PMR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_PMR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICV_IAR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_IAR_ref = ( (|
  name = (''GICV_IAR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_IAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_IAR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICV_HPPIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_HPPIR_ref = ( (|
  name = (''GICV_HPPIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_HPPIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_HPPIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICV_EOIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_EOIR_ref = ( (|
  name = (''GICV_EOIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_EOIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_EOIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICV_DIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_DIR_ref = ( (|
  name = (''GICV_DIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_DIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_DIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICV_CTLR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_CTLR_ref = ( (|
  name = (''GICV_CTLR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_CTLR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_CTLR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICV_BPR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_BPR_ref = ( (|
  name = (''GICV_BPR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_BPR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_BPR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICV_AIAR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_AIAR_ref = ( (|
  name = (''GICV_AIAR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_AIAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_AIAR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICV_AHPPIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_AHPPIR_ref = ( (|
  name = (''GICV_AHPPIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_AHPPIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_AHPPIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICV_AEOIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_AEOIR_ref = ( (|
  name = (''GICV_AEOIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_AEOIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_AEOIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICV_ABPR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICV_ABPR_ref = ( (|
  name = (''GICV_ABPR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICV_ABPR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICV_ABPR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICR_WAKER_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICR_WAKER_ref = ( (|
  name = (''GICR_WAKER''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICR_WAKER''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_WAKER'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICR_VSGIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICR_VSGIR_ref = ( (|
  name = (''GICR_VSGIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICR_VSGIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_VSGIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICR_VSGIPENDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICR_VSGIPENDR_ref = ( (|
  name = (''GICR_VSGIPENDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICR_VSGIPENDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_VSGIPENDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICR_VPROPBASER_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GICR_VPROPBASER_ref = ( (|
  name = (''GICR_VPROPBASER''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GICR_VPROPBASER''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_VPROPBASER'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GICR_VPENDBASER_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GICR_VPENDBASER_ref = ( (|
  name = (''GICR_VPENDBASER''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GICR_VPENDBASER''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_VPENDBASER'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GICR_SYNCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICR_SYNCR_ref = ( (|
  name = (''GICR_SYNCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICR_SYNCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_SYNCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICR_STATUSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICR_STATUSR_ref = ( (|
  name = (''GICR_STATUSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICR_STATUSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_STATUSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICR_SETLPIR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GICR_SETLPIR_ref = ( (|
  name = (''GICR_SETLPIR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GICR_SETLPIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_SETLPIR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GICR_PROPBASER_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GICR_PROPBASER_ref = ( (|
  name = (''GICR_PROPBASER''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GICR_PROPBASER''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_PROPBASER'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GICR_PENDBASER_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GICR_PENDBASER_ref = ( (|
  name = (''GICR_PENDBASER''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GICR_PENDBASER''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_PENDBASER'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GICR_PARTIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICR_PARTIDR_ref = ( (|
  name = (''GICR_PARTIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICR_PARTIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_PARTIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICR_MPAMIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICR_MPAMIDR_ref = ( (|
  name = (''GICR_MPAMIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICR_MPAMIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_MPAMIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICR_ISENABLER0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICR_ISENABLER0_ref = ( (|
  name = (''GICR_ISENABLER0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICR_ISENABLER0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_ISENABLER0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICR_INVLPIR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GICR_INVLPIR_ref = ( (|
  name = (''GICR_INVLPIR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GICR_INVLPIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_INVLPIR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GICR_INVALLR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GICR_INVALLR_ref = ( (|
  name = (''GICR_INVALLR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GICR_INVALLR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_INVALLR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GICR_INMIR0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICR_INMIR0_ref = ( (|
  name = (''GICR_INMIR0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICR_INMIR0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_INMIR0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICR_IIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICR_IIDR_ref = ( (|
  name = (''GICR_IIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICR_IIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_IIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICR_CTLR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICR_CTLR_ref = ( (|
  name = (''GICR_CTLR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICR_CTLR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_CTLR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICR_CLRLPIR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GICR_CLRLPIR_ref = ( (|
  name = (''GICR_CLRLPIR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GICR_CLRLPIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICR_CLRLPIR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GICM_TYPER_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICM_TYPER_ref = ( (|
  name = (''GICM_TYPER''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICM_TYPER''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICM_TYPER'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICM_SETSPI_SR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICM_SETSPI_SR_ref = ( (|
  name = (''GICM_SETSPI_SR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICM_SETSPI_SR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICM_SETSPI_SR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICM_SETSPI_NSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICM_SETSPI_NSR_ref = ( (|
  name = (''GICM_SETSPI_NSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICM_SETSPI_NSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICM_SETSPI_NSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICM_IIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICM_IIDR_ref = ( (|
  name = (''GICM_IIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICM_IIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICM_IIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICM_CLRSPI_SR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICM_CLRSPI_SR_ref = ( (|
  name = (''GICM_CLRSPI_SR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICM_CLRSPI_SR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICM_CLRSPI_SR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICM_CLRSPI_NSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICM_CLRSPI_NSR_ref = ( (|
  name = (''GICM_CLRSPI_NSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICM_CLRSPI_NSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICM_CLRSPI_NSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICH_VTR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICH_VTR_ref = ( (|
  name = (''GICH_VTR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICH_VTR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICH_VTR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICH_VMCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICH_VMCR_ref = ( (|
  name = (''GICH_VMCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICH_VMCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICH_VMCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICH_MISR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICH_MISR_ref = ( (|
  name = (''GICH_MISR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICH_MISR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICH_MISR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICH_HCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICH_HCR_ref = ( (|
  name = (''GICH_HCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICH_HCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICH_HCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICH_ELRSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICH_ELRSR_ref = ( (|
  name = (''GICH_ELRSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICH_ELRSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICH_ELRSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICH_EISR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICH_EISR_ref = ( (|
  name = (''GICH_EISR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICH_EISR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICH_EISR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICD_TYPER2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICD_TYPER2_ref = ( (|
  name = (''GICD_TYPER2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICD_TYPER2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICD_TYPER2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICD_STATUSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICD_STATUSR_ref = ( (|
  name = (''GICD_STATUSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICD_STATUSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICD_STATUSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICD_SGIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICD_SGIR_ref = ( (|
  name = (''GICD_SGIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICD_SGIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICD_SGIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICD_SETSPI_SR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICD_SETSPI_SR_ref = ( (|
  name = (''GICD_SETSPI_SR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICD_SETSPI_SR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICD_SETSPI_SR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICD_SETSPI_NSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICD_SETSPI_NSR_ref = ( (|
  name = (''GICD_SETSPI_NSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICD_SETSPI_NSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICD_SETSPI_NSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICD_IIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICD_IIDR_ref = ( (|
  name = (''GICD_IIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICD_IIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICD_IIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICD_CTLR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICD_CTLR_ref = ( (|
  name = (''GICD_CTLR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICD_CTLR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICD_CTLR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICD_CLRSPI_SR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICD_CLRSPI_SR_ref = ( (|
  name = (''GICD_CLRSPI_SR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICD_CLRSPI_SR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICD_CLRSPI_SR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICD_CLRSPI_NSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICD_CLRSPI_NSR_ref = ( (|
  name = (''GICD_CLRSPI_NSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICD_CLRSPI_NSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICD_CLRSPI_NSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_STATUSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_STATUSR_ref = ( (|
  name = (''GICC_STATUSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_STATUSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_STATUSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_RPR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_RPR_ref = ( (|
  name = (''GICC_RPR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_RPR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_RPR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_PMR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_PMR_ref = ( (|
  name = (''GICC_PMR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_PMR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_PMR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_IAR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_IAR_ref = ( (|
  name = (''GICC_IAR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_IAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_IAR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_HPPIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_HPPIR_ref = ( (|
  name = (''GICC_HPPIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_HPPIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_HPPIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_EOIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_EOIR_ref = ( (|
  name = (''GICC_EOIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_EOIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_EOIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_DIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_DIR_ref = ( (|
  name = (''GICC_DIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_DIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_DIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_CTLR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_CTLR_ref = ( (|
  name = (''GICC_CTLR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_CTLR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_CTLR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_BPR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_BPR_ref = ( (|
  name = (''GICC_BPR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_BPR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_BPR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_AIAR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_AIAR_ref = ( (|
  name = (''GICC_AIAR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_AIAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_AIAR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_AHPPIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_AHPPIR_ref = ( (|
  name = (''GICC_AHPPIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_AHPPIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_AHPPIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_AEOIR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_AEOIR_ref = ( (|
  name = (''GICC_AEOIR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_AEOIR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_AEOIR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition GICC_ABPR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> GICC_ABPR_ref = ( (|
  name = (''GICC_ABPR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''GICC_ABPR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''GICC_ABPR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition FCSEIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> FCSEIDR_ref = ( (|
  name = (''FCSEIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''FCSEIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''FCSEIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDVIDSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDVIDSR_ref = ( (|
  name = (''EDVIDSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDVIDSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDVIDSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDRCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDRCR_ref = ( (|
  name = (''EDRCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDRCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDRCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDPRCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDPRCR_ref = ( (|
  name = (''EDPRCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDPRCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDPRCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDPIDR4_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDPIDR4_ref = ( (|
  name = (''EDPIDR4''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDPIDR4''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDPIDR4'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDPIDR3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDPIDR3_ref = ( (|
  name = (''EDPIDR3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDPIDR3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDPIDR3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDPIDR2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDPIDR2_ref = ( (|
  name = (''EDPIDR2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDPIDR2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDPIDR2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDPIDR1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDPIDR1_ref = ( (|
  name = (''EDPIDR1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDPIDR1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDPIDR1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDPIDR0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDPIDR0_ref = ( (|
  name = (''EDPIDR0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDPIDR0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDPIDR0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDPFR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> EDPFR_ref = ( (|
  name = (''EDPFR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''EDPFR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDPFR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition EDPCSR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> EDPCSR_ref = ( (|
  name = (''EDPCSR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''EDPCSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDPCSR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition EDLSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDLSR_ref = ( (|
  name = (''EDLSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDLSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDLSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDLAR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDLAR_ref = ( (|
  name = (''EDLAR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDLAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDLAR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDITCTRL_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDITCTRL_ref = ( (|
  name = (''EDITCTRL''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDITCTRL''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDITCTRL'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDHSR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> EDHSR_ref = ( (|
  name = (''EDHSR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''EDHSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDHSR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition EDESR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDESR_ref = ( (|
  name = (''EDESR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDESR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDESR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDECR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDECR_ref = ( (|
  name = (''EDECR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDECR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDECR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDDFR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> EDDFR_ref = ( (|
  name = (''EDDFR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''EDDFR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDDFR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition EDDEVTYPE_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDDEVTYPE_ref = ( (|
  name = (''EDDEVTYPE''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDDEVTYPE''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDDEVTYPE'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDDEVID2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDDEVID2_ref = ( (|
  name = (''EDDEVID2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDDEVID2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDDEVID2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDDEVID1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDDEVID1_ref = ( (|
  name = (''EDDEVID1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDDEVID1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDDEVID1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDDEVID_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDDEVID_ref = ( (|
  name = (''EDDEVID''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDDEVID''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDDEVID'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDCIDR3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDCIDR3_ref = ( (|
  name = (''EDCIDR3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDCIDR3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDCIDR3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDCIDR2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDCIDR2_ref = ( (|
  name = (''EDCIDR2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDCIDR2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDCIDR2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDCIDR1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDCIDR1_ref = ( (|
  name = (''EDCIDR1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDCIDR1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDCIDR1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDCIDR0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDCIDR0_ref = ( (|
  name = (''EDCIDR0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDCIDR0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDCIDR0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition EDAA32PFR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> EDAA32PFR_ref = ( (|
  name = (''EDAA32PFR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''EDAA32PFR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDAA32PFR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGWFAR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGWFAR_ref = ( (|
  name = (''DBGWFAR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGWFAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGWFAR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DBGDSAR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DBGDSAR_ref = ( (|
  name = (''DBGDSAR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DBGDSAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGDSAR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGDIDR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGDIDR_ref = ( (|
  name = (''DBGDIDR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGDIDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGDIDR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DBGDEVID2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGDEVID2_ref = ( (|
  name = (''DBGDEVID2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGDEVID2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGDEVID2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition DBGDEVID1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DBGDEVID1_ref = ( (|
  name = (''DBGDEVID1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DBGDEVID1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGDEVID1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIPIDR4_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIPIDR4_ref = ( (|
  name = (''CTIPIDR4''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIPIDR4''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIPIDR4'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIPIDR3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIPIDR3_ref = ( (|
  name = (''CTIPIDR3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIPIDR3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIPIDR3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIPIDR2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIPIDR2_ref = ( (|
  name = (''CTIPIDR2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIPIDR2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIPIDR2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIPIDR1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIPIDR1_ref = ( (|
  name = (''CTIPIDR1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIPIDR1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIPIDR1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIPIDR0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIPIDR0_ref = ( (|
  name = (''CTIPIDR0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIPIDR0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIPIDR0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTILSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTILSR_ref = ( (|
  name = (''CTILSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTILSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTILSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTILAR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTILAR_ref = ( (|
  name = (''CTILAR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTILAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTILAR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIITCTRL_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIITCTRL_ref = ( (|
  name = (''CTIITCTRL''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIITCTRL''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIITCTRL'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIDEVTYPE_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIDEVTYPE_ref = ( (|
  name = (''CTIDEVTYPE''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIDEVTYPE''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIDEVTYPE'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIDEVID2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIDEVID2_ref = ( (|
  name = (''CTIDEVID2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIDEVID2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIDEVID2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIDEVID1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIDEVID1_ref = ( (|
  name = (''CTIDEVID1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIDEVID1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIDEVID1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIDEVID_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIDEVID_ref = ( (|
  name = (''CTIDEVID''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIDEVID''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIDEVID'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIDEVCTL_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIDEVCTL_ref = ( (|
  name = (''CTIDEVCTL''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIDEVCTL''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIDEVCTL'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTICONTROL_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTICONTROL_ref = ( (|
  name = (''CTICONTROL''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTICONTROL''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTICONTROL'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTICIDR3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTICIDR3_ref = ( (|
  name = (''CTICIDR3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTICIDR3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTICIDR3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTICIDR2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTICIDR2_ref = ( (|
  name = (''CTICIDR2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTICIDR2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTICIDR2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTICIDR1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTICIDR1_ref = ( (|
  name = (''CTICIDR1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTICIDR1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTICIDR1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTICIDR0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTICIDR0_ref = ( (|
  name = (''CTICIDR0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTICIDR0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTICIDR0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CTIAUTHSTATUS_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CTIAUTHSTATUS_ref = ( (|
  name = (''CTIAUTHSTATUS''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CTIAUTHSTATUS''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTIAUTHSTATUS'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CSSELR_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CSSELR_S_ref = ( (|
  name = (''CSSELR_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CSSELR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CSSELR_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTSR_ref = ( (|
  name = (''CNTSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTP_CTL_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTP_CTL_S_ref = ( (|
  name = (''CNTP_CTL_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTP_CTL_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTP_CTL_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTNSAR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTNSAR_ref = ( (|
  name = (''CNTNSAR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTNSAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTNSAR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTID_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTID_ref = ( (|
  name = (''CNTID''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTID''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTID'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTEL0ACR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTEL0ACR_ref = ( (|
  name = (''CNTEL0ACR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTEL0ACR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTEL0ACR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CNTCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> CNTCR_ref = ( (|
  name = (''CNTCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''CNTCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMPIDR4_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMPIDR4_ref = ( (|
  name = (''AMPIDR4''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMPIDR4''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMPIDR4'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMPIDR3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMPIDR3_ref = ( (|
  name = (''AMPIDR3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMPIDR3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMPIDR3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMPIDR2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMPIDR2_ref = ( (|
  name = (''AMPIDR2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMPIDR2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMPIDR2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMPIDR1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMPIDR1_ref = ( (|
  name = (''AMPIDR1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMPIDR1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMPIDR1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMPIDR0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMPIDR0_ref = ( (|
  name = (''AMPIDR0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMPIDR0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMPIDR0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMDEVTYPE_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMDEVTYPE_ref = ( (|
  name = (''AMDEVTYPE''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMDEVTYPE''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMDEVTYPE'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMCIDR3_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMCIDR3_ref = ( (|
  name = (''AMCIDR3''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMCIDR3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMCIDR3'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMCIDR2_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMCIDR2_ref = ( (|
  name = (''AMCIDR2''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMCIDR2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMCIDR2'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMCIDR1_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMCIDR1_ref = ( (|
  name = (''AMCIDR1''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMCIDR1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMCIDR1'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition AMCIDR0_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> AMCIDR0_ref = ( (|
  name = (''AMCIDR0''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''AMCIDR0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMCIDR0'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition clock_divider_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> clock_divider_ref = ( (|
  name = (''__clock_divider''),
  read_from = ((\<lambda> s . (int_reg   s) (''__clock_divider''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__clock_divider'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition EDPRSR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> EDPRSR_ref = ( (|
  name = (''EDPRSR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''EDPRSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDPRSR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition PMSWINC_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSWINC_EL0_ref = ( (|
  name = (''PMSWINC_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSWINC_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSWINC_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition OSLAR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> OSLAR_EL1_ref = ( (|
  name = (''OSLAR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''OSLAR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''OSLAR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_EOIR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_EOIR1_EL1_ref = ( (|
  name = (''ICV_EOIR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_EOIR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_EOIR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_EOIR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_EOIR1_EL1_ref = ( (|
  name = (''ICC_EOIR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_EOIR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_EOIR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_EOIR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_EOIR0_EL1_ref = ( (|
  name = (''ICV_EOIR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_EOIR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_EOIR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_EOIR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_EOIR0_EL1_ref = ( (|
  name = (''ICC_EOIR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_EOIR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_EOIR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_SGI1R_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_SGI1R_EL1_ref = ( (|
  name = (''ICC_SGI1R_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_SGI1R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_SGI1R_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_SGI0R_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_SGI0R_EL1_ref = ( (|
  name = (''ICC_SGI0R_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_SGI0R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_SGI0R_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_DIR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_DIR_EL1_ref = ( (|
  name = (''ICV_DIR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_DIR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_DIR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_DIR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_DIR_EL1_ref = ( (|
  name = (''ICC_DIR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_DIR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_DIR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_ASGI1R_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_ASGI1R_EL1_ref = ( (|
  name = (''ICC_ASGI1R_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_ASGI1R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_ASGI1R_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGDTRTX_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DBGDTRTX_EL0_ref = ( (|
  name = (''DBGDTRTX_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DBGDTRTX_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGDTRTX_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VSESR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VSESR_EL2_ref = ( (|
  name = (''VSESR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VSESR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VSESR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VMPIDR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VMPIDR_EL2_ref = ( (|
  name = (''VMPIDR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VMPIDR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VMPIDR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPIDR_EL1_ref = ( (|
  name = (''MPIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VDISR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VDISR_EL2_ref = ( (|
  name = (''VDISR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VDISR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VDISR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DISR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DISR_EL1_ref = ( (|
  name = (''DISR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DISR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DISR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TRFCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TRFCR_EL2_ref = ( (|
  name = (''TRFCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TRFCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TRFCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TRFCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TRFCR_EL1_ref = ( (|
  name = (''TRFCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TRFCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TRFCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TPIDR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TPIDR_EL3_ref = ( (|
  name = (''TPIDR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TPIDR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TPIDR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TPIDR_EL2_ref = ( (|
  name = (''TPIDR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TPIDR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TPIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TPIDR_EL1_ref = ( (|
  name = (''TPIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TPIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TPIDR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TPIDR_EL0_ref = ( (|
  name = (''TPIDR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TPIDR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TPIDRRO_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TPIDRRO_EL0_ref = ( (|
  name = (''TPIDRRO_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TPIDRRO_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDRRO_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TPIDR2_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TPIDR2_EL0_ref = ( (|
  name = (''TPIDR2_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TPIDR2_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TPIDR2_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SMPRI_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SMPRI_EL1_ref = ( (|
  name = (''SMPRI_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SMPRI_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SMPRI_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SMPRIMAP_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SMPRIMAP_EL2_ref = ( (|
  name = (''SMPRIMAP_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SMPRIMAP_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SMPRIMAP_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SMIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SMIDR_EL1_ref = ( (|
  name = (''SMIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SMIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SMIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCXTNUM_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCXTNUM_EL3_ref = ( (|
  name = (''SCXTNUM_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCXTNUM_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCXTNUM_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCXTNUM_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCXTNUM_EL2_ref = ( (|
  name = (''SCXTNUM_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCXTNUM_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCXTNUM_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCXTNUM_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCXTNUM_EL1_ref = ( (|
  name = (''SCXTNUM_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCXTNUM_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCXTNUM_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCXTNUM_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCXTNUM_EL0_ref = ( (|
  name = (''SCXTNUM_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCXTNUM_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCXTNUM_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RVBAR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> RVBAR_EL3_ref = ( (|
  name = (''RVBAR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''RVBAR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RVBAR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RVBAR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> RVBAR_EL2_ref = ( (|
  name = (''RVBAR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''RVBAR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RVBAR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RVBAR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> RVBAR_EL1_ref = ( (|
  name = (''RVBAR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''RVBAR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RVBAR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RNDR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> RNDR_ref = ( (|
  name = (''RNDR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''RNDR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RNDR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RNDRRS_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> RNDRRS_ref = ( (|
  name = (''RNDRRS''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''RNDRRS''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RNDRRS'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RMR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> RMR_EL3_ref = ( (|
  name = (''RMR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''RMR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RMR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RMR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> RMR_EL2_ref = ( (|
  name = (''RMR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''RMR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RMR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RMR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> RMR_EL1_ref = ( (|
  name = (''RMR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''RMR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RMR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RGSR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> RGSR_EL1_ref = ( (|
  name = (''RGSR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''RGSR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''RGSR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition REVIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> REVIDR_EL1_ref = ( (|
  name = (''REVIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''REVIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''REVIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMXEVTYPER_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMXEVTYPER_EL0_ref = ( (|
  name = (''PMXEVTYPER_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMXEVTYPER_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMXEVTYPER_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMXEVCNTR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMXEVCNTR_EL0_ref = ( (|
  name = (''PMXEVCNTR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMXEVCNTR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMXEVCNTR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMSNEVFR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSNEVFR_EL1_ref = ( (|
  name = (''PMSNEVFR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSNEVFR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSNEVFR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMSLATFR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSLATFR_EL1_ref = ( (|
  name = (''PMSLATFR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSLATFR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSLATFR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMSIRR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSIRR_EL1_ref = ( (|
  name = (''PMSIRR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSIRR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSIRR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMSIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSIDR_EL1_ref = ( (|
  name = (''PMSIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMSICR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSICR_EL1_ref = ( (|
  name = (''PMSICR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSICR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSICR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMSFCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSFCR_EL1_ref = ( (|
  name = (''PMSFCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSFCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSFCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMSEVFR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSEVFR_EL1_ref = ( (|
  name = (''PMSEVFR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSEVFR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSEVFR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMSELR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSELR_EL0_ref = ( (|
  name = (''PMSELR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSELR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSELR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMSCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSCR_EL2_ref = ( (|
  name = (''PMSCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMSCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMSCR_EL1_ref = ( (|
  name = (''PMSCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMSCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMSCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMOVSSET_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMOVSSET_EL0_ref = ( (|
  name = (''PMOVSSET_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMOVSSET_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMOVSSET_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMOVSCLR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMOVSCLR_EL0_ref = ( (|
  name = (''PMOVSCLR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMOVSCLR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMOVSCLR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMMIR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMMIR_EL1_ref = ( (|
  name = (''PMMIR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMMIR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMMIR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMINTENSET_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMINTENSET_EL1_ref = ( (|
  name = (''PMINTENSET_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMINTENSET_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMINTENSET_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMINTENCLR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMINTENCLR_EL1_ref = ( (|
  name = (''PMINTENCLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMINTENCLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMINTENCLR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMEVCNTR_EL0_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> PMEVCNTR_EL0_ref = ( (|
  name = (''PMEVCNTR_EL0''),
  read_from = ((\<lambda> s . (vector_31_inc_bitvector_64_dec_reg   s) (''PMEVCNTR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| vector_31_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMEVCNTR_EL0'') then v else(vector_31_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition PMCNTENSET_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMCNTENSET_EL0_ref = ( (|
  name = (''PMCNTENSET_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMCNTENSET_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCNTENSET_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMCNTENCLR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMCNTENCLR_EL0_ref = ( (|
  name = (''PMCNTENCLR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMCNTENCLR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCNTENCLR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMCEID1_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMCEID1_EL0_ref = ( (|
  name = (''PMCEID1_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMCEID1_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCEID1_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMCEID0_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMCEID0_EL0_ref = ( (|
  name = (''PMCEID0_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMCEID0_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCEID0_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMCCNTR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMCCNTR_EL0_ref = ( (|
  name = (''PMCCNTR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMCCNTR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCCNTR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMUSERENR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMUSERENR_EL0_ref = ( (|
  name = (''PMUSERENR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMUSERENR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMUSERENR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMCCFILTR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMCCFILTR_EL0_ref = ( (|
  name = (''PMCCFILTR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMCCFILTR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCCFILTR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMBSR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMBSR_EL1_ref = ( (|
  name = (''PMBSR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMBSR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMBSR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMBPTR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMBPTR_EL1_ref = ( (|
  name = (''PMBPTR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMBPTR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMBPTR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMBLIMITR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMBLIMITR_EL1_ref = ( (|
  name = (''PMBLIMITR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMBLIMITR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMBLIMITR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMBIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMBIDR_EL1_ref = ( (|
  name = (''PMBIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMBIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMBIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PAR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PAR_EL1_ref = ( (|
  name = (''PAR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PAR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PAR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition OSDTRTX_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> OSDTRTX_EL1_ref = ( (|
  name = (''OSDTRTX_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''OSDTRTX_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''OSDTRTX_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition OSDTRRX_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> OSDTRRX_EL1_ref = ( (|
  name = (''OSDTRRX_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''OSDTRRX_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''OSDTRRX_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MVFR2_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MVFR2_EL1_ref = ( (|
  name = (''MVFR2_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MVFR2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MVFR2_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MVFR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MVFR1_EL1_ref = ( (|
  name = (''MVFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MVFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MVFR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MVFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MVFR0_EL1_ref = ( (|
  name = (''MVFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MVFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MVFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VPIDR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VPIDR_EL2_ref = ( (|
  name = (''VPIDR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VPIDR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VPIDR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MIDR_EL1_ref = ( (|
  name = (''MIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MDRAR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MDRAR_EL1_ref = ( (|
  name = (''MDRAR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MDRAR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MDRAR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MDCCINT_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MDCCINT_EL1_ref = ( (|
  name = (''MDCCINT_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MDCCINT_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MDCCINT_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition LORSA_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> LORSA_EL1_ref = ( (|
  name = (''LORSA_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''LORSA_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''LORSA_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition LORN_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> LORN_EL1_ref = ( (|
  name = (''LORN_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''LORN_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''LORN_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition LORID_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> LORID_EL1_ref = ( (|
  name = (''LORID_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''LORID_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''LORID_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition LOREA_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> LOREA_EL1_ref = ( (|
  name = (''LOREA_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''LOREA_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''LOREA_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition LORC_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> LORC_EL1_ref = ( (|
  name = (''LORC_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''LORC_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''LORC_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ISR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ISR_EL1_ref = ( (|
  name = (''ISR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ISR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ISR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_PFR2_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_PFR2_EL1_ref = ( (|
  name = (''ID_PFR2_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_PFR2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_PFR2_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_PFR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_PFR1_EL1_ref = ( (|
  name = (''ID_PFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_PFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_PFR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_PFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_PFR0_EL1_ref = ( (|
  name = (''ID_PFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_PFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_PFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_MMFR5_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_MMFR5_EL1_ref = ( (|
  name = (''ID_MMFR5_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_MMFR5_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_MMFR5_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_MMFR4_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_MMFR4_EL1_ref = ( (|
  name = (''ID_MMFR4_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_MMFR4_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_MMFR4_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_MMFR3_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_MMFR3_EL1_ref = ( (|
  name = (''ID_MMFR3_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_MMFR3_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_MMFR3_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_MMFR2_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_MMFR2_EL1_ref = ( (|
  name = (''ID_MMFR2_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_MMFR2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_MMFR2_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_MMFR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_MMFR1_EL1_ref = ( (|
  name = (''ID_MMFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_MMFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_MMFR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_MMFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_MMFR0_EL1_ref = ( (|
  name = (''ID_MMFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_MMFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_MMFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_ISAR6_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR6_EL1_ref = ( (|
  name = (''ID_ISAR6_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_ISAR6_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR6_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_ISAR5_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR5_EL1_ref = ( (|
  name = (''ID_ISAR5_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_ISAR5_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR5_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_ISAR4_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR4_EL1_ref = ( (|
  name = (''ID_ISAR4_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_ISAR4_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR4_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_ISAR3_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR3_EL1_ref = ( (|
  name = (''ID_ISAR3_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_ISAR3_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR3_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_ISAR2_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR2_EL1_ref = ( (|
  name = (''ID_ISAR2_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_ISAR2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR2_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_ISAR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR1_EL1_ref = ( (|
  name = (''ID_ISAR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_ISAR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_ISAR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_ISAR0_EL1_ref = ( (|
  name = (''ID_ISAR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_ISAR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_ISAR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_DFR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_DFR1_EL1_ref = ( (|
  name = (''ID_DFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_DFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_DFR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_DFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_DFR0_EL1_ref = ( (|
  name = (''ID_DFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_DFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_DFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AFR0_EL1_ref = ( (|
  name = (''ID_AFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64ZFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64ZFR0_EL1_ref = ( (|
  name = (''ID_AA64ZFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64ZFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64ZFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64SMFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64SMFR0_EL1_ref = ( (|
  name = (''ID_AA64SMFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64SMFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64SMFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64PFR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64PFR1_EL1_ref = ( (|
  name = (''ID_AA64PFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64PFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64PFR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64PFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64PFR0_EL1_ref = ( (|
  name = (''ID_AA64PFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64PFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64PFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64MMFR2_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64MMFR2_EL1_ref = ( (|
  name = (''ID_AA64MMFR2_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64MMFR2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64MMFR2_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64MMFR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64MMFR1_EL1_ref = ( (|
  name = (''ID_AA64MMFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64MMFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64MMFR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64MMFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64MMFR0_EL1_ref = ( (|
  name = (''ID_AA64MMFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64MMFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64MMFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64ISAR2_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64ISAR2_EL1_ref = ( (|
  name = (''ID_AA64ISAR2_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64ISAR2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64ISAR2_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64ISAR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64ISAR1_EL1_ref = ( (|
  name = (''ID_AA64ISAR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64ISAR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64ISAR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64ISAR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64ISAR0_EL1_ref = ( (|
  name = (''ID_AA64ISAR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64ISAR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64ISAR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64DFR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64DFR1_EL1_ref = ( (|
  name = (''ID_AA64DFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64DFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64DFR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64DFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64DFR0_EL1_ref = ( (|
  name = (''ID_AA64DFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64DFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64DFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64AFR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64AFR1_EL1_ref = ( (|
  name = (''ID_AA64AFR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64AFR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64AFR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ID_AA64AFR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ID_AA64AFR0_EL1_ref = ( (|
  name = (''ID_AA64AFR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ID_AA64AFR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ID_AA64AFR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_NMIAR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_NMIAR1_EL1_ref = ( (|
  name = (''ICV_NMIAR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_NMIAR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_NMIAR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_NMIAR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_NMIAR1_EL1_ref = ( (|
  name = (''ICC_NMIAR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_NMIAR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_NMIAR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_BPR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_BPR1_EL1_ref = ( (|
  name = (''ICV_BPR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_BPR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_BPR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_BPR1_EL1_S_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_BPR1_EL1_S_ref = ( (|
  name = (''ICC_BPR1_EL1_S''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_BPR1_EL1_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_BPR1_EL1_S'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_BPR1_EL1_NS_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_BPR1_EL1_NS_ref = ( (|
  name = (''ICC_BPR1_EL1_NS''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_BPR1_EL1_NS''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_BPR1_EL1_NS'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICH_VTR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICH_VTR_EL2_ref = ( (|
  name = (''ICH_VTR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICH_VTR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_VTR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICH_VMCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICH_VMCR_EL2_ref = ( (|
  name = (''ICH_VMCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICH_VMCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_VMCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICH_MISR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICH_MISR_EL2_ref = ( (|
  name = (''ICH_MISR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICH_MISR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_MISR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICH_LR_EL2_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> ICH_LR_EL2_ref = ( (|
  name = (''ICH_LR_EL2''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_64_dec_reg   s) (''ICH_LR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_LR_EL2'') then v else(vector_16_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition ICH_ELRSR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICH_ELRSR_EL2_ref = ( (|
  name = (''ICH_ELRSR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICH_ELRSR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_ELRSR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICH_EISR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICH_EISR_EL2_ref = ( (|
  name = (''ICH_EISR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICH_EISR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_EISR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICH_AP1R_EL2_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> ICH_AP1R_EL2_ref = ( (|
  name = (''ICH_AP1R_EL2''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_64_dec_reg   s) (''ICH_AP1R_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_AP1R_EL2'') then v else(vector_4_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition ICH_AP0R_EL2_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> ICH_AP0R_EL2_ref = ( (|
  name = (''ICH_AP0R_EL2''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_64_dec_reg   s) (''ICH_AP0R_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_AP0R_EL2'') then v else(vector_4_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition ICV_RPR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_RPR_EL1_ref = ( (|
  name = (''ICV_RPR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_RPR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_RPR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_RPR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_RPR_EL1_ref = ( (|
  name = (''ICC_RPR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_RPR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_RPR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_PMR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_PMR_EL1_ref = ( (|
  name = (''ICV_PMR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_PMR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_PMR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_IGRPEN1_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_IGRPEN1_EL3_ref = ( (|
  name = (''ICC_IGRPEN1_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_IGRPEN1_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_IGRPEN1_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_IGRPEN1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_IGRPEN1_EL1_ref = ( (|
  name = (''ICV_IGRPEN1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_IGRPEN1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_IGRPEN1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_IGRPEN1_EL1_S_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_IGRPEN1_EL1_S_ref = ( (|
  name = (''ICC_IGRPEN1_EL1_S''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_IGRPEN1_EL1_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_IGRPEN1_EL1_S'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_IGRPEN1_EL1_NS_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_IGRPEN1_EL1_NS_ref = ( (|
  name = (''ICC_IGRPEN1_EL1_NS''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_IGRPEN1_EL1_NS''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_IGRPEN1_EL1_NS'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_IGRPEN0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_IGRPEN0_EL1_ref = ( (|
  name = (''ICV_IGRPEN0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_IGRPEN0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_IGRPEN0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_IGRPEN0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_IGRPEN0_EL1_ref = ( (|
  name = (''ICC_IGRPEN0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_IGRPEN0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_IGRPEN0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_IAR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_IAR1_EL1_ref = ( (|
  name = (''ICV_IAR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_IAR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_IAR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_IAR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_IAR1_EL1_ref = ( (|
  name = (''ICC_IAR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_IAR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_IAR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_IAR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_IAR0_EL1_ref = ( (|
  name = (''ICV_IAR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_IAR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_IAR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_IAR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_IAR0_EL1_ref = ( (|
  name = (''ICC_IAR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_IAR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_IAR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_HPPIR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_HPPIR1_EL1_ref = ( (|
  name = (''ICV_HPPIR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_HPPIR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_HPPIR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_HPPIR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_HPPIR1_EL1_ref = ( (|
  name = (''ICC_HPPIR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_HPPIR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_HPPIR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_HPPIR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_HPPIR0_EL1_ref = ( (|
  name = (''ICV_HPPIR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_HPPIR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_HPPIR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_HPPIR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_HPPIR0_EL1_ref = ( (|
  name = (''ICC_HPPIR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_HPPIR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_HPPIR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_CTLR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_CTLR_EL3_ref = ( (|
  name = (''ICC_CTLR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_CTLR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_CTLR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_CTLR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_CTLR_EL1_ref = ( (|
  name = (''ICV_CTLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_CTLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_CTLR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_CTLR_EL1_S_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_CTLR_EL1_S_ref = ( (|
  name = (''ICC_CTLR_EL1_S''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_CTLR_EL1_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_CTLR_EL1_S'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_CTLR_EL1_NS_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_CTLR_EL1_NS_ref = ( (|
  name = (''ICC_CTLR_EL1_NS''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_CTLR_EL1_NS''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_CTLR_EL1_NS'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_BPR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICV_BPR0_EL1_ref = ( (|
  name = (''ICV_BPR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICV_BPR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_BPR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_BPR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_BPR0_EL1_ref = ( (|
  name = (''ICC_BPR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_BPR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_BPR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICV_AP1R_EL1_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> ICV_AP1R_EL1_ref = ( (|
  name = (''ICV_AP1R_EL1''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_64_dec_reg   s) (''ICV_AP1R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_AP1R_EL1'') then v else(vector_4_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition ICC_AP1R_EL1_S_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> ICC_AP1R_EL1_S_ref = ( (|
  name = (''ICC_AP1R_EL1_S''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_64_dec_reg   s) (''ICC_AP1R_EL1_S''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_AP1R_EL1_S'') then v else(vector_4_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition ICC_AP1R_EL1_NS_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> ICC_AP1R_EL1_NS_ref = ( (|
  name = (''ICC_AP1R_EL1_NS''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_64_dec_reg   s) (''ICC_AP1R_EL1_NS''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_AP1R_EL1_NS'') then v else(vector_4_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition ICV_AP0R_EL1_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> ICV_AP0R_EL1_ref = ( (|
  name = (''ICV_AP0R_EL1''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_64_dec_reg   s) (''ICV_AP0R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICV_AP0R_EL1'') then v else(vector_4_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition ICH_HCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICH_HCR_EL2_ref = ( (|
  name = (''ICH_HCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICH_HCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICH_HCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_SRE_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_SRE_EL3_ref = ( (|
  name = (''ICC_SRE_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_SRE_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_SRE_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_SRE_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_SRE_EL2_ref = ( (|
  name = (''ICC_SRE_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_SRE_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_SRE_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_SRE_EL1_S_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_SRE_EL1_S_ref = ( (|
  name = (''ICC_SRE_EL1_S''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_SRE_EL1_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_SRE_EL1_S'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_SRE_EL1_NS_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_SRE_EL1_NS_ref = ( (|
  name = (''ICC_SRE_EL1_NS''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_SRE_EL1_NS''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_SRE_EL1_NS'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ICC_AP0R_EL1_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> ICC_AP0R_EL1_ref = ( (|
  name = (''ICC_AP0R_EL1''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_64_dec_reg   s) (''ICC_AP0R_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_AP0R_EL1'') then v else(vector_4_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition HSTR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HSTR_EL2_ref = ( (|
  name = (''HSTR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HSTR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HSTR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HFGWTR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HFGWTR_EL2_ref = ( (|
  name = (''HFGWTR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HFGWTR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HFGWTR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HFGITR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HFGITR_EL2_ref = ( (|
  name = (''HFGITR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HFGITR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HFGITR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HDFGWTR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HDFGWTR_EL2_ref = ( (|
  name = (''HDFGWTR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HDFGWTR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HDFGWTR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HACR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HACR_EL2_ref = ( (|
  name = (''HACR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HACR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HACR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GMID_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GMID_EL1_ref = ( (|
  name = (''GMID_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GMID_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GMID_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GCR_EL1_ref = ( (|
  name = (''GCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition FPEXC32_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> FPEXC32_EL2_ref = ( (|
  name = (''FPEXC32_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''FPEXC32_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''FPEXC32_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXSTATUS_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXSTATUS_EL1_ref = ( (|
  name = (''ERXSTATUS_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXSTATUS_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXSTATUS_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXPFGF_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXPFGF_EL1_ref = ( (|
  name = (''ERXPFGF_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXPFGF_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXPFGF_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXPFGCTL_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXPFGCTL_EL1_ref = ( (|
  name = (''ERXPFGCTL_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXPFGCTL_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXPFGCTL_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXPFGCDN_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXPFGCDN_EL1_ref = ( (|
  name = (''ERXPFGCDN_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXPFGCDN_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXPFGCDN_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXMISC3_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXMISC3_EL1_ref = ( (|
  name = (''ERXMISC3_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXMISC3_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXMISC3_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXMISC2_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXMISC2_EL1_ref = ( (|
  name = (''ERXMISC2_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXMISC2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXMISC2_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXMISC1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXMISC1_EL1_ref = ( (|
  name = (''ERXMISC1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXMISC1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXMISC1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXMISC0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXMISC0_EL1_ref = ( (|
  name = (''ERXMISC0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXMISC0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXMISC0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXFR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXFR_EL1_ref = ( (|
  name = (''ERXFR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXFR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXFR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXCTLR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXCTLR_EL1_ref = ( (|
  name = (''ERXCTLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXCTLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXCTLR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERXADDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERXADDR_EL1_ref = ( (|
  name = (''ERXADDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERXADDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERXADDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERRSELR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERRSELR_EL1_ref = ( (|
  name = (''ERRSELR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERRSELR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERRSELR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ERRIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ERRIDR_EL1_ref = ( (|
  name = (''ERRIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ERRIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERRIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DCZID_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DCZID_EL0_ref = ( (|
  name = (''DCZID_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DCZID_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DCZID_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGVCR32_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DBGVCR32_EL2_ref = ( (|
  name = (''DBGVCR32_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DBGVCR32_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGVCR32_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGDTR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DBGDTR_EL0_ref = ( (|
  name = (''DBGDTR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DBGDTR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGDTR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGDTRRX_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DBGDTRRX_EL0_ref = ( (|
  name = (''DBGDTRRX_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DBGDTRRX_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGDTRRX_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGCLAIMSET_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DBGCLAIMSET_EL1_ref = ( (|
  name = (''DBGCLAIMSET_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DBGCLAIMSET_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGCLAIMSET_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGCLAIMCLR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DBGCLAIMCLR_EL1_ref = ( (|
  name = (''DBGCLAIMCLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DBGCLAIMCLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGCLAIMCLR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGAUTHSTATUS_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DBGAUTHSTATUS_EL1_ref = ( (|
  name = (''DBGAUTHSTATUS_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DBGAUTHSTATUS_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGAUTHSTATUS_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DACR32_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DACR32_EL2_ref = ( (|
  name = (''DACR32_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DACR32_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DACR32_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CSSELR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CSSELR_EL1_ref = ( (|
  name = (''CSSELR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CSSELR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CSSELR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTPS_CVAL_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTPS_CVAL_EL1_ref = ( (|
  name = (''CNTPS_CVAL_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTPS_CVAL_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTPS_CVAL_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTPS_CTL_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTPS_CTL_EL1_ref = ( (|
  name = (''CNTPS_CTL_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTPS_CTL_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTPS_CTL_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTVOFF_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTVOFF_EL2_ref = ( (|
  name = (''CNTVOFF_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTVOFF_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTVOFF_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTV_CVAL_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTV_CVAL_EL0_ref = ( (|
  name = (''CNTV_CVAL_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTV_CVAL_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTV_CVAL_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHV_CVAL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHV_CVAL_EL2_ref = ( (|
  name = (''CNTHV_CVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHV_CVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHV_CVAL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHVS_CVAL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHVS_CVAL_EL2_ref = ( (|
  name = (''CNTHVS_CVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHVS_CVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHVS_CVAL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTV_CTL_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTV_CTL_EL0_ref = ( (|
  name = (''CNTV_CTL_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTV_CTL_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTV_CTL_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHV_CTL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHV_CTL_EL2_ref = ( (|
  name = (''CNTHV_CTL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHV_CTL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHV_CTL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHVS_CTL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHVS_CTL_EL2_ref = ( (|
  name = (''CNTHVS_CTL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHVS_CTL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHVS_CTL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTP_CVAL_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTP_CVAL_EL0_ref = ( (|
  name = (''CNTP_CVAL_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTP_CVAL_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTP_CVAL_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTP_CTL_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTP_CTL_EL0_ref = ( (|
  name = (''CNTP_CTL_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTP_CTL_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTP_CTL_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTPOFF_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTPOFF_EL2_ref = ( (|
  name = (''CNTPOFF_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTPOFF_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTPOFF_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHP_CVAL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHP_CVAL_EL2_ref = ( (|
  name = (''CNTHP_CVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHP_CVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHP_CVAL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHP_CTL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHP_CTL_EL2_ref = ( (|
  name = (''CNTHP_CTL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHP_CTL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHP_CTL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHPS_CVAL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHPS_CVAL_EL2_ref = ( (|
  name = (''CNTHPS_CVAL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHPS_CVAL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHPS_CVAL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHPS_CTL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHPS_CTL_EL2_ref = ( (|
  name = (''CNTHPS_CTL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHPS_CTL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHPS_CTL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTKCTL_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTKCTL_EL1_ref = ( (|
  name = (''CNTKCTL_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTKCTL_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTKCTL_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTHCTL_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTHCTL_EL2_ref = ( (|
  name = (''CNTHCTL_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTHCTL_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTHCTL_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CNTFRQ_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CNTFRQ_EL0_ref = ( (|
  name = (''CNTFRQ_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CNTFRQ_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CNTFRQ_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CCSIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CCSIDR_EL1_ref = ( (|
  name = (''CCSIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CCSIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CCSIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CCSIDR2_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CCSIDR2_EL1_ref = ( (|
  name = (''CCSIDR2_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CCSIDR2_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CCSIDR2_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition BRBTS_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> BRBTS_EL1_ref = ( (|
  name = (''BRBTS_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''BRBTS_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''BRBTS_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition BRBTGT_EL1_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> BRBTGT_EL1_ref = ( (|
  name = (''BRBTGT_EL1''),
  read_from = ((\<lambda> s . (vector_32_inc_bitvector_64_dec_reg   s) (''BRBTGT_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_32_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''BRBTGT_EL1'') then v else(vector_32_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition BRBTGTINJ_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> BRBTGTINJ_EL1_ref = ( (|
  name = (''BRBTGTINJ_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''BRBTGTINJ_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''BRBTGTINJ_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition BRBSRC_EL1_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> BRBSRC_EL1_ref = ( (|
  name = (''BRBSRC_EL1''),
  read_from = ((\<lambda> s . (vector_32_inc_bitvector_64_dec_reg   s) (''BRBSRC_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_32_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''BRBSRC_EL1'') then v else(vector_32_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition BRBSRCINJ_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> BRBSRCINJ_EL1_ref = ( (|
  name = (''BRBSRCINJ_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''BRBSRCINJ_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''BRBSRCINJ_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition BRBINF_EL1_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> BRBINF_EL1_ref = ( (|
  name = (''BRBINF_EL1''),
  read_from = ((\<lambda> s . (vector_32_inc_bitvector_64_dec_reg   s) (''BRBINF_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_32_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''BRBINF_EL1'') then v else(vector_32_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition BRBINFINJ_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> BRBINFINJ_EL1_ref = ( (|
  name = (''BRBINFINJ_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''BRBINFINJ_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''BRBINFINJ_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HDFGRTR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HDFGRTR_EL2_ref = ( (|
  name = (''HDFGRTR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HDFGRTR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HDFGRTR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition APIBKeyLo_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> APIBKeyLo_EL1_ref = ( (|
  name = (''APIBKeyLo_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''APIBKeyLo_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''APIBKeyLo_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition APIBKeyHi_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> APIBKeyHi_EL1_ref = ( (|
  name = (''APIBKeyHi_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''APIBKeyHi_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''APIBKeyHi_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition APIAKeyLo_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> APIAKeyLo_EL1_ref = ( (|
  name = (''APIAKeyLo_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''APIAKeyLo_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''APIAKeyLo_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition APIAKeyHi_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> APIAKeyHi_EL1_ref = ( (|
  name = (''APIAKeyHi_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''APIAKeyHi_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''APIAKeyHi_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition APGAKeyLo_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> APGAKeyLo_EL1_ref = ( (|
  name = (''APGAKeyLo_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''APGAKeyLo_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''APGAKeyLo_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition APGAKeyHi_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> APGAKeyHi_EL1_ref = ( (|
  name = (''APGAKeyHi_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''APGAKeyHi_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''APGAKeyHi_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition APDBKeyLo_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> APDBKeyLo_EL1_ref = ( (|
  name = (''APDBKeyLo_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''APDBKeyLo_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''APDBKeyLo_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition APDBKeyHi_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> APDBKeyHi_EL1_ref = ( (|
  name = (''APDBKeyHi_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''APDBKeyHi_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''APDBKeyHi_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition APDAKeyLo_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> APDAKeyLo_EL1_ref = ( (|
  name = (''APDAKeyLo_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''APDAKeyLo_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''APDAKeyLo_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition APDAKeyHi_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> APDAKeyHi_EL1_ref = ( (|
  name = (''APDAKeyHi_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''APDAKeyHi_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''APDAKeyHi_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMEVTYPER1_EL0_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> AMEVTYPER1_EL0_ref = ( (|
  name = (''AMEVTYPER1_EL0''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_64_dec_reg   s) (''AMEVTYPER1_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMEVTYPER1_EL0'') then v else(vector_16_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition AMEVTYPER0_EL0_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> AMEVTYPER0_EL0_ref = ( (|
  name = (''AMEVTYPER0_EL0''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_64_dec_reg   s) (''AMEVTYPER0_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMEVTYPER0_EL0'') then v else(vector_4_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition AMEVCNTVOFF1_EL2_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> AMEVCNTVOFF1_EL2_ref = ( (|
  name = (''AMEVCNTVOFF1_EL2''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_64_dec_reg   s) (''AMEVCNTVOFF1_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMEVCNTVOFF1_EL2'') then v else(vector_16_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition AMEVCNTVOFF0_EL2_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> AMEVCNTVOFF0_EL2_ref = ( (|
  name = (''AMEVCNTVOFF0_EL2''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_64_dec_reg   s) (''AMEVCNTVOFF0_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMEVCNTVOFF0_EL2'') then v else(vector_16_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition AMEVCNTR1_EL0_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> AMEVCNTR1_EL0_ref = ( (|
  name = (''AMEVCNTR1_EL0''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_64_dec_reg   s) (''AMEVCNTR1_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMEVCNTR1_EL0'') then v else(vector_16_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition AMEVCNTR0_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> AMEVCNTR0_ref = ( (|
  name = (''AMEVCNTR0''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_64_dec_reg   s) (''AMEVCNTR0''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMEVCNTR0'') then v else(vector_4_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition AMCR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMCR_EL0_ref = ( (|
  name = (''AMCR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMCR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMCR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMCNTENSET1_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMCNTENSET1_EL0_ref = ( (|
  name = (''AMCNTENSET1_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMCNTENSET1_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMCNTENSET1_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMCNTENSET0_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMCNTENSET0_EL0_ref = ( (|
  name = (''AMCNTENSET0_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMCNTENSET0_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMCNTENSET0_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMCNTENCLR1_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMCNTENCLR1_EL0_ref = ( (|
  name = (''AMCNTENCLR1_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMCNTENCLR1_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMCNTENCLR1_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HAFGRTR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HAFGRTR_EL2_ref = ( (|
  name = (''HAFGRTR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HAFGRTR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HAFGRTR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMCNTENCLR0_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMCNTENCLR0_EL0_ref = ( (|
  name = (''AMCNTENCLR0_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMCNTENCLR0_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMCNTENCLR0_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMCGCR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMCGCR_EL0_ref = ( (|
  name = (''AMCGCR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMCGCR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMCGCR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMCG1IDR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMCG1IDR_EL0_ref = ( (|
  name = (''AMCG1IDR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMCG1IDR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMCG1IDR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMUSERENR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMUSERENR_EL0_ref = ( (|
  name = (''AMUSERENR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMUSERENR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMUSERENR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMCFGR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMCFGR_EL0_ref = ( (|
  name = (''AMCFGR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMCFGR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMCFGR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMAIR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMAIR_EL3_ref = ( (|
  name = (''AMAIR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMAIR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMAIR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMAIR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMAIR_EL2_ref = ( (|
  name = (''AMAIR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMAIR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMAIR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AMAIR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AMAIR_EL1_ref = ( (|
  name = (''AMAIR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AMAIR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AMAIR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AIDR_EL1_ref = ( (|
  name = (''AIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AFSR1_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AFSR1_EL3_ref = ( (|
  name = (''AFSR1_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AFSR1_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AFSR1_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AFSR1_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AFSR1_EL2_ref = ( (|
  name = (''AFSR1_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AFSR1_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AFSR1_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AFSR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AFSR1_EL1_ref = ( (|
  name = (''AFSR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AFSR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AFSR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AFSR0_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AFSR0_EL3_ref = ( (|
  name = (''AFSR0_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AFSR0_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AFSR0_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AFSR0_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AFSR0_EL2_ref = ( (|
  name = (''AFSR0_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AFSR0_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AFSR0_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition AFSR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> AFSR0_EL1_ref = ( (|
  name = (''AFSR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''AFSR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''AFSR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ACTLR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ACTLR_EL3_ref = ( (|
  name = (''ACTLR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ACTLR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ACTLR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ACTLR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ACTLR_EL2_ref = ( (|
  name = (''ACTLR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ACTLR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ACTLR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VNCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VNCR_EL2_ref = ( (|
  name = (''VNCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VNCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VNCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition tlb_enabled_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> tlb_enabled_ref = ( (|
  name = (''__tlb_enabled''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__tlb_enabled''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__tlb_enabled'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition VSTTBR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VSTTBR_EL2_ref = ( (|
  name = (''VSTTBR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VSTTBR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VSTTBR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VSTCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VSTCR_EL2_ref = ( (|
  name = (''VSTCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VSTCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VSTCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TTBR0_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TTBR0_EL3_ref = ( (|
  name = (''TTBR0_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TTBR0_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBR0_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TTBR1_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TTBR1_EL2_ref = ( (|
  name = (''TTBR1_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TTBR1_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBR1_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TTBR0_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TTBR0_EL2_ref = ( (|
  name = (''TTBR0_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TTBR0_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBR0_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TTBR1_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TTBR1_EL1_ref = ( (|
  name = (''TTBR1_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TTBR1_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBR1_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TTBR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TTBR0_EL1_ref = ( (|
  name = (''TTBR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TTBR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition InGuardedPage_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> InGuardedPage_ref = ( (|
  name = (''InGuardedPage''),
  read_from = ((\<lambda> s . (bool_reg   s) (''InGuardedPage''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''InGuardedPage'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition GPTBR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GPTBR_EL3_ref = ( (|
  name = (''GPTBR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GPTBR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GPTBR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition GPCCR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> GPCCR_EL3_ref = ( (|
  name = (''GPCCR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''GPCCR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''GPCCR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMSM_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMSM_EL1_ref = ( (|
  name = (''MPAMSM_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMSM_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMSM_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAM0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAM0_EL1_ref = ( (|
  name = (''MPAM0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAM0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAM0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM7_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM7_EL2_ref = ( (|
  name = (''MPAMVPM7_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM7_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM7_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM6_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM6_EL2_ref = ( (|
  name = (''MPAMVPM6_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM6_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM6_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM5_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM5_EL2_ref = ( (|
  name = (''MPAMVPM5_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM5_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM5_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM4_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM4_EL2_ref = ( (|
  name = (''MPAMVPM4_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM4_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM4_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM3_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM3_EL2_ref = ( (|
  name = (''MPAMVPM3_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM3_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM3_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM2_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM2_EL2_ref = ( (|
  name = (''MPAMVPM2_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM2_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM2_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM1_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM1_EL2_ref = ( (|
  name = (''MPAMVPM1_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM1_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM1_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPMV_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPMV_EL2_ref = ( (|
  name = (''MPAMVPMV_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPMV_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPMV_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMVPM0_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMVPM0_EL2_ref = ( (|
  name = (''MPAMVPM0_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMVPM0_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMVPM0_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAMHCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMHCR_EL2_ref = ( (|
  name = (''MPAMHCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMHCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMHCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAM1_EL1_0_62_ref  :: \<open>((regstate),(register_value),((63)Word.word))register_ref \<close>  where 
     \<open> MPAM1_EL1_0_62_ref = ( (|
  name = (''_MPAM1_EL1_0_62''),
  read_from = ((\<lambda> s . (bitvector_63_dec_reg   s) (''_MPAM1_EL1_0_62''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_63_dec_reg :=
  ((\<lambda> reg .  if reg = (''_MPAM1_EL1_0_62'') then v else(bitvector_63_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_63_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_63_dec v)) |) )\<close>


definition MPAMIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAMIDR_EL1_ref = ( (|
  name = (''MPAMIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAMIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAMIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MPAM2_EL2_0_62_ref  :: \<open>((regstate),(register_value),((63)Word.word))register_ref \<close>  where 
     \<open> MPAM2_EL2_0_62_ref = ( (|
  name = (''_MPAM2_EL2_0_62''),
  read_from = ((\<lambda> s . (bitvector_63_dec_reg   s) (''_MPAM2_EL2_0_62''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_63_dec_reg :=
  ((\<lambda> reg .  if reg = (''_MPAM2_EL2_0_62'') then v else(bitvector_63_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_63_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_63_dec v)) |) )\<close>


definition MPAM3_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MPAM3_EL3_ref = ( (|
  name = (''MPAM3_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MPAM3_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MPAM3_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MAIR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MAIR_EL3_ref = ( (|
  name = (''MAIR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MAIR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MAIR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MAIR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MAIR_EL2_ref = ( (|
  name = (''MAIR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MAIR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MAIR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MAIR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MAIR_EL1_ref = ( (|
  name = (''MAIR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MAIR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MAIR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SDER32_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SDER32_EL2_ref = ( (|
  name = (''SDER32_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SDER32_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SDER32_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition EDWAR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> EDWAR_ref = ( (|
  name = (''EDWAR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''EDWAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''EDWAR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGWVR_EL1_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> DBGWVR_EL1_ref = ( (|
  name = (''DBGWVR_EL1''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_64_dec_reg   s) (''DBGWVR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGWVR_EL1'') then v else(vector_16_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition DBGWCR_EL1_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> DBGWCR_EL1_ref = ( (|
  name = (''DBGWCR_EL1''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_64_dec_reg   s) (''DBGWCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGWCR_EL1'') then v else(vector_16_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition OSLSR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> OSLSR_EL1_ref = ( (|
  name = (''OSLSR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''OSLSR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''OSLSR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VTTBR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VTTBR_EL2_ref = ( (|
  name = (''VTTBR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VTTBR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VTTBR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VTCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VTCR_EL2_ref = ( (|
  name = (''VTCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VTCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VTCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGBVR_EL1_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> DBGBVR_EL1_ref = ( (|
  name = (''DBGBVR_EL1''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_64_dec_reg   s) (''DBGBVR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGBVR_EL1'') then v else(vector_16_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition DBGBCR_EL1_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> DBGBCR_EL1_ref = ( (|
  name = (''DBGBCR_EL1''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_64_dec_reg   s) (''DBGBCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGBCR_EL1'') then v else(vector_16_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition CONTEXTIDR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CONTEXTIDR_EL2_ref = ( (|
  name = (''CONTEXTIDR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CONTEXTIDR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CONTEXTIDR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CONTEXTIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CONTEXTIDR_EL1_ref = ( (|
  name = (''CONTEXTIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CONTEXTIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CONTEXTIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TFSR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TFSR_EL3_ref = ( (|
  name = (''TFSR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TFSR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TFSR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TFSR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TFSR_EL2_ref = ( (|
  name = (''TFSR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TFSR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TFSR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TFSR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TFSR_EL1_ref = ( (|
  name = (''TFSR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TFSR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TFSR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TFSRE0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TFSRE0_EL1_ref = ( (|
  name = (''TFSRE0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TFSRE0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TFSRE0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DBGDSCRint_16_28_ref  :: \<open>((regstate),(register_value),((13)Word.word))register_ref \<close>  where 
     \<open> DBGDSCRint_16_28_ref = ( (|
  name = (''_DBGDSCRint_16_28''),
  read_from = ((\<lambda> s . (bitvector_13_dec_reg   s) (''_DBGDSCRint_16_28''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_13_dec_reg :=
  ((\<lambda> reg .  if reg = (''_DBGDSCRint_16_28'') then v else(bitvector_13_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_13_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_13_dec v)) |) )\<close>


definition MDSCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MDSCR_EL1_ref = ( (|
  name = (''MDSCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MDSCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MDSCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TTBCR_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> TTBCR_S_ref = ( (|
  name = (''TTBCR_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''TTBCR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''TTBCR_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition IFSR_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> IFSR_S_ref = ( (|
  name = (''IFSR_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''IFSR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''IFSR_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition IFSR32_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> IFSR32_EL2_ref = ( (|
  name = (''IFSR32_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''IFSR32_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''IFSR32_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DFSR_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> DFSR_S_ref = ( (|
  name = (''DFSR_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''DFSR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''DFSR_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition MVBAR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> MVBAR_ref = ( (|
  name = (''MVBAR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''MVBAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''MVBAR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition ACTLR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ACTLR_EL1_ref = ( (|
  name = (''ACTLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ACTLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ACTLR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HFGRTR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HFGRTR_EL2_ref = ( (|
  name = (''HFGRTR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HFGRTR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HFGRTR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ACCDATA_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ACCDATA_EL1_ref = ( (|
  name = (''ACCDATA_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ACCDATA_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ACCDATA_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VBAR_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> VBAR_S_ref = ( (|
  name = (''VBAR_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''VBAR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''VBAR_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition VBAR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VBAR_EL3_ref = ( (|
  name = (''VBAR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VBAR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VBAR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VBAR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VBAR_EL2_ref = ( (|
  name = (''VBAR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VBAR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VBAR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition VBAR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> VBAR_EL1_ref = ( (|
  name = (''VBAR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''VBAR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''VBAR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SPSR_und_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SPSR_und_ref = ( (|
  name = (''SPSR_und''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SPSR_und''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_und'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SPSR_mon_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SPSR_mon_ref = ( (|
  name = (''SPSR_mon''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SPSR_mon''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_mon'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SPSR_irq_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SPSR_irq_ref = ( (|
  name = (''SPSR_irq''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SPSR_irq''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_irq'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SPSR_fiq_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SPSR_fiq_ref = ( (|
  name = (''SPSR_fiq''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SPSR_fiq''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_fiq'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SPSR_abt_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SPSR_abt_ref = ( (|
  name = (''SPSR_abt''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SPSR_abt''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_abt'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SPSR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SPSR_EL3_ref = ( (|
  name = (''SPSR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SPSR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SPSR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SPSR_EL2_ref = ( (|
  name = (''SPSR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SPSR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SPSR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SPSR_EL1_ref = ( (|
  name = (''SPSR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SPSR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SPSR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCTLR_S_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SCTLR_S_ref = ( (|
  name = (''SCTLR_S''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SCTLR_S''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCTLR_S'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SCTLR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCTLR_EL3_ref = ( (|
  name = (''SCTLR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCTLR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCTLR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCTLR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCTLR_EL2_ref = ( (|
  name = (''SCTLR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCTLR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCTLR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCTLR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCTLR_EL1_ref = ( (|
  name = (''SCTLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCTLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCTLR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ZA_ref  :: \<open>((regstate),(register_value),(((2048)Word.word)list))register_ref \<close>  where 
     \<open> ZA_ref = ( (|
  name = (''_ZA''),
  read_from = ((\<lambda> s . (vector_256_inc_bitvector_2048_dec_reg   s) (''_ZA''))),
  write_to = ((\<lambda> v s .  (( s (| vector_256_inc_bitvector_2048_dec_reg :=
  ((\<lambda> reg .  if reg = (''_ZA'') then v else(vector_256_inc_bitvector_2048_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_2048_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_2048_dec v)) v)) |) )\<close>


definition Z_ref  :: \<open>((regstate),(register_value),(((2048)Word.word)list))register_ref \<close>  where 
     \<open> Z_ref = ( (|
  name = (''_Z''),
  read_from = ((\<lambda> s . (vector_32_inc_bitvector_2048_dec_reg   s) (''_Z''))),
  write_to = ((\<lambda> v s .  (( s (| vector_32_inc_bitvector_2048_dec_reg :=
  ((\<lambda> reg .  if reg = (''_Z'') then v else(vector_32_inc_bitvector_2048_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_2048_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_2048_dec v)) v)) |) )\<close>


definition SP_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SP_EL3_ref = ( (|
  name = (''SP_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SP_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SP_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SP_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SP_EL2_ref = ( (|
  name = (''SP_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SP_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SP_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SP_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SP_EL1_ref = ( (|
  name = (''SP_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SP_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SP_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SP_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SP_EL0_ref = ( (|
  name = (''SP_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SP_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SP_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition P_ref  :: \<open>((regstate),(register_value),(((256)Word.word)list))register_ref \<close>  where 
     \<open> P_ref = ( (|
  name = (''_P''),
  read_from = ((\<lambda> s . (vector_16_inc_bitvector_256_dec_reg   s) (''_P''))),
  write_to = ((\<lambda> v s .  (( s (| vector_16_inc_bitvector_256_dec_reg :=
  ((\<lambda> reg .  if reg = (''_P'') then v else(vector_16_inc_bitvector_256_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_256_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_256_dec v)) v)) |) )\<close>


definition NSACR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> NSACR_ref = ( (|
  name = (''NSACR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''NSACR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''NSACR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition CPTR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CPTR_EL3_ref = ( (|
  name = (''CPTR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CPTR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CPTR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CPTR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CPTR_EL2_ref = ( (|
  name = (''CPTR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CPTR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CPTR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition CPACR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CPACR_EL1_ref = ( (|
  name = (''CPACR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CPACR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CPACR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition FFR_ref  :: \<open>((regstate),(register_value),((256)Word.word))register_ref \<close>  where 
     \<open> FFR_ref = ( (|
  name = (''_FFR''),
  read_from = ((\<lambda> s . (bitvector_256_dec_reg   s) (''_FFR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_256_dec_reg :=
  ((\<lambda> reg .  if reg = (''_FFR'') then v else(bitvector_256_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_256_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_256_dec v)) |) )\<close>


definition SMCR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SMCR_EL3_ref = ( (|
  name = (''SMCR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SMCR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SMCR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SMCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SMCR_EL2_ref = ( (|
  name = (''SMCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SMCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SMCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SMCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SMCR_EL1_ref = ( (|
  name = (''SMCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SMCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SMCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition max_implemented_smeveclen_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> max_implemented_smeveclen_ref = ( (|
  name = (''__max_implemented_smeveclen''),
  read_from = ((\<lambda> s . (int_reg   s) (''__max_implemented_smeveclen''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__max_implemented_smeveclen'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition ZCR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ZCR_EL3_ref = ( (|
  name = (''ZCR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ZCR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ZCR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ZCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ZCR_EL2_ref = ( (|
  name = (''ZCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ZCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ZCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ZCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ZCR_EL1_ref = ( (|
  name = (''ZCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ZCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ZCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ELR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ELR_EL3_ref = ( (|
  name = (''ELR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ELR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ELR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ELR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ELR_EL2_ref = ( (|
  name = (''ELR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ELR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ELR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ELR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ELR_EL1_ref = ( (|
  name = (''ELR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ELR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ELR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition RTPIDEN_ref  :: \<open>((regstate),(register_value),(signal))register_ref \<close>  where 
     \<open> RTPIDEN_ref = ( (|
  name = (''RTPIDEN''),
  read_from = ((\<lambda> s . (signal_reg   s) (''RTPIDEN''))),
  write_to = ((\<lambda> v s .  (( s (| signal_reg :=
  ((\<lambda> reg .  if reg = (''RTPIDEN'') then v else(signal_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  signal_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_signal v)) |) )\<close>


definition RLPIDEN_ref  :: \<open>((regstate),(register_value),(signal))register_ref \<close>  where 
     \<open> RLPIDEN_ref = ( (|
  name = (''RLPIDEN''),
  read_from = ((\<lambda> s . (signal_reg   s) (''RLPIDEN''))),
  write_to = ((\<lambda> v s .  (( s (| signal_reg :=
  ((\<lambda> reg .  if reg = (''RLPIDEN'') then v else(signal_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  signal_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_signal v)) |) )\<close>


definition DBGPRCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DBGPRCR_EL1_ref = ( (|
  name = (''DBGPRCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DBGPRCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DBGPRCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition OSDLR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> OSDLR_EL1_ref = ( (|
  name = (''OSDLR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''OSDLR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''OSDLR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SPIDEN_ref  :: \<open>((regstate),(register_value),(signal))register_ref \<close>  where 
     \<open> SPIDEN_ref = ( (|
  name = (''SPIDEN''),
  read_from = ((\<lambda> s . (signal_reg   s) (''SPIDEN''))),
  write_to = ((\<lambda> v s .  (( s (| signal_reg :=
  ((\<lambda> reg .  if reg = (''SPIDEN'') then v else(signal_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  signal_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_signal v)) |) )\<close>


definition DBGEN_ref  :: \<open>((regstate),(register_value),(signal))register_ref \<close>  where 
     \<open> DBGEN_ref = ( (|
  name = (''DBGEN''),
  read_from = ((\<lambda> s . (signal_reg   s) (''DBGEN''))),
  write_to = ((\<lambda> v s .  (( s (| signal_reg :=
  ((\<lambda> reg .  if reg = (''DBGEN'') then v else(signal_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  signal_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_signal v)) |) )\<close>


definition EDSCR_31_31_ref  :: \<open>((regstate),(register_value),((1)Word.word))register_ref \<close>  where 
     \<open> EDSCR_31_31_ref = ( (|
  name = (''_EDSCR_31_31''),
  read_from = ((\<lambda> s . (bitvector_1_dec_reg   s) (''_EDSCR_31_31''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_1_dec_reg :=
  ((\<lambda> reg .  if reg = (''_EDSCR_31_31'') then v else(bitvector_1_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_1_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_1_dec v)) |) )\<close>


definition EDSCR_0_28_ref  :: \<open>((regstate),(register_value),((29)Word.word))register_ref \<close>  where 
     \<open> EDSCR_0_28_ref = ( (|
  name = (''_EDSCR_0_28''),
  read_from = ((\<lambda> s . (bitvector_29_dec_reg   s) (''_EDSCR_0_28''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_29_dec_reg :=
  ((\<lambda> reg .  if reg = (''_EDSCR_0_28'') then v else(bitvector_29_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_29_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_29_dec v)) |) )\<close>


definition MDCCSR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MDCCSR_EL0_ref = ( (|
  name = (''MDCCSR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MDCCSR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MDCCSR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DSPSR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DSPSR_EL0_ref = ( (|
  name = (''DSPSR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DSPSR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DSPSR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition DLR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> DLR_EL0_ref = ( (|
  name = (''DLR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''DLR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''DLR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition OSECCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> OSECCR_EL1_ref = ( (|
  name = (''OSECCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''OSECCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''OSECCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition BranchTaken_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> BranchTaken_ref = ( (|
  name = (''__BranchTaken''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__BranchTaken''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__BranchTaken'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition PC_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PC_ref = ( (|
  name = (''_PC''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''_PC''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''_PC'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SP_mon_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SP_mon_ref = ( (|
  name = (''SP_mon''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SP_mon''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SP_mon'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition LR_mon_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> LR_mon_ref = ( (|
  name = (''LR_mon''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''LR_mon''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''LR_mon'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition TCR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TCR_EL3_ref = ( (|
  name = (''TCR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TCR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TCR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TCR_EL2_ref = ( (|
  name = (''TCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> TCR_EL1_ref = ( (|
  name = (''TCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''TCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''TCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition Records_TGT_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> Records_TGT_ref = ( (|
  name = (''Records_TGT''),
  read_from = ((\<lambda> s . (vector_64_inc_bitvector_64_dec_reg   s) (''Records_TGT''))),
  write_to = ((\<lambda> v s .  (( s (| vector_64_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''Records_TGT'') then v else(vector_64_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition Records_SRC_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> Records_SRC_ref = ( (|
  name = (''Records_SRC''),
  read_from = ((\<lambda> s . (vector_64_inc_bitvector_64_dec_reg   s) (''Records_SRC''))),
  write_to = ((\<lambda> v s .  (( s (| vector_64_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''Records_SRC'') then v else(vector_64_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition Records_INF_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> Records_INF_ref = ( (|
  name = (''Records_INF''),
  read_from = ((\<lambda> s . (vector_64_inc_bitvector_64_dec_reg   s) (''Records_INF''))),
  write_to = ((\<lambda> v s .  (( s (| vector_64_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''Records_INF'') then v else(vector_64_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition BRBIDR0_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> BRBIDR0_EL1_ref = ( (|
  name = (''BRBIDR0_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''BRBIDR0_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''BRBIDR0_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition TSTATE_ref  :: \<open>((regstate),(register_value),(TMState))register_ref \<close>  where 
     \<open> TSTATE_ref = ( (|
  name = (''TSTATE''),
  read_from = ((\<lambda> s . (TMState_reg   s) (''TSTATE''))),
  write_to = ((\<lambda> v s .  (( s (| TMState_reg :=
  ((\<lambda> reg .  if reg = (''TSTATE'') then v else(TMState_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  TMState_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_TMState v)) |) )\<close>


definition ICC_PMR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ICC_PMR_EL1_ref = ( (|
  name = (''ICC_PMR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ICC_PMR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ICC_PMR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition PMUEventAccumulator_ref  :: \<open>((regstate),(register_value),((ii)list))register_ref \<close>  where 
     \<open> PMUEventAccumulator_ref = ( (|
  name = (''PMUEventAccumulator''),
  read_from = ((\<lambda> s . (vector_31_inc_int_reg   s) (''PMUEventAccumulator''))),
  write_to = ((\<lambda> v s .  (( s (| vector_31_inc_int_reg :=
  ((\<lambda> reg .  if reg = (''PMUEventAccumulator'') then v else(vector_31_inc_int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  int_of_register_value v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  register_value_of_int v)) v)) |) )\<close>


definition PMEVTYPER_EL0_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> PMEVTYPER_EL0_ref = ( (|
  name = (''PMEVTYPER_EL0''),
  read_from = ((\<lambda> s . (vector_31_inc_bitvector_64_dec_reg   s) (''PMEVTYPER_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| vector_31_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMEVTYPER_EL0'') then v else(vector_31_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition PMCR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> PMCR_EL0_ref = ( (|
  name = (''PMCR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''PMCR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''PMCR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MDCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MDCR_EL2_ref = ( (|
  name = (''MDCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MDCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MDCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MDCR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MDCR_EL3_ref = ( (|
  name = (''MDCR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MDCR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MDCR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition last_branch_valid_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> last_branch_valid_ref = ( (|
  name = (''__last_branch_valid''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__last_branch_valid''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__last_branch_valid'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition last_cycle_count_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> last_cycle_count_ref = ( (|
  name = (''__last_cycle_count''),
  read_from = ((\<lambda> s . (int_reg   s) (''__last_cycle_count''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__last_cycle_count'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition BRBFCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> BRBFCR_EL1_ref = ( (|
  name = (''BRBFCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''BRBFCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''BRBFCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition BRBCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> BRBCR_EL2_ref = ( (|
  name = (''BRBCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''BRBCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''BRBCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition BRBCR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> BRBCR_EL1_ref = ( (|
  name = (''BRBCR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''BRBCR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''BRBCR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition MFAR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> MFAR_EL3_ref = ( (|
  name = (''MFAR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''MFAR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''MFAR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HPFAR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HPFAR_EL2_ref = ( (|
  name = (''HPFAR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HPFAR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HPFAR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition FAR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> FAR_EL3_ref = ( (|
  name = (''FAR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''FAR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''FAR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition FAR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> FAR_EL2_ref = ( (|
  name = (''FAR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''FAR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''FAR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition FAR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> FAR_EL1_ref = ( (|
  name = (''FAR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''FAR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''FAR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ESR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ESR_EL3_ref = ( (|
  name = (''ESR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ESR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ESR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ESR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ESR_EL2_ref = ( (|
  name = (''ESR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ESR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ESR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ESR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> ESR_EL1_ref = ( (|
  name = (''ESR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''ESR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ESR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ThisInstrEnc_ref  :: \<open>((regstate),(register_value),(InstrEnc))register_ref \<close>  where 
     \<open> ThisInstrEnc_ref = ( (|
  name = (''__ThisInstrEnc''),
  read_from = ((\<lambda> s . (InstrEnc_reg   s) (''__ThisInstrEnc''))),
  write_to = ((\<lambda> v s .  (( s (| InstrEnc_reg :=
  ((\<lambda> reg .  if reg = (''__ThisInstrEnc'') then v else(InstrEnc_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  InstrEnc_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of___InstrEnc v)) |) )\<close>


definition R30_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R30_ref = ( (|
  name = (''R30''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R30''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R30'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R29_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R29_ref = ( (|
  name = (''R29''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R29''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R29'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R28_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R28_ref = ( (|
  name = (''R28''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R28''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R28'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R27_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R27_ref = ( (|
  name = (''R27''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R27''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R27'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R26_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R26_ref = ( (|
  name = (''R26''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R26''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R26'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R25_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R25_ref = ( (|
  name = (''R25''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R25''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R25'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R24_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R24_ref = ( (|
  name = (''R24''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R24''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R24'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R23_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R23_ref = ( (|
  name = (''R23''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R23''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R23'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R22_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R22_ref = ( (|
  name = (''R22''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R22''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R22'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R21_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R21_ref = ( (|
  name = (''R21''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R21''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R21'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R20_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R20_ref = ( (|
  name = (''R20''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R20''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R20'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R19_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R19_ref = ( (|
  name = (''R19''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R19''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R19'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R18_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R18_ref = ( (|
  name = (''R18''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R18''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R18'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R17_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R17_ref = ( (|
  name = (''R17''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R17''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R17'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R16_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R16_ref = ( (|
  name = (''R16''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R16''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R16'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R15_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R15_ref = ( (|
  name = (''R15''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R15''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R15'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R14_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R14_ref = ( (|
  name = (''R14''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R14''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R14'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R13_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R13_ref = ( (|
  name = (''R13''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R13''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R13'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R12_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R12_ref = ( (|
  name = (''R12''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R12''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R12'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R11_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R11_ref = ( (|
  name = (''R11''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R11''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R11'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R10_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R10_ref = ( (|
  name = (''R10''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R10''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R10'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R9_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R9_ref = ( (|
  name = (''R9''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R9''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R9'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R8_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R8_ref = ( (|
  name = (''R8''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R8''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R8'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R7_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R7_ref = ( (|
  name = (''R7''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R7''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R7'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R6_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R6_ref = ( (|
  name = (''R6''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R6''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R6'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R5_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R5_ref = ( (|
  name = (''R5''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R5''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R5'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R4_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R4_ref = ( (|
  name = (''R4''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R4''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R4'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R3_ref = ( (|
  name = (''R3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R2_ref = ( (|
  name = (''R2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R1_ref = ( (|
  name = (''R1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition R0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> R0_ref = ( (|
  name = (''R0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''R0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''R0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition ThisInstr_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> ThisInstr_ref = ( (|
  name = (''__ThisInstr''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''__ThisInstr''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''__ThisInstr'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition unpred_tsize_aborts_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> unpred_tsize_aborts_ref = ( (|
  name = (''__unpred_tsize_aborts''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__unpred_tsize_aborts''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__unpred_tsize_aborts'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition ICACHE_CCSIDR_RESET_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> ICACHE_CCSIDR_RESET_ref = ( (|
  name = (''__ICACHE_CCSIDR_RESET''),
  read_from = ((\<lambda> s . (vector_7_inc_bitvector_64_dec_reg   s) (''__ICACHE_CCSIDR_RESET''))),
  write_to = ((\<lambda> v s .  (( s (| vector_7_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''__ICACHE_CCSIDR_RESET'') then v else(vector_7_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition DCACHE_CCSIDR_RESET_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> DCACHE_CCSIDR_RESET_ref = ( (|
  name = (''__DCACHE_CCSIDR_RESET''),
  read_from = ((\<lambda> s . (vector_7_inc_bitvector_64_dec_reg   s) (''__DCACHE_CCSIDR_RESET''))),
  write_to = ((\<lambda> v s .  (( s (| vector_7_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''__DCACHE_CCSIDR_RESET'') then v else(vector_7_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition CLIDR_EL1_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CLIDR_EL1_ref = ( (|
  name = (''CLIDR_EL1''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CLIDR_EL1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CLIDR_EL1'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition cycle_count_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> cycle_count_ref = ( (|
  name = (''__cycle_count''),
  read_from = ((\<lambda> s . (int_reg   s) (''__cycle_count''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__cycle_count'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition HCRX_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HCRX_EL2_ref = ( (|
  name = (''HCRX_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HCRX_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HCRX_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition SCR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> SCR_ref = ( (|
  name = (''SCR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''SCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition SCR_EL3_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> SCR_EL3_ref = ( (|
  name = (''SCR_EL3''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''SCR_EL3''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''SCR_EL3'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition HCR_EL2_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> HCR_EL2_ref = ( (|
  name = (''HCR_EL2''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''HCR_EL2''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''HCR_EL2'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition trcclaim_tags_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> trcclaim_tags_ref = ( (|
  name = (''__trcclaim_tags''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''__trcclaim_tags''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''__trcclaim_tags'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition claim_tags_ref  :: \<open>((regstate),(register_value),((8)Word.word))register_ref \<close>  where 
     \<open> claim_tags_ref = ( (|
  name = (''__claim_tags''),
  read_from = ((\<lambda> s . (bitvector_8_dec_reg   s) (''__claim_tags''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_8_dec_reg :=
  ((\<lambda> reg .  if reg = (''__claim_tags'') then v else(bitvector_8_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_8_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_8_dec v)) |) )\<close>


definition ERRnFR_ref  :: \<open>((regstate),(register_value),(((64)Word.word)list))register_ref \<close>  where 
     \<open> ERRnFR_ref = ( (|
  name = (''ERRnFR''),
  read_from = ((\<lambda> s . (vector_4_inc_bitvector_64_dec_reg   s) (''ERRnFR''))),
  write_to = ((\<lambda> v s .  (( s (| vector_4_inc_bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''ERRnFR'') then v else(vector_4_inc_bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  vector_of_regval ((\<lambda> v .  bitvector_64_dec_of_regval v)) v)),
  regval_of = ((\<lambda> v .  regval_of_vector ((\<lambda> v .  regval_of_bitvector_64_dec v)) v)) |) )\<close>


definition RVBAR_ref  :: \<open>((regstate),(register_value),((32)Word.word))register_ref \<close>  where 
     \<open> RVBAR_ref = ( (|
  name = (''RVBAR''),
  read_from = ((\<lambda> s . (bitvector_32_dec_reg   s) (''RVBAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_32_dec_reg :=
  ((\<lambda> reg .  if reg = (''RVBAR'') then v else(bitvector_32_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_32_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_32_dec v)) |) )\<close>


definition FPSR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> FPSR_ref = ( (|
  name = (''FPSR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''FPSR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''FPSR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition FPCR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> FPCR_ref = ( (|
  name = (''FPCR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''FPCR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''FPCR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition mpam_vpmr_max_ref  :: \<open>((regstate),(register_value),((3)Word.word))register_ref \<close>  where 
     \<open> mpam_vpmr_max_ref = ( (|
  name = (''__mpam_vpmr_max''),
  read_from = ((\<lambda> s . (bitvector_3_dec_reg   s) (''__mpam_vpmr_max''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_3_dec_reg :=
  ((\<lambda> reg .  if reg = (''__mpam_vpmr_max'') then v else(bitvector_3_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_3_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_3_dec v)) |) )\<close>


definition mpam_pmg_max_ref  :: \<open>((regstate),(register_value),((8)Word.word))register_ref \<close>  where 
     \<open> mpam_pmg_max_ref = ( (|
  name = (''__mpam_pmg_max''),
  read_from = ((\<lambda> s . (bitvector_8_dec_reg   s) (''__mpam_pmg_max''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_8_dec_reg :=
  ((\<lambda> reg .  if reg = (''__mpam_pmg_max'') then v else(bitvector_8_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_8_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_8_dec v)) |) )\<close>


definition mpam_partid_max_ref  :: \<open>((regstate),(register_value),((16)Word.word))register_ref \<close>  where 
     \<open> mpam_partid_max_ref = ( (|
  name = (''__mpam_partid_max''),
  read_from = ((\<lambda> s . (bitvector_16_dec_reg   s) (''__mpam_partid_max''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_16_dec_reg :=
  ((\<lambda> reg .  if reg = (''__mpam_partid_max'') then v else(bitvector_16_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_16_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_16_dec v)) |) )\<close>


definition mpam_has_hcr_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> mpam_has_hcr_ref = ( (|
  name = (''__mpam_has_hcr''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__mpam_has_hcr''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__mpam_has_hcr'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition impdef_res_TG1_ref  :: \<open>((regstate),(register_value),((2)Word.word))register_ref \<close>  where 
     \<open> impdef_res_TG1_ref = ( (|
  name = (''__impdef_res_TG1''),
  read_from = ((\<lambda> s . (bitvector_2_dec_reg   s) (''__impdef_res_TG1''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_2_dec_reg :=
  ((\<lambda> reg .  if reg = (''__impdef_res_TG1'') then v else(bitvector_2_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_2_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_2_dec v)) |) )\<close>


definition impdef_res_TG0_ref  :: \<open>((regstate),(register_value),((2)Word.word))register_ref \<close>  where 
     \<open> impdef_res_TG0_ref = ( (|
  name = (''__impdef_res_TG0''),
  read_from = ((\<lambda> s . (bitvector_2_dec_reg   s) (''__impdef_res_TG0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_2_dec_reg :=
  ((\<lambda> reg .  if reg = (''__impdef_res_TG0'') then v else(bitvector_2_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_2_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_2_dec v)) |) )\<close>


definition PhysicalCount_ref  :: \<open>((regstate),(register_value),((88)Word.word))register_ref \<close>  where 
     \<open> PhysicalCount_ref = ( (|
  name = (''PhysicalCount''),
  read_from = ((\<lambda> s . (bitvector_88_dec_reg   s) (''PhysicalCount''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_88_dec_reg :=
  ((\<lambda> reg .  if reg = (''PhysicalCount'') then v else(bitvector_88_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_88_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_88_dec v)) |) )\<close>


definition CFG_RVBAR_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CFG_RVBAR_ref = ( (|
  name = (''CFG_RVBAR''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CFG_RVBAR''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CFG_RVBAR'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition supported_va_size_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> supported_va_size_ref = ( (|
  name = (''__supported_va_size''),
  read_from = ((\<lambda> s . (int_reg   s) (''__supported_va_size''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__supported_va_size'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition supported_pa_size_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> supported_pa_size_ref = ( (|
  name = (''__supported_pa_size''),
  read_from = ((\<lambda> s . (int_reg   s) (''__supported_pa_size''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__supported_pa_size'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition num_watchpoints_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> num_watchpoints_ref = ( (|
  name = (''__num_watchpoints''),
  read_from = ((\<lambda> s . (int_reg   s) (''__num_watchpoints''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__num_watchpoints'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition num_event_counters_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> num_event_counters_ref = ( (|
  name = (''__num_event_counters''),
  read_from = ((\<lambda> s . (int_reg   s) (''__num_event_counters''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__num_event_counters'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition num_ctx_breakpoints_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> num_ctx_breakpoints_ref = ( (|
  name = (''__num_ctx_breakpoints''),
  read_from = ((\<lambda> s . (int_reg   s) (''__num_ctx_breakpoints''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__num_ctx_breakpoints'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition num_breakpoints_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> num_breakpoints_ref = ( (|
  name = (''__num_breakpoints''),
  read_from = ((\<lambda> s . (int_reg   s) (''__num_breakpoints''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__num_breakpoints'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition num_brb_records_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> num_brb_records_ref = ( (|
  name = (''__num_brb_records''),
  read_from = ((\<lambda> s . (int_reg   s) (''__num_brb_records''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__num_brb_records'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition has_sve_extended_bf16_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> has_sve_extended_bf16_ref = ( (|
  name = (''__has_sve_extended_bf16''),
  read_from = ((\<lambda> s . (int_reg   s) (''__has_sve_extended_bf16''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__has_sve_extended_bf16'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition block_bbm_implemented_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> block_bbm_implemented_ref = ( (|
  name = (''__block_bbm_implemented''),
  read_from = ((\<lambda> s . (int_reg   s) (''__block_bbm_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__block_bbm_implemented'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition CTR_EL0_ref  :: \<open>((regstate),(register_value),((64)Word.word))register_ref \<close>  where 
     \<open> CTR_EL0_ref = ( (|
  name = (''CTR_EL0''),
  read_from = ((\<lambda> s . (bitvector_64_dec_reg   s) (''CTR_EL0''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_64_dec_reg :=
  ((\<lambda> reg .  if reg = (''CTR_EL0'') then v else(bitvector_64_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_64_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_64_dec v)) |) )\<close>


definition vmid16_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> vmid16_implemented_ref = ( (|
  name = (''__vmid16_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__vmid16_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__vmid16_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition sme_only_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> sme_only_ref = ( (|
  name = (''__sme_only''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__sme_only''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__sme_only'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition rme_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> rme_implemented_ref = ( (|
  name = (''__rme_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__rme_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__rme_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition pacqarma5_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> pacqarma5_implemented_ref = ( (|
  name = (''__pacqarma5_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__pacqarma5_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__pacqarma5_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition pacqarma3_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> pacqarma3_implemented_ref = ( (|
  name = (''__pacqarma3_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__pacqarma3_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__pacqarma3_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition pac_frac_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> pac_frac_implemented_ref = ( (|
  name = (''__pac_frac_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__pac_frac_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__pac_frac_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition mte_implemented_ref  :: \<open>((regstate),(register_value),((4)Word.word))register_ref \<close>  where 
     \<open> mte_implemented_ref = ( (|
  name = (''__mte_implemented''),
  read_from = ((\<lambda> s . (bitvector_4_dec_reg   s) (''__mte_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bitvector_4_dec_reg :=
  ((\<lambda> reg .  if reg = (''__mte_implemented'') then v else(bitvector_4_dec_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bitvector_4_dec_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_bitvector_4_dec v)) |) )\<close>


definition mpam_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> mpam_implemented_ref = ( (|
  name = (''__mpam_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__mpam_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__mpam_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition mops_option_a_supported_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> mops_option_a_supported_ref = ( (|
  name = (''__mops_option_a_supported''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__mops_option_a_supported''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__mops_option_a_supported'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition isb_is_branch_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> isb_is_branch_ref = ( (|
  name = (''__isb_is_branch''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__isb_is_branch''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__isb_is_branch'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition highest_el_aarch32_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> highest_el_aarch32_ref = ( (|
  name = (''__highest_el_aarch32''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__highest_el_aarch32''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__highest_el_aarch32'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition has_sme_priority_control_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> has_sme_priority_control_ref = ( (|
  name = (''__has_sme_priority_control''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__has_sme_priority_control''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__has_sme_priority_control'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition has_sme_i16i64_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> has_sme_i16i64_ref = ( (|
  name = (''__has_sme_i16i64''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__has_sme_i16i64''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__has_sme_i16i64'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition has_sme_f64f64_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> has_sme_f64f64_ref = ( (|
  name = (''__has_sme_f64f64''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__has_sme_f64f64''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__has_sme_f64f64'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition has_sme_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> has_sme_ref = ( (|
  name = (''__has_sme''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__has_sme''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__has_sme'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition feat_ls64_v_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> feat_ls64_v_ref = ( (|
  name = (''__feat_ls64_v''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__feat_ls64_v''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__feat_ls64_v'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition feat_ls64_accdata_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> feat_ls64_accdata_ref = ( (|
  name = (''__feat_ls64_accdata''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__feat_ls64_accdata''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__feat_ls64_accdata'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition feat_ls64_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> feat_ls64_ref = ( (|
  name = (''__feat_ls64''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__feat_ls64''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__feat_ls64'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition empam_tidr_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> empam_tidr_implemented_ref = ( (|
  name = (''__empam_tidr_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__empam_tidr_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__empam_tidr_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition empam_sdeflt_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> empam_sdeflt_implemented_ref = ( (|
  name = (''__empam_sdeflt_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__empam_sdeflt_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__empam_sdeflt_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition empam_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> empam_implemented_ref = ( (|
  name = (''__empam_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__empam_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__empam_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition empam_force_ns_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> empam_force_ns_implemented_ref = ( (|
  name = (''__empam_force_ns_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__empam_force_ns_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__empam_force_ns_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition empam_force_ns_RAO_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> empam_force_ns_RAO_ref = ( (|
  name = (''__empam_force_ns_RAO''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__empam_force_ns_RAO''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__empam_force_ns_RAO'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition crypto_sm4_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> crypto_sm4_implemented_ref = ( (|
  name = (''__crypto_sm4_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__crypto_sm4_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__crypto_sm4_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition crypto_sm3_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> crypto_sm3_implemented_ref = ( (|
  name = (''__crypto_sm3_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__crypto_sm3_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__crypto_sm3_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition crypto_sha512_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> crypto_sha512_implemented_ref = ( (|
  name = (''__crypto_sha512_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__crypto_sha512_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__crypto_sha512_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition crypto_sha3_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> crypto_sha3_implemented_ref = ( (|
  name = (''__crypto_sha3_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__crypto_sha3_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__crypto_sha3_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition crypto_sha256_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> crypto_sha256_implemented_ref = ( (|
  name = (''__crypto_sha256_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__crypto_sha256_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__crypto_sha256_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition crypto_sha1_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> crypto_sha1_implemented_ref = ( (|
  name = (''__crypto_sha1_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__crypto_sha1_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__crypto_sha1_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition crypto_aes_implemented_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> crypto_aes_implemented_ref = ( (|
  name = (''__crypto_aes_implemented''),
  read_from = ((\<lambda> s . (int_reg   s) (''__crypto_aes_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg :=
  ((\<lambda> reg .  if reg = (''__crypto_aes_implemented'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


definition brbev1p1_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> brbev1p1_implemented_ref = ( (|
  name = (''__brbev1p1_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__brbev1p1_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__brbev1p1_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition brbe_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> brbe_implemented_ref = ( (|
  name = (''__brbe_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__brbe_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__brbe_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition apply_effective_shareability_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> apply_effective_shareability_ref = ( (|
  name = (''__apply_effective_shareability''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__apply_effective_shareability''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__apply_effective_shareability'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition aa32_hpd_implemented_ref  :: \<open>((regstate),(register_value),(bool))register_ref \<close>  where 
     \<open> aa32_hpd_implemented_ref = ( (|
  name = (''__aa32_hpd_implemented''),
  read_from = ((\<lambda> s . (bool_reg   s) (''__aa32_hpd_implemented''))),
  write_to = ((\<lambda> v s .  (( s (| bool_reg :=
  ((\<lambda> reg .  if reg = (''__aa32_hpd_implemented'') then v else(bool_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  bool_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_bool v)) |) )\<close>


definition PSTATE_ref  :: \<open>((regstate),(register_value),(ProcState))register_ref \<close>  where 
     \<open> PSTATE_ref = ( (|
  name = (''PSTATE''),
  read_from = ((\<lambda> s . (ProcState_reg   s) (''PSTATE''))),
  write_to = ((\<lambda> v s .  (( s (| ProcState_reg :=
  ((\<lambda> reg .  if reg = (''PSTATE'') then v else(ProcState_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  ProcState_of_regval v)),
  regval_of = ((\<lambda> v .  regval_of_ProcState v)) |) )\<close>


definition SEE_ref  :: \<open>((regstate),(register_value),(int))register_ref \<close>  where 
     \<open> SEE_ref = ( (|
  name = (''SEE''),
  read_from = ((\<lambda> s . (int_reg   s) (''SEE''))),
  write_to = ((\<lambda> v s .  (( s (| int_reg := ((\<lambda> reg .  if reg = (''SEE'') then v else(int_reg   s) reg)) |))))),
  of_regval = ((\<lambda> v .  int_of_register_value v)),
  regval_of = ((\<lambda> v .  register_value_of_int v)) |) )\<close>


\<comment> \<open>\<open>val registers : list (string * register_ops regstate register_value)\<close>\<close>
definition registers  :: \<open>(string*((register_value \<Rightarrow> bool)*(regstate \<Rightarrow> register_value)*(register_value \<Rightarrow> regstate \<Rightarrow>(regstate)option)))list \<close>  where 
     \<open> registers = ( [
    ((''STACK_LIMIT''), register_ops_of STACK_LIMIT_ref),
    ((''STACK_BASE''), register_ops_of STACK_BASE_ref),
    ((''HEAP_LIMIT''), register_ops_of HEAP_LIMIT_ref),
    ((''HEAP_BASE''), register_ops_of HEAP_BASE_ref),
    ((''__DBG_ROM_ADDR''), register_ops_of DBG_ROM_ADDR_ref),
    ((''__mops_forward_copy''), register_ops_of mops_forward_copy_ref),
    ((''__trickbox_enabled''), register_ops_of trickbox_enabled_ref),
    ((''__v93_implemented''), register_ops_of v93_implemented_ref),
    ((''__v92_implemented''), register_ops_of v92_implemented_ref),
    ((''__v91_implemented''), register_ops_of v91_implemented_ref),
    ((''__v90_implemented''), register_ops_of v90_implemented_ref),
    ((''__v88_implemented''), register_ops_of v88_implemented_ref),
    ((''__v87_implemented''), register_ops_of v87_implemented_ref),
    ((''__v86_implemented''), register_ops_of v86_implemented_ref),
    ((''__v85_implemented''), register_ops_of v85_implemented_ref),
    ((''__v84_implemented''), register_ops_of v84_implemented_ref),
    ((''__v83_implemented''), register_ops_of v83_implemented_ref),
    ((''__v82_implemented''), register_ops_of v82_implemented_ref),
    ((''__v81_implemented''), register_ops_of v81_implemented_ref),
    ((''__syncAbortOnDeviceWrite''), register_ops_of syncAbortOnDeviceWrite_ref),
    ((''__syncAbortOnWriteNormNonCache''), register_ops_of syncAbortOnWriteNormNonCache_ref),
    ((''__syncAbortOnWriteNormCache''), register_ops_of syncAbortOnWriteNormCache_ref),
    ((''__syncAbortOnTTWNonCache''), register_ops_of syncAbortOnTTWNonCache_ref),
    ((''__syncAbortOnTTWCache''), register_ops_of syncAbortOnTTWCache_ref),
    ((''__syncAbortOnPrefetch''), register_ops_of syncAbortOnPrefetch_ref),
    ((''__syncAbortOnSoWrite''), register_ops_of syncAbortOnSoWrite_ref),
    ((''__syncAbortOnSoRead''), register_ops_of syncAbortOnSoRead_ref),
    ((''__syncAbortOnDeviceRead''), register_ops_of syncAbortOnDeviceRead_ref),
    ((''__syncAbortOnReadNormNonCache''), register_ops_of syncAbortOnReadNormNonCache_ref),
    ((''__syncAbortOnReadNormCache''), register_ops_of syncAbortOnReadNormCache_ref),
    ((''__PMUBase''), register_ops_of PMUBase_ref),
    ((''__GICITSControlBase''), register_ops_of GICITSControlBase_ref),
    ((''__GICDistBase''), register_ops_of GICDistBase_ref),
    ((''__GICCPUInterfaceBase''), register_ops_of GICCPUInterfaceBase_ref),
    ((''__ExtDebugBase''), register_ops_of ExtDebugBase_ref),
    ((''__CNTControlBase''), register_ops_of CNTControlBase_ref),
    ((''__CTIBase''), register_ops_of CTIBase_ref),
    ((''CNTSCR''), register_ops_of CNTSCR_ref),
    ((''__ExclusiveMonitorSet''), register_ops_of ExclusiveMonitorSet_ref),
    ((''__ETEBase''), register_ops_of ETEBase_ref),
    ((''__VLPI_base''), register_ops_of VLPI_base_ref),
    ((''__SGI_base''), register_ops_of SGI_base_ref),
    ((''__RD_base''), register_ops_of RD_base_ref),
    ((''__CNTCTLBase''), register_ops_of CNTCTLBase_ref),
    ((''__CNTEL0BaseN''), register_ops_of CNTEL0BaseN_ref),
    ((''__CNTBaseN''), register_ops_of CNTBaseN_ref),
    ((''__CNTReadBase''), register_ops_of CNTReadBase_ref),
    ((''__InstructionStep''), register_ops_of InstructionStep_ref),
    ((''DTRTX''), register_ops_of DTRTX_ref),
    ((''DTRRX''), register_ops_of DTRRX_ref),
    ((''_Dclone''), register_ops_of Dclone_ref),
    ((''BTypeCompatible''), register_ops_of BTypeCompatible_ref),
    ((''BTypeNext''), register_ops_of BTypeNext_ref),
    ((''RC''), register_ops_of RC_ref),
    ((''EventRegister''), register_ops_of EventRegister_ref),
    ((''ShouldAdvanceSS''), register_ops_of ShouldAdvanceSS_ref),
    ((''ShouldAdvanceIT''), register_ops_of ShouldAdvanceIT_ref),
    ((''IsWFEsleep''), register_ops_of IsWFEsleep_ref),
    ((''IsWFIsleep''), register_ops_of IsWFIsleep_ref),
    ((''DBGOSLAR''), register_ops_of DBGOSLAR_ref),
    ((''TPIDRURW_S''), register_ops_of TPIDRURW_S_ref),
    ((''TPIDRURO_S''), register_ops_of TPIDRURO_S_ref),
    ((''TPIDRPRW_S''), register_ops_of TPIDRPRW_S_ref),
    ((''TCMTR''), register_ops_of TCMTR_ref),
    ((''CNTP_CVAL_S''), register_ops_of CNTP_CVAL_S_ref),
    ((''AMAIR1_S''), register_ops_of AMAIR1_S_ref),
    ((''AMAIR0_S''), register_ops_of AMAIR0_S_ref),
    ((''AIFSR_S''), register_ops_of AIFSR_S_ref),
    ((''ADFSR_S''), register_ops_of ADFSR_S_ref),
    ((''ACTLR_S''), register_ops_of ACTLR_S_ref),
    ((''ACTLR2_S''), register_ops_of ACTLR2_S_ref),
    ((''CP15SDISABLE2''), register_ops_of CP15SDISABLE2_ref),
    ((''CP15SDISABLE''), register_ops_of CP15SDISABLE_ref),
    ((''DACR_S''), register_ops_of DACR_S_ref),
    ((''CONTEXTIDR_S''), register_ops_of CONTEXTIDR_S_ref),
    ((''__ignore_rvbar_in_aarch32''), register_ops_of ignore_rvbar_in_aarch32_ref),
    ((''CFG_RMR_AA64''), register_ops_of CFG_RMR_AA64_ref),
    ((''__rme_l0gptsz''), register_ops_of rme_l0gptsz_ref),
    ((''__pan_implemented''), register_ops_of pan_implemented_ref),
    ((''__mpam_has_altsp''), register_ops_of mpam_has_altsp_ref),
    ((''__gmid_log2_block_size''), register_ops_of gmid_log2_block_size_ref),
    ((''__empam_frac''), register_ops_of empam_frac_ref),
    ((''__dot_product_implemented''), register_ops_of dot_product_implemented_ref),
    ((''__dczid_log2_block_size''), register_ops_of dczid_log2_block_size_ref),
    ((''__crc32_implemented''), register_ops_of crc32_implemented_ref),
    ((''__CNTbase_frequency''), register_ops_of CNTbase_frequency_ref),
    ((''GICD_TYPER''), register_ops_of GICD_TYPER_ref),
    ((''CTIDEVARCH''), register_ops_of CTIDEVARCH_ref),
    ((''CNTFID0''), register_ops_of CNTFID0_ref),
    ((''CFG_MPIDR''), register_ops_of CFG_MPIDR_ref),
    ((''AMIIDR''), register_ops_of AMIIDR_ref),
    ((''AMDEVARCH''), register_ops_of AMDEVARCH_ref),
    ((''CNTV_TVAL_EL0''), register_ops_of CNTV_TVAL_EL0_ref),
    ((''CNTP_TVAL_EL0''), register_ops_of CNTP_TVAL_EL0_ref),
    ((''CNTPS_TVAL_EL1''), register_ops_of CNTPS_TVAL_EL1_ref),
    ((''CNTHV_TVAL_EL2''), register_ops_of CNTHV_TVAL_EL2_ref),
    ((''CNTHVS_TVAL_EL2''), register_ops_of CNTHVS_TVAL_EL2_ref),
    ((''CNTHP_TVAL_EL2''), register_ops_of CNTHP_TVAL_EL2_ref),
    ((''CNTHPS_TVAL_EL2''), register_ops_of CNTHPS_TVAL_EL2_ref),
    ((''__fp16_implemented''), register_ops_of fp16_implemented_ref),
    ((''__exclusive_granule_size''), register_ops_of exclusive_granule_size_ref),
    ((''_ConfigReg''), register_ops_of ConfigReg_ref),
    ((''TLBTR''), register_ops_of TLBTR_ref),
    ((''NMRR_S''), register_ops_of NMRR_S_ref),
    ((''FPSID''), register_ops_of FPSID_ref),
    ((''DBGDEVID''), register_ops_of DBGDEVID_ref),
    ((''TTBR1_S''), register_ops_of TTBR1_S_ref),
    ((''TTBR0_S''), register_ops_of TTBR0_S_ref),
    ((''TTBCR2_S''), register_ops_of TTBCR2_S_ref),
    ((''SDCR''), register_ops_of SDCR_ref),
    ((''MAIR0_S''), register_ops_of MAIR0_S_ref),
    ((''PMVIDSR''), register_ops_of PMVIDSR_ref),
    ((''PMPIDR4''), register_ops_of PMPIDR4_ref),
    ((''PMPIDR3''), register_ops_of PMPIDR3_ref),
    ((''PMPIDR2''), register_ops_of PMPIDR2_ref),
    ((''PMPIDR1''), register_ops_of PMPIDR1_ref),
    ((''PMPIDR0''), register_ops_of PMPIDR0_ref),
    ((''PMPCSR''), register_ops_of PMPCSR_ref),
    ((''PMMIR''), register_ops_of PMMIR_ref),
    ((''PMLSR''), register_ops_of PMLSR_ref),
    ((''PMLAR''), register_ops_of PMLAR_ref),
    ((''PMITCTRL''), register_ops_of PMITCTRL_ref),
    ((''PMDEVTYPE''), register_ops_of PMDEVTYPE_ref),
    ((''PMDEVID''), register_ops_of PMDEVID_ref),
    ((''PMCIDR3''), register_ops_of PMCIDR3_ref),
    ((''PMCIDR2''), register_ops_of PMCIDR2_ref),
    ((''PMCIDR1''), register_ops_of PMCIDR1_ref),
    ((''PMCIDR0''), register_ops_of PMCIDR0_ref),
    ((''PMCFGR''), register_ops_of PMCFGR_ref),
    ((''PMAUTHSTATUS''), register_ops_of PMAUTHSTATUS_ref),
    ((''PAR_S''), register_ops_of PAR_S_ref),
    ((''JOSCR''), register_ops_of JOSCR_ref),
    ((''JMCR''), register_ops_of JMCR_ref),
    ((''JIDR''), register_ops_of JIDR_ref),
    ((''ICC_MSRE''), register_ops_of ICC_MSRE_ref),
    ((''ICC_MGRPEN1''), register_ops_of ICC_MGRPEN1_ref),
    ((''ICC_MCTLR''), register_ops_of ICC_MCTLR_ref),
    ((''GITS_TYPER''), register_ops_of GITS_TYPER_ref),
    ((''GITS_STATUSR''), register_ops_of GITS_STATUSR_ref),
    ((''GITS_SGIR''), register_ops_of GITS_SGIR_ref),
    ((''GITS_PARTIDR''), register_ops_of GITS_PARTIDR_ref),
    ((''GITS_MPIDR''), register_ops_of GITS_MPIDR_ref),
    ((''GITS_MPAMIDR''), register_ops_of GITS_MPAMIDR_ref),
    ((''GITS_IIDR''), register_ops_of GITS_IIDR_ref),
    ((''GITS_CWRITER''), register_ops_of GITS_CWRITER_ref),
    ((''GITS_CTLR''), register_ops_of GITS_CTLR_ref),
    ((''GITS_CREADR''), register_ops_of GITS_CREADR_ref),
    ((''GITS_CBASER''), register_ops_of GITS_CBASER_ref),
    ((''GICV_STATUSR''), register_ops_of GICV_STATUSR_ref),
    ((''GICV_RPR''), register_ops_of GICV_RPR_ref),
    ((''GICV_PMR''), register_ops_of GICV_PMR_ref),
    ((''GICV_IAR''), register_ops_of GICV_IAR_ref),
    ((''GICV_HPPIR''), register_ops_of GICV_HPPIR_ref),
    ((''GICV_EOIR''), register_ops_of GICV_EOIR_ref),
    ((''GICV_DIR''), register_ops_of GICV_DIR_ref),
    ((''GICV_CTLR''), register_ops_of GICV_CTLR_ref),
    ((''GICV_BPR''), register_ops_of GICV_BPR_ref),
    ((''GICV_AIAR''), register_ops_of GICV_AIAR_ref),
    ((''GICV_AHPPIR''), register_ops_of GICV_AHPPIR_ref),
    ((''GICV_AEOIR''), register_ops_of GICV_AEOIR_ref),
    ((''GICV_ABPR''), register_ops_of GICV_ABPR_ref),
    ((''GICR_WAKER''), register_ops_of GICR_WAKER_ref),
    ((''GICR_VSGIR''), register_ops_of GICR_VSGIR_ref),
    ((''GICR_VSGIPENDR''), register_ops_of GICR_VSGIPENDR_ref),
    ((''GICR_VPROPBASER''), register_ops_of GICR_VPROPBASER_ref),
    ((''GICR_VPENDBASER''), register_ops_of GICR_VPENDBASER_ref),
    ((''GICR_SYNCR''), register_ops_of GICR_SYNCR_ref),
    ((''GICR_STATUSR''), register_ops_of GICR_STATUSR_ref),
    ((''GICR_SETLPIR''), register_ops_of GICR_SETLPIR_ref),
    ((''GICR_PROPBASER''), register_ops_of GICR_PROPBASER_ref),
    ((''GICR_PENDBASER''), register_ops_of GICR_PENDBASER_ref),
    ((''GICR_PARTIDR''), register_ops_of GICR_PARTIDR_ref),
    ((''GICR_MPAMIDR''), register_ops_of GICR_MPAMIDR_ref),
    ((''GICR_ISENABLER0''), register_ops_of GICR_ISENABLER0_ref),
    ((''GICR_INVLPIR''), register_ops_of GICR_INVLPIR_ref),
    ((''GICR_INVALLR''), register_ops_of GICR_INVALLR_ref),
    ((''GICR_INMIR0''), register_ops_of GICR_INMIR0_ref),
    ((''GICR_IIDR''), register_ops_of GICR_IIDR_ref),
    ((''GICR_CTLR''), register_ops_of GICR_CTLR_ref),
    ((''GICR_CLRLPIR''), register_ops_of GICR_CLRLPIR_ref),
    ((''GICM_TYPER''), register_ops_of GICM_TYPER_ref),
    ((''GICM_SETSPI_SR''), register_ops_of GICM_SETSPI_SR_ref),
    ((''GICM_SETSPI_NSR''), register_ops_of GICM_SETSPI_NSR_ref),
    ((''GICM_IIDR''), register_ops_of GICM_IIDR_ref),
    ((''GICM_CLRSPI_SR''), register_ops_of GICM_CLRSPI_SR_ref),
    ((''GICM_CLRSPI_NSR''), register_ops_of GICM_CLRSPI_NSR_ref),
    ((''GICH_VTR''), register_ops_of GICH_VTR_ref),
    ((''GICH_VMCR''), register_ops_of GICH_VMCR_ref),
    ((''GICH_MISR''), register_ops_of GICH_MISR_ref),
    ((''GICH_HCR''), register_ops_of GICH_HCR_ref),
    ((''GICH_ELRSR''), register_ops_of GICH_ELRSR_ref),
    ((''GICH_EISR''), register_ops_of GICH_EISR_ref),
    ((''GICD_TYPER2''), register_ops_of GICD_TYPER2_ref),
    ((''GICD_STATUSR''), register_ops_of GICD_STATUSR_ref),
    ((''GICD_SGIR''), register_ops_of GICD_SGIR_ref),
    ((''GICD_SETSPI_SR''), register_ops_of GICD_SETSPI_SR_ref),
    ((''GICD_SETSPI_NSR''), register_ops_of GICD_SETSPI_NSR_ref),
    ((''GICD_IIDR''), register_ops_of GICD_IIDR_ref),
    ((''GICD_CTLR''), register_ops_of GICD_CTLR_ref),
    ((''GICD_CLRSPI_SR''), register_ops_of GICD_CLRSPI_SR_ref),
    ((''GICD_CLRSPI_NSR''), register_ops_of GICD_CLRSPI_NSR_ref),
    ((''GICC_STATUSR''), register_ops_of GICC_STATUSR_ref),
    ((''GICC_RPR''), register_ops_of GICC_RPR_ref),
    ((''GICC_PMR''), register_ops_of GICC_PMR_ref),
    ((''GICC_IAR''), register_ops_of GICC_IAR_ref),
    ((''GICC_HPPIR''), register_ops_of GICC_HPPIR_ref),
    ((''GICC_EOIR''), register_ops_of GICC_EOIR_ref),
    ((''GICC_DIR''), register_ops_of GICC_DIR_ref),
    ((''GICC_CTLR''), register_ops_of GICC_CTLR_ref),
    ((''GICC_BPR''), register_ops_of GICC_BPR_ref),
    ((''GICC_AIAR''), register_ops_of GICC_AIAR_ref),
    ((''GICC_AHPPIR''), register_ops_of GICC_AHPPIR_ref),
    ((''GICC_AEOIR''), register_ops_of GICC_AEOIR_ref),
    ((''GICC_ABPR''), register_ops_of GICC_ABPR_ref),
    ((''FCSEIDR''), register_ops_of FCSEIDR_ref),
    ((''EDVIDSR''), register_ops_of EDVIDSR_ref),
    ((''EDRCR''), register_ops_of EDRCR_ref),
    ((''EDPRCR''), register_ops_of EDPRCR_ref),
    ((''EDPIDR4''), register_ops_of EDPIDR4_ref),
    ((''EDPIDR3''), register_ops_of EDPIDR3_ref),
    ((''EDPIDR2''), register_ops_of EDPIDR2_ref),
    ((''EDPIDR1''), register_ops_of EDPIDR1_ref),
    ((''EDPIDR0''), register_ops_of EDPIDR0_ref),
    ((''EDPFR''), register_ops_of EDPFR_ref),
    ((''EDPCSR''), register_ops_of EDPCSR_ref),
    ((''EDLSR''), register_ops_of EDLSR_ref),
    ((''EDLAR''), register_ops_of EDLAR_ref),
    ((''EDITCTRL''), register_ops_of EDITCTRL_ref),
    ((''EDHSR''), register_ops_of EDHSR_ref),
    ((''EDESR''), register_ops_of EDESR_ref),
    ((''EDECR''), register_ops_of EDECR_ref),
    ((''EDDFR''), register_ops_of EDDFR_ref),
    ((''EDDEVTYPE''), register_ops_of EDDEVTYPE_ref),
    ((''EDDEVID2''), register_ops_of EDDEVID2_ref),
    ((''EDDEVID1''), register_ops_of EDDEVID1_ref),
    ((''EDDEVID''), register_ops_of EDDEVID_ref),
    ((''EDCIDR3''), register_ops_of EDCIDR3_ref),
    ((''EDCIDR2''), register_ops_of EDCIDR2_ref),
    ((''EDCIDR1''), register_ops_of EDCIDR1_ref),
    ((''EDCIDR0''), register_ops_of EDCIDR0_ref),
    ((''EDAA32PFR''), register_ops_of EDAA32PFR_ref),
    ((''DBGWFAR''), register_ops_of DBGWFAR_ref),
    ((''DBGDSAR''), register_ops_of DBGDSAR_ref),
    ((''DBGDIDR''), register_ops_of DBGDIDR_ref),
    ((''DBGDEVID2''), register_ops_of DBGDEVID2_ref),
    ((''DBGDEVID1''), register_ops_of DBGDEVID1_ref),
    ((''CTIPIDR4''), register_ops_of CTIPIDR4_ref),
    ((''CTIPIDR3''), register_ops_of CTIPIDR3_ref),
    ((''CTIPIDR2''), register_ops_of CTIPIDR2_ref),
    ((''CTIPIDR1''), register_ops_of CTIPIDR1_ref),
    ((''CTIPIDR0''), register_ops_of CTIPIDR0_ref),
    ((''CTILSR''), register_ops_of CTILSR_ref),
    ((''CTILAR''), register_ops_of CTILAR_ref),
    ((''CTIITCTRL''), register_ops_of CTIITCTRL_ref),
    ((''CTIDEVTYPE''), register_ops_of CTIDEVTYPE_ref),
    ((''CTIDEVID2''), register_ops_of CTIDEVID2_ref),
    ((''CTIDEVID1''), register_ops_of CTIDEVID1_ref),
    ((''CTIDEVID''), register_ops_of CTIDEVID_ref),
    ((''CTIDEVCTL''), register_ops_of CTIDEVCTL_ref),
    ((''CTICONTROL''), register_ops_of CTICONTROL_ref),
    ((''CTICIDR3''), register_ops_of CTICIDR3_ref),
    ((''CTICIDR2''), register_ops_of CTICIDR2_ref),
    ((''CTICIDR1''), register_ops_of CTICIDR1_ref),
    ((''CTICIDR0''), register_ops_of CTICIDR0_ref),
    ((''CTIAUTHSTATUS''), register_ops_of CTIAUTHSTATUS_ref),
    ((''CSSELR_S''), register_ops_of CSSELR_S_ref),
    ((''CNTSR''), register_ops_of CNTSR_ref),
    ((''CNTP_CTL_S''), register_ops_of CNTP_CTL_S_ref),
    ((''CNTNSAR''), register_ops_of CNTNSAR_ref),
    ((''CNTID''), register_ops_of CNTID_ref),
    ((''CNTEL0ACR''), register_ops_of CNTEL0ACR_ref),
    ((''CNTCR''), register_ops_of CNTCR_ref),
    ((''AMPIDR4''), register_ops_of AMPIDR4_ref),
    ((''AMPIDR3''), register_ops_of AMPIDR3_ref),
    ((''AMPIDR2''), register_ops_of AMPIDR2_ref),
    ((''AMPIDR1''), register_ops_of AMPIDR1_ref),
    ((''AMPIDR0''), register_ops_of AMPIDR0_ref),
    ((''AMDEVTYPE''), register_ops_of AMDEVTYPE_ref),
    ((''AMCIDR3''), register_ops_of AMCIDR3_ref),
    ((''AMCIDR2''), register_ops_of AMCIDR2_ref),
    ((''AMCIDR1''), register_ops_of AMCIDR1_ref),
    ((''AMCIDR0''), register_ops_of AMCIDR0_ref),
    ((''__clock_divider''), register_ops_of clock_divider_ref),
    ((''EDPRSR''), register_ops_of EDPRSR_ref),
    ((''PMSWINC_EL0''), register_ops_of PMSWINC_EL0_ref),
    ((''OSLAR_EL1''), register_ops_of OSLAR_EL1_ref),
    ((''ICV_EOIR1_EL1''), register_ops_of ICV_EOIR1_EL1_ref),
    ((''ICC_EOIR1_EL1''), register_ops_of ICC_EOIR1_EL1_ref),
    ((''ICV_EOIR0_EL1''), register_ops_of ICV_EOIR0_EL1_ref),
    ((''ICC_EOIR0_EL1''), register_ops_of ICC_EOIR0_EL1_ref),
    ((''ICC_SGI1R_EL1''), register_ops_of ICC_SGI1R_EL1_ref),
    ((''ICC_SGI0R_EL1''), register_ops_of ICC_SGI0R_EL1_ref),
    ((''ICV_DIR_EL1''), register_ops_of ICV_DIR_EL1_ref),
    ((''ICC_DIR_EL1''), register_ops_of ICC_DIR_EL1_ref),
    ((''ICC_ASGI1R_EL1''), register_ops_of ICC_ASGI1R_EL1_ref),
    ((''DBGDTRTX_EL0''), register_ops_of DBGDTRTX_EL0_ref),
    ((''VSESR_EL2''), register_ops_of VSESR_EL2_ref),
    ((''VMPIDR_EL2''), register_ops_of VMPIDR_EL2_ref),
    ((''MPIDR_EL1''), register_ops_of MPIDR_EL1_ref),
    ((''VDISR_EL2''), register_ops_of VDISR_EL2_ref),
    ((''DISR_EL1''), register_ops_of DISR_EL1_ref),
    ((''TRFCR_EL2''), register_ops_of TRFCR_EL2_ref),
    ((''TRFCR_EL1''), register_ops_of TRFCR_EL1_ref),
    ((''TPIDR_EL3''), register_ops_of TPIDR_EL3_ref),
    ((''TPIDR_EL2''), register_ops_of TPIDR_EL2_ref),
    ((''TPIDR_EL1''), register_ops_of TPIDR_EL1_ref),
    ((''TPIDR_EL0''), register_ops_of TPIDR_EL0_ref),
    ((''TPIDRRO_EL0''), register_ops_of TPIDRRO_EL0_ref),
    ((''TPIDR2_EL0''), register_ops_of TPIDR2_EL0_ref),
    ((''SMPRI_EL1''), register_ops_of SMPRI_EL1_ref),
    ((''SMPRIMAP_EL2''), register_ops_of SMPRIMAP_EL2_ref),
    ((''SMIDR_EL1''), register_ops_of SMIDR_EL1_ref),
    ((''SCXTNUM_EL3''), register_ops_of SCXTNUM_EL3_ref),
    ((''SCXTNUM_EL2''), register_ops_of SCXTNUM_EL2_ref),
    ((''SCXTNUM_EL1''), register_ops_of SCXTNUM_EL1_ref),
    ((''SCXTNUM_EL0''), register_ops_of SCXTNUM_EL0_ref),
    ((''RVBAR_EL3''), register_ops_of RVBAR_EL3_ref),
    ((''RVBAR_EL2''), register_ops_of RVBAR_EL2_ref),
    ((''RVBAR_EL1''), register_ops_of RVBAR_EL1_ref),
    ((''RNDR''), register_ops_of RNDR_ref),
    ((''RNDRRS''), register_ops_of RNDRRS_ref),
    ((''RMR_EL3''), register_ops_of RMR_EL3_ref),
    ((''RMR_EL2''), register_ops_of RMR_EL2_ref),
    ((''RMR_EL1''), register_ops_of RMR_EL1_ref),
    ((''RGSR_EL1''), register_ops_of RGSR_EL1_ref),
    ((''REVIDR_EL1''), register_ops_of REVIDR_EL1_ref),
    ((''PMXEVTYPER_EL0''), register_ops_of PMXEVTYPER_EL0_ref),
    ((''PMXEVCNTR_EL0''), register_ops_of PMXEVCNTR_EL0_ref),
    ((''PMSNEVFR_EL1''), register_ops_of PMSNEVFR_EL1_ref),
    ((''PMSLATFR_EL1''), register_ops_of PMSLATFR_EL1_ref),
    ((''PMSIRR_EL1''), register_ops_of PMSIRR_EL1_ref),
    ((''PMSIDR_EL1''), register_ops_of PMSIDR_EL1_ref),
    ((''PMSICR_EL1''), register_ops_of PMSICR_EL1_ref),
    ((''PMSFCR_EL1''), register_ops_of PMSFCR_EL1_ref),
    ((''PMSEVFR_EL1''), register_ops_of PMSEVFR_EL1_ref),
    ((''PMSELR_EL0''), register_ops_of PMSELR_EL0_ref),
    ((''PMSCR_EL2''), register_ops_of PMSCR_EL2_ref),
    ((''PMSCR_EL1''), register_ops_of PMSCR_EL1_ref),
    ((''PMOVSSET_EL0''), register_ops_of PMOVSSET_EL0_ref),
    ((''PMOVSCLR_EL0''), register_ops_of PMOVSCLR_EL0_ref),
    ((''PMMIR_EL1''), register_ops_of PMMIR_EL1_ref),
    ((''PMINTENSET_EL1''), register_ops_of PMINTENSET_EL1_ref),
    ((''PMINTENCLR_EL1''), register_ops_of PMINTENCLR_EL1_ref),
    ((''PMEVCNTR_EL0''), register_ops_of PMEVCNTR_EL0_ref),
    ((''PMCNTENSET_EL0''), register_ops_of PMCNTENSET_EL0_ref),
    ((''PMCNTENCLR_EL0''), register_ops_of PMCNTENCLR_EL0_ref),
    ((''PMCEID1_EL0''), register_ops_of PMCEID1_EL0_ref),
    ((''PMCEID0_EL0''), register_ops_of PMCEID0_EL0_ref),
    ((''PMCCNTR_EL0''), register_ops_of PMCCNTR_EL0_ref),
    ((''PMUSERENR_EL0''), register_ops_of PMUSERENR_EL0_ref),
    ((''PMCCFILTR_EL0''), register_ops_of PMCCFILTR_EL0_ref),
    ((''PMBSR_EL1''), register_ops_of PMBSR_EL1_ref),
    ((''PMBPTR_EL1''), register_ops_of PMBPTR_EL1_ref),
    ((''PMBLIMITR_EL1''), register_ops_of PMBLIMITR_EL1_ref),
    ((''PMBIDR_EL1''), register_ops_of PMBIDR_EL1_ref),
    ((''PAR_EL1''), register_ops_of PAR_EL1_ref),
    ((''OSDTRTX_EL1''), register_ops_of OSDTRTX_EL1_ref),
    ((''OSDTRRX_EL1''), register_ops_of OSDTRRX_EL1_ref),
    ((''MVFR2_EL1''), register_ops_of MVFR2_EL1_ref),
    ((''MVFR1_EL1''), register_ops_of MVFR1_EL1_ref),
    ((''MVFR0_EL1''), register_ops_of MVFR0_EL1_ref),
    ((''VPIDR_EL2''), register_ops_of VPIDR_EL2_ref),
    ((''MIDR_EL1''), register_ops_of MIDR_EL1_ref),
    ((''MDRAR_EL1''), register_ops_of MDRAR_EL1_ref),
    ((''MDCCINT_EL1''), register_ops_of MDCCINT_EL1_ref),
    ((''LORSA_EL1''), register_ops_of LORSA_EL1_ref),
    ((''LORN_EL1''), register_ops_of LORN_EL1_ref),
    ((''LORID_EL1''), register_ops_of LORID_EL1_ref),
    ((''LOREA_EL1''), register_ops_of LOREA_EL1_ref),
    ((''LORC_EL1''), register_ops_of LORC_EL1_ref),
    ((''ISR_EL1''), register_ops_of ISR_EL1_ref),
    ((''ID_PFR2_EL1''), register_ops_of ID_PFR2_EL1_ref),
    ((''ID_PFR1_EL1''), register_ops_of ID_PFR1_EL1_ref),
    ((''ID_PFR0_EL1''), register_ops_of ID_PFR0_EL1_ref),
    ((''ID_MMFR5_EL1''), register_ops_of ID_MMFR5_EL1_ref),
    ((''ID_MMFR4_EL1''), register_ops_of ID_MMFR4_EL1_ref),
    ((''ID_MMFR3_EL1''), register_ops_of ID_MMFR3_EL1_ref),
    ((''ID_MMFR2_EL1''), register_ops_of ID_MMFR2_EL1_ref),
    ((''ID_MMFR1_EL1''), register_ops_of ID_MMFR1_EL1_ref),
    ((''ID_MMFR0_EL1''), register_ops_of ID_MMFR0_EL1_ref),
    ((''ID_ISAR6_EL1''), register_ops_of ID_ISAR6_EL1_ref),
    ((''ID_ISAR5_EL1''), register_ops_of ID_ISAR5_EL1_ref),
    ((''ID_ISAR4_EL1''), register_ops_of ID_ISAR4_EL1_ref),
    ((''ID_ISAR3_EL1''), register_ops_of ID_ISAR3_EL1_ref),
    ((''ID_ISAR2_EL1''), register_ops_of ID_ISAR2_EL1_ref),
    ((''ID_ISAR1_EL1''), register_ops_of ID_ISAR1_EL1_ref),
    ((''ID_ISAR0_EL1''), register_ops_of ID_ISAR0_EL1_ref),
    ((''ID_DFR1_EL1''), register_ops_of ID_DFR1_EL1_ref),
    ((''ID_DFR0_EL1''), register_ops_of ID_DFR0_EL1_ref),
    ((''ID_AFR0_EL1''), register_ops_of ID_AFR0_EL1_ref),
    ((''ID_AA64ZFR0_EL1''), register_ops_of ID_AA64ZFR0_EL1_ref),
    ((''ID_AA64SMFR0_EL1''), register_ops_of ID_AA64SMFR0_EL1_ref),
    ((''ID_AA64PFR1_EL1''), register_ops_of ID_AA64PFR1_EL1_ref),
    ((''ID_AA64PFR0_EL1''), register_ops_of ID_AA64PFR0_EL1_ref),
    ((''ID_AA64MMFR2_EL1''), register_ops_of ID_AA64MMFR2_EL1_ref),
    ((''ID_AA64MMFR1_EL1''), register_ops_of ID_AA64MMFR1_EL1_ref),
    ((''ID_AA64MMFR0_EL1''), register_ops_of ID_AA64MMFR0_EL1_ref),
    ((''ID_AA64ISAR2_EL1''), register_ops_of ID_AA64ISAR2_EL1_ref),
    ((''ID_AA64ISAR1_EL1''), register_ops_of ID_AA64ISAR1_EL1_ref),
    ((''ID_AA64ISAR0_EL1''), register_ops_of ID_AA64ISAR0_EL1_ref),
    ((''ID_AA64DFR1_EL1''), register_ops_of ID_AA64DFR1_EL1_ref),
    ((''ID_AA64DFR0_EL1''), register_ops_of ID_AA64DFR0_EL1_ref),
    ((''ID_AA64AFR1_EL1''), register_ops_of ID_AA64AFR1_EL1_ref),
    ((''ID_AA64AFR0_EL1''), register_ops_of ID_AA64AFR0_EL1_ref),
    ((''ICV_NMIAR1_EL1''), register_ops_of ICV_NMIAR1_EL1_ref),
    ((''ICC_NMIAR1_EL1''), register_ops_of ICC_NMIAR1_EL1_ref),
    ((''ICV_BPR1_EL1''), register_ops_of ICV_BPR1_EL1_ref),
    ((''ICC_BPR1_EL1_S''), register_ops_of ICC_BPR1_EL1_S_ref),
    ((''ICC_BPR1_EL1_NS''), register_ops_of ICC_BPR1_EL1_NS_ref),
    ((''ICH_VTR_EL2''), register_ops_of ICH_VTR_EL2_ref),
    ((''ICH_VMCR_EL2''), register_ops_of ICH_VMCR_EL2_ref),
    ((''ICH_MISR_EL2''), register_ops_of ICH_MISR_EL2_ref),
    ((''ICH_LR_EL2''), register_ops_of ICH_LR_EL2_ref),
    ((''ICH_ELRSR_EL2''), register_ops_of ICH_ELRSR_EL2_ref),
    ((''ICH_EISR_EL2''), register_ops_of ICH_EISR_EL2_ref),
    ((''ICH_AP1R_EL2''), register_ops_of ICH_AP1R_EL2_ref),
    ((''ICH_AP0R_EL2''), register_ops_of ICH_AP0R_EL2_ref),
    ((''ICV_RPR_EL1''), register_ops_of ICV_RPR_EL1_ref),
    ((''ICC_RPR_EL1''), register_ops_of ICC_RPR_EL1_ref),
    ((''ICV_PMR_EL1''), register_ops_of ICV_PMR_EL1_ref),
    ((''ICC_IGRPEN1_EL3''), register_ops_of ICC_IGRPEN1_EL3_ref),
    ((''ICV_IGRPEN1_EL1''), register_ops_of ICV_IGRPEN1_EL1_ref),
    ((''ICC_IGRPEN1_EL1_S''), register_ops_of ICC_IGRPEN1_EL1_S_ref),
    ((''ICC_IGRPEN1_EL1_NS''), register_ops_of ICC_IGRPEN1_EL1_NS_ref),
    ((''ICV_IGRPEN0_EL1''), register_ops_of ICV_IGRPEN0_EL1_ref),
    ((''ICC_IGRPEN0_EL1''), register_ops_of ICC_IGRPEN0_EL1_ref),
    ((''ICV_IAR1_EL1''), register_ops_of ICV_IAR1_EL1_ref),
    ((''ICC_IAR1_EL1''), register_ops_of ICC_IAR1_EL1_ref),
    ((''ICV_IAR0_EL1''), register_ops_of ICV_IAR0_EL1_ref),
    ((''ICC_IAR0_EL1''), register_ops_of ICC_IAR0_EL1_ref),
    ((''ICV_HPPIR1_EL1''), register_ops_of ICV_HPPIR1_EL1_ref),
    ((''ICC_HPPIR1_EL1''), register_ops_of ICC_HPPIR1_EL1_ref),
    ((''ICV_HPPIR0_EL1''), register_ops_of ICV_HPPIR0_EL1_ref),
    ((''ICC_HPPIR0_EL1''), register_ops_of ICC_HPPIR0_EL1_ref),
    ((''ICC_CTLR_EL3''), register_ops_of ICC_CTLR_EL3_ref),
    ((''ICV_CTLR_EL1''), register_ops_of ICV_CTLR_EL1_ref),
    ((''ICC_CTLR_EL1_S''), register_ops_of ICC_CTLR_EL1_S_ref),
    ((''ICC_CTLR_EL1_NS''), register_ops_of ICC_CTLR_EL1_NS_ref),
    ((''ICV_BPR0_EL1''), register_ops_of ICV_BPR0_EL1_ref),
    ((''ICC_BPR0_EL1''), register_ops_of ICC_BPR0_EL1_ref),
    ((''ICV_AP1R_EL1''), register_ops_of ICV_AP1R_EL1_ref),
    ((''ICC_AP1R_EL1_S''), register_ops_of ICC_AP1R_EL1_S_ref),
    ((''ICC_AP1R_EL1_NS''), register_ops_of ICC_AP1R_EL1_NS_ref),
    ((''ICV_AP0R_EL1''), register_ops_of ICV_AP0R_EL1_ref),
    ((''ICH_HCR_EL2''), register_ops_of ICH_HCR_EL2_ref),
    ((''ICC_SRE_EL3''), register_ops_of ICC_SRE_EL3_ref),
    ((''ICC_SRE_EL2''), register_ops_of ICC_SRE_EL2_ref),
    ((''ICC_SRE_EL1_S''), register_ops_of ICC_SRE_EL1_S_ref),
    ((''ICC_SRE_EL1_NS''), register_ops_of ICC_SRE_EL1_NS_ref),
    ((''ICC_AP0R_EL1''), register_ops_of ICC_AP0R_EL1_ref),
    ((''HSTR_EL2''), register_ops_of HSTR_EL2_ref),
    ((''HFGWTR_EL2''), register_ops_of HFGWTR_EL2_ref),
    ((''HFGITR_EL2''), register_ops_of HFGITR_EL2_ref),
    ((''HDFGWTR_EL2''), register_ops_of HDFGWTR_EL2_ref),
    ((''HACR_EL2''), register_ops_of HACR_EL2_ref),
    ((''GMID_EL1''), register_ops_of GMID_EL1_ref),
    ((''GCR_EL1''), register_ops_of GCR_EL1_ref),
    ((''FPEXC32_EL2''), register_ops_of FPEXC32_EL2_ref),
    ((''ERXSTATUS_EL1''), register_ops_of ERXSTATUS_EL1_ref),
    ((''ERXPFGF_EL1''), register_ops_of ERXPFGF_EL1_ref),
    ((''ERXPFGCTL_EL1''), register_ops_of ERXPFGCTL_EL1_ref),
    ((''ERXPFGCDN_EL1''), register_ops_of ERXPFGCDN_EL1_ref),
    ((''ERXMISC3_EL1''), register_ops_of ERXMISC3_EL1_ref),
    ((''ERXMISC2_EL1''), register_ops_of ERXMISC2_EL1_ref),
    ((''ERXMISC1_EL1''), register_ops_of ERXMISC1_EL1_ref),
    ((''ERXMISC0_EL1''), register_ops_of ERXMISC0_EL1_ref),
    ((''ERXFR_EL1''), register_ops_of ERXFR_EL1_ref),
    ((''ERXCTLR_EL1''), register_ops_of ERXCTLR_EL1_ref),
    ((''ERXADDR_EL1''), register_ops_of ERXADDR_EL1_ref),
    ((''ERRSELR_EL1''), register_ops_of ERRSELR_EL1_ref),
    ((''ERRIDR_EL1''), register_ops_of ERRIDR_EL1_ref),
    ((''DCZID_EL0''), register_ops_of DCZID_EL0_ref),
    ((''DBGVCR32_EL2''), register_ops_of DBGVCR32_EL2_ref),
    ((''DBGDTR_EL0''), register_ops_of DBGDTR_EL0_ref),
    ((''DBGDTRRX_EL0''), register_ops_of DBGDTRRX_EL0_ref),
    ((''DBGCLAIMSET_EL1''), register_ops_of DBGCLAIMSET_EL1_ref),
    ((''DBGCLAIMCLR_EL1''), register_ops_of DBGCLAIMCLR_EL1_ref),
    ((''DBGAUTHSTATUS_EL1''), register_ops_of DBGAUTHSTATUS_EL1_ref),
    ((''DACR32_EL2''), register_ops_of DACR32_EL2_ref),
    ((''CSSELR_EL1''), register_ops_of CSSELR_EL1_ref),
    ((''CNTPS_CVAL_EL1''), register_ops_of CNTPS_CVAL_EL1_ref),
    ((''CNTPS_CTL_EL1''), register_ops_of CNTPS_CTL_EL1_ref),
    ((''CNTVOFF_EL2''), register_ops_of CNTVOFF_EL2_ref),
    ((''CNTV_CVAL_EL0''), register_ops_of CNTV_CVAL_EL0_ref),
    ((''CNTHV_CVAL_EL2''), register_ops_of CNTHV_CVAL_EL2_ref),
    ((''CNTHVS_CVAL_EL2''), register_ops_of CNTHVS_CVAL_EL2_ref),
    ((''CNTV_CTL_EL0''), register_ops_of CNTV_CTL_EL0_ref),
    ((''CNTHV_CTL_EL2''), register_ops_of CNTHV_CTL_EL2_ref),
    ((''CNTHVS_CTL_EL2''), register_ops_of CNTHVS_CTL_EL2_ref),
    ((''CNTP_CVAL_EL0''), register_ops_of CNTP_CVAL_EL0_ref),
    ((''CNTP_CTL_EL0''), register_ops_of CNTP_CTL_EL0_ref),
    ((''CNTPOFF_EL2''), register_ops_of CNTPOFF_EL2_ref),
    ((''CNTHP_CVAL_EL2''), register_ops_of CNTHP_CVAL_EL2_ref),
    ((''CNTHP_CTL_EL2''), register_ops_of CNTHP_CTL_EL2_ref),
    ((''CNTHPS_CVAL_EL2''), register_ops_of CNTHPS_CVAL_EL2_ref),
    ((''CNTHPS_CTL_EL2''), register_ops_of CNTHPS_CTL_EL2_ref),
    ((''CNTKCTL_EL1''), register_ops_of CNTKCTL_EL1_ref),
    ((''CNTHCTL_EL2''), register_ops_of CNTHCTL_EL2_ref),
    ((''CNTFRQ_EL0''), register_ops_of CNTFRQ_EL0_ref),
    ((''CCSIDR_EL1''), register_ops_of CCSIDR_EL1_ref),
    ((''CCSIDR2_EL1''), register_ops_of CCSIDR2_EL1_ref),
    ((''BRBTS_EL1''), register_ops_of BRBTS_EL1_ref),
    ((''BRBTGT_EL1''), register_ops_of BRBTGT_EL1_ref),
    ((''BRBTGTINJ_EL1''), register_ops_of BRBTGTINJ_EL1_ref),
    ((''BRBSRC_EL1''), register_ops_of BRBSRC_EL1_ref),
    ((''BRBSRCINJ_EL1''), register_ops_of BRBSRCINJ_EL1_ref),
    ((''BRBINF_EL1''), register_ops_of BRBINF_EL1_ref),
    ((''BRBINFINJ_EL1''), register_ops_of BRBINFINJ_EL1_ref),
    ((''HDFGRTR_EL2''), register_ops_of HDFGRTR_EL2_ref),
    ((''APIBKeyLo_EL1''), register_ops_of APIBKeyLo_EL1_ref),
    ((''APIBKeyHi_EL1''), register_ops_of APIBKeyHi_EL1_ref),
    ((''APIAKeyLo_EL1''), register_ops_of APIAKeyLo_EL1_ref),
    ((''APIAKeyHi_EL1''), register_ops_of APIAKeyHi_EL1_ref),
    ((''APGAKeyLo_EL1''), register_ops_of APGAKeyLo_EL1_ref),
    ((''APGAKeyHi_EL1''), register_ops_of APGAKeyHi_EL1_ref),
    ((''APDBKeyLo_EL1''), register_ops_of APDBKeyLo_EL1_ref),
    ((''APDBKeyHi_EL1''), register_ops_of APDBKeyHi_EL1_ref),
    ((''APDAKeyLo_EL1''), register_ops_of APDAKeyLo_EL1_ref),
    ((''APDAKeyHi_EL1''), register_ops_of APDAKeyHi_EL1_ref),
    ((''AMEVTYPER1_EL0''), register_ops_of AMEVTYPER1_EL0_ref),
    ((''AMEVTYPER0_EL0''), register_ops_of AMEVTYPER0_EL0_ref),
    ((''AMEVCNTVOFF1_EL2''), register_ops_of AMEVCNTVOFF1_EL2_ref),
    ((''AMEVCNTVOFF0_EL2''), register_ops_of AMEVCNTVOFF0_EL2_ref),
    ((''AMEVCNTR1_EL0''), register_ops_of AMEVCNTR1_EL0_ref),
    ((''AMEVCNTR0''), register_ops_of AMEVCNTR0_ref),
    ((''AMCR_EL0''), register_ops_of AMCR_EL0_ref),
    ((''AMCNTENSET1_EL0''), register_ops_of AMCNTENSET1_EL0_ref),
    ((''AMCNTENSET0_EL0''), register_ops_of AMCNTENSET0_EL0_ref),
    ((''AMCNTENCLR1_EL0''), register_ops_of AMCNTENCLR1_EL0_ref),
    ((''HAFGRTR_EL2''), register_ops_of HAFGRTR_EL2_ref),
    ((''AMCNTENCLR0_EL0''), register_ops_of AMCNTENCLR0_EL0_ref),
    ((''AMCGCR_EL0''), register_ops_of AMCGCR_EL0_ref),
    ((''AMCG1IDR_EL0''), register_ops_of AMCG1IDR_EL0_ref),
    ((''AMUSERENR_EL0''), register_ops_of AMUSERENR_EL0_ref),
    ((''AMCFGR_EL0''), register_ops_of AMCFGR_EL0_ref),
    ((''AMAIR_EL3''), register_ops_of AMAIR_EL3_ref),
    ((''AMAIR_EL2''), register_ops_of AMAIR_EL2_ref),
    ((''AMAIR_EL1''), register_ops_of AMAIR_EL1_ref),
    ((''AIDR_EL1''), register_ops_of AIDR_EL1_ref),
    ((''AFSR1_EL3''), register_ops_of AFSR1_EL3_ref),
    ((''AFSR1_EL2''), register_ops_of AFSR1_EL2_ref),
    ((''AFSR1_EL1''), register_ops_of AFSR1_EL1_ref),
    ((''AFSR0_EL3''), register_ops_of AFSR0_EL3_ref),
    ((''AFSR0_EL2''), register_ops_of AFSR0_EL2_ref),
    ((''AFSR0_EL1''), register_ops_of AFSR0_EL1_ref),
    ((''ACTLR_EL3''), register_ops_of ACTLR_EL3_ref),
    ((''ACTLR_EL2''), register_ops_of ACTLR_EL2_ref),
    ((''VNCR_EL2''), register_ops_of VNCR_EL2_ref),
    ((''__tlb_enabled''), register_ops_of tlb_enabled_ref),
    ((''VSTTBR_EL2''), register_ops_of VSTTBR_EL2_ref),
    ((''VSTCR_EL2''), register_ops_of VSTCR_EL2_ref),
    ((''TTBR0_EL3''), register_ops_of TTBR0_EL3_ref),
    ((''TTBR1_EL2''), register_ops_of TTBR1_EL2_ref),
    ((''TTBR0_EL2''), register_ops_of TTBR0_EL2_ref),
    ((''TTBR1_EL1''), register_ops_of TTBR1_EL1_ref),
    ((''TTBR0_EL1''), register_ops_of TTBR0_EL1_ref),
    ((''InGuardedPage''), register_ops_of InGuardedPage_ref),
    ((''GPTBR_EL3''), register_ops_of GPTBR_EL3_ref),
    ((''GPCCR_EL3''), register_ops_of GPCCR_EL3_ref),
    ((''MPAMSM_EL1''), register_ops_of MPAMSM_EL1_ref),
    ((''MPAM0_EL1''), register_ops_of MPAM0_EL1_ref),
    ((''MPAMVPM7_EL2''), register_ops_of MPAMVPM7_EL2_ref),
    ((''MPAMVPM6_EL2''), register_ops_of MPAMVPM6_EL2_ref),
    ((''MPAMVPM5_EL2''), register_ops_of MPAMVPM5_EL2_ref),
    ((''MPAMVPM4_EL2''), register_ops_of MPAMVPM4_EL2_ref),
    ((''MPAMVPM3_EL2''), register_ops_of MPAMVPM3_EL2_ref),
    ((''MPAMVPM2_EL2''), register_ops_of MPAMVPM2_EL2_ref),
    ((''MPAMVPM1_EL2''), register_ops_of MPAMVPM1_EL2_ref),
    ((''MPAMVPMV_EL2''), register_ops_of MPAMVPMV_EL2_ref),
    ((''MPAMVPM0_EL2''), register_ops_of MPAMVPM0_EL2_ref),
    ((''MPAMHCR_EL2''), register_ops_of MPAMHCR_EL2_ref),
    ((''_MPAM1_EL1_0_62''), register_ops_of MPAM1_EL1_0_62_ref),
    ((''MPAMIDR_EL1''), register_ops_of MPAMIDR_EL1_ref),
    ((''_MPAM2_EL2_0_62''), register_ops_of MPAM2_EL2_0_62_ref),
    ((''MPAM3_EL3''), register_ops_of MPAM3_EL3_ref),
    ((''MAIR_EL3''), register_ops_of MAIR_EL3_ref),
    ((''MAIR_EL2''), register_ops_of MAIR_EL2_ref),
    ((''MAIR_EL1''), register_ops_of MAIR_EL1_ref),
    ((''SDER32_EL2''), register_ops_of SDER32_EL2_ref),
    ((''EDWAR''), register_ops_of EDWAR_ref),
    ((''DBGWVR_EL1''), register_ops_of DBGWVR_EL1_ref),
    ((''DBGWCR_EL1''), register_ops_of DBGWCR_EL1_ref),
    ((''OSLSR_EL1''), register_ops_of OSLSR_EL1_ref),
    ((''VTTBR_EL2''), register_ops_of VTTBR_EL2_ref),
    ((''VTCR_EL2''), register_ops_of VTCR_EL2_ref),
    ((''DBGBVR_EL1''), register_ops_of DBGBVR_EL1_ref),
    ((''DBGBCR_EL1''), register_ops_of DBGBCR_EL1_ref),
    ((''CONTEXTIDR_EL2''), register_ops_of CONTEXTIDR_EL2_ref),
    ((''CONTEXTIDR_EL1''), register_ops_of CONTEXTIDR_EL1_ref),
    ((''TFSR_EL3''), register_ops_of TFSR_EL3_ref),
    ((''TFSR_EL2''), register_ops_of TFSR_EL2_ref),
    ((''TFSR_EL1''), register_ops_of TFSR_EL1_ref),
    ((''TFSRE0_EL1''), register_ops_of TFSRE0_EL1_ref),
    ((''_DBGDSCRint_16_28''), register_ops_of DBGDSCRint_16_28_ref),
    ((''MDSCR_EL1''), register_ops_of MDSCR_EL1_ref),
    ((''TTBCR_S''), register_ops_of TTBCR_S_ref),
    ((''IFSR_S''), register_ops_of IFSR_S_ref),
    ((''IFSR32_EL2''), register_ops_of IFSR32_EL2_ref),
    ((''DFSR_S''), register_ops_of DFSR_S_ref),
    ((''MVBAR''), register_ops_of MVBAR_ref),
    ((''ACTLR_EL1''), register_ops_of ACTLR_EL1_ref),
    ((''HFGRTR_EL2''), register_ops_of HFGRTR_EL2_ref),
    ((''ACCDATA_EL1''), register_ops_of ACCDATA_EL1_ref),
    ((''VBAR_S''), register_ops_of VBAR_S_ref),
    ((''VBAR_EL3''), register_ops_of VBAR_EL3_ref),
    ((''VBAR_EL2''), register_ops_of VBAR_EL2_ref),
    ((''VBAR_EL1''), register_ops_of VBAR_EL1_ref),
    ((''SPSR_und''), register_ops_of SPSR_und_ref),
    ((''SPSR_mon''), register_ops_of SPSR_mon_ref),
    ((''SPSR_irq''), register_ops_of SPSR_irq_ref),
    ((''SPSR_fiq''), register_ops_of SPSR_fiq_ref),
    ((''SPSR_abt''), register_ops_of SPSR_abt_ref),
    ((''SPSR_EL3''), register_ops_of SPSR_EL3_ref),
    ((''SPSR_EL2''), register_ops_of SPSR_EL2_ref),
    ((''SPSR_EL1''), register_ops_of SPSR_EL1_ref),
    ((''SCTLR_S''), register_ops_of SCTLR_S_ref),
    ((''SCTLR_EL3''), register_ops_of SCTLR_EL3_ref),
    ((''SCTLR_EL2''), register_ops_of SCTLR_EL2_ref),
    ((''SCTLR_EL1''), register_ops_of SCTLR_EL1_ref),
    ((''_ZA''), register_ops_of ZA_ref),
    ((''_Z''), register_ops_of Z_ref),
    ((''SP_EL3''), register_ops_of SP_EL3_ref),
    ((''SP_EL2''), register_ops_of SP_EL2_ref),
    ((''SP_EL1''), register_ops_of SP_EL1_ref),
    ((''SP_EL0''), register_ops_of SP_EL0_ref),
    ((''_P''), register_ops_of P_ref),
    ((''NSACR''), register_ops_of NSACR_ref),
    ((''CPTR_EL3''), register_ops_of CPTR_EL3_ref),
    ((''CPTR_EL2''), register_ops_of CPTR_EL2_ref),
    ((''CPACR_EL1''), register_ops_of CPACR_EL1_ref),
    ((''_FFR''), register_ops_of FFR_ref),
    ((''SMCR_EL3''), register_ops_of SMCR_EL3_ref),
    ((''SMCR_EL2''), register_ops_of SMCR_EL2_ref),
    ((''SMCR_EL1''), register_ops_of SMCR_EL1_ref),
    ((''__max_implemented_smeveclen''), register_ops_of max_implemented_smeveclen_ref),
    ((''ZCR_EL3''), register_ops_of ZCR_EL3_ref),
    ((''ZCR_EL2''), register_ops_of ZCR_EL2_ref),
    ((''ZCR_EL1''), register_ops_of ZCR_EL1_ref),
    ((''ELR_EL3''), register_ops_of ELR_EL3_ref),
    ((''ELR_EL2''), register_ops_of ELR_EL2_ref),
    ((''ELR_EL1''), register_ops_of ELR_EL1_ref),
    ((''RTPIDEN''), register_ops_of RTPIDEN_ref),
    ((''RLPIDEN''), register_ops_of RLPIDEN_ref),
    ((''DBGPRCR_EL1''), register_ops_of DBGPRCR_EL1_ref),
    ((''OSDLR_EL1''), register_ops_of OSDLR_EL1_ref),
    ((''SPIDEN''), register_ops_of SPIDEN_ref),
    ((''DBGEN''), register_ops_of DBGEN_ref),
    ((''_EDSCR_31_31''), register_ops_of EDSCR_31_31_ref),
    ((''_EDSCR_0_28''), register_ops_of EDSCR_0_28_ref),
    ((''MDCCSR_EL0''), register_ops_of MDCCSR_EL0_ref),
    ((''DSPSR_EL0''), register_ops_of DSPSR_EL0_ref),
    ((''DLR_EL0''), register_ops_of DLR_EL0_ref),
    ((''OSECCR_EL1''), register_ops_of OSECCR_EL1_ref),
    ((''__BranchTaken''), register_ops_of BranchTaken_ref),
    ((''_PC''), register_ops_of PC_ref),
    ((''SP_mon''), register_ops_of SP_mon_ref),
    ((''LR_mon''), register_ops_of LR_mon_ref),
    ((''TCR_EL3''), register_ops_of TCR_EL3_ref),
    ((''TCR_EL2''), register_ops_of TCR_EL2_ref),
    ((''TCR_EL1''), register_ops_of TCR_EL1_ref),
    ((''Records_TGT''), register_ops_of Records_TGT_ref),
    ((''Records_SRC''), register_ops_of Records_SRC_ref),
    ((''Records_INF''), register_ops_of Records_INF_ref),
    ((''BRBIDR0_EL1''), register_ops_of BRBIDR0_EL1_ref),
    ((''TSTATE''), register_ops_of TSTATE_ref),
    ((''ICC_PMR_EL1''), register_ops_of ICC_PMR_EL1_ref),
    ((''PMUEventAccumulator''), register_ops_of PMUEventAccumulator_ref),
    ((''PMEVTYPER_EL0''), register_ops_of PMEVTYPER_EL0_ref),
    ((''PMCR_EL0''), register_ops_of PMCR_EL0_ref),
    ((''MDCR_EL2''), register_ops_of MDCR_EL2_ref),
    ((''MDCR_EL3''), register_ops_of MDCR_EL3_ref),
    ((''__last_branch_valid''), register_ops_of last_branch_valid_ref),
    ((''__last_cycle_count''), register_ops_of last_cycle_count_ref),
    ((''BRBFCR_EL1''), register_ops_of BRBFCR_EL1_ref),
    ((''BRBCR_EL2''), register_ops_of BRBCR_EL2_ref),
    ((''BRBCR_EL1''), register_ops_of BRBCR_EL1_ref),
    ((''MFAR_EL3''), register_ops_of MFAR_EL3_ref),
    ((''HPFAR_EL2''), register_ops_of HPFAR_EL2_ref),
    ((''FAR_EL3''), register_ops_of FAR_EL3_ref),
    ((''FAR_EL2''), register_ops_of FAR_EL2_ref),
    ((''FAR_EL1''), register_ops_of FAR_EL1_ref),
    ((''ESR_EL3''), register_ops_of ESR_EL3_ref),
    ((''ESR_EL2''), register_ops_of ESR_EL2_ref),
    ((''ESR_EL1''), register_ops_of ESR_EL1_ref),
    ((''__ThisInstrEnc''), register_ops_of ThisInstrEnc_ref),
    ((''R30''), register_ops_of R30_ref),
    ((''R29''), register_ops_of R29_ref),
    ((''R28''), register_ops_of R28_ref),
    ((''R27''), register_ops_of R27_ref),
    ((''R26''), register_ops_of R26_ref),
    ((''R25''), register_ops_of R25_ref),
    ((''R24''), register_ops_of R24_ref),
    ((''R23''), register_ops_of R23_ref),
    ((''R22''), register_ops_of R22_ref),
    ((''R21''), register_ops_of R21_ref),
    ((''R20''), register_ops_of R20_ref),
    ((''R19''), register_ops_of R19_ref),
    ((''R18''), register_ops_of R18_ref),
    ((''R17''), register_ops_of R17_ref),
    ((''R16''), register_ops_of R16_ref),
    ((''R15''), register_ops_of R15_ref),
    ((''R14''), register_ops_of R14_ref),
    ((''R13''), register_ops_of R13_ref),
    ((''R12''), register_ops_of R12_ref),
    ((''R11''), register_ops_of R11_ref),
    ((''R10''), register_ops_of R10_ref),
    ((''R9''), register_ops_of R9_ref),
    ((''R8''), register_ops_of R8_ref),
    ((''R7''), register_ops_of R7_ref),
    ((''R6''), register_ops_of R6_ref),
    ((''R5''), register_ops_of R5_ref),
    ((''R4''), register_ops_of R4_ref),
    ((''R3''), register_ops_of R3_ref),
    ((''R2''), register_ops_of R2_ref),
    ((''R1''), register_ops_of R1_ref),
    ((''R0''), register_ops_of R0_ref),
    ((''__ThisInstr''), register_ops_of ThisInstr_ref),
    ((''__unpred_tsize_aborts''), register_ops_of unpred_tsize_aborts_ref),
    ((''__ICACHE_CCSIDR_RESET''), register_ops_of ICACHE_CCSIDR_RESET_ref),
    ((''__DCACHE_CCSIDR_RESET''), register_ops_of DCACHE_CCSIDR_RESET_ref),
    ((''CLIDR_EL1''), register_ops_of CLIDR_EL1_ref),
    ((''__cycle_count''), register_ops_of cycle_count_ref),
    ((''HCRX_EL2''), register_ops_of HCRX_EL2_ref),
    ((''SCR''), register_ops_of SCR_ref),
    ((''SCR_EL3''), register_ops_of SCR_EL3_ref),
    ((''HCR_EL2''), register_ops_of HCR_EL2_ref),
    ((''__trcclaim_tags''), register_ops_of trcclaim_tags_ref),
    ((''__claim_tags''), register_ops_of claim_tags_ref),
    ((''ERRnFR''), register_ops_of ERRnFR_ref),
    ((''RVBAR''), register_ops_of RVBAR_ref),
    ((''FPSR''), register_ops_of FPSR_ref),
    ((''FPCR''), register_ops_of FPCR_ref),
    ((''__mpam_vpmr_max''), register_ops_of mpam_vpmr_max_ref),
    ((''__mpam_pmg_max''), register_ops_of mpam_pmg_max_ref),
    ((''__mpam_partid_max''), register_ops_of mpam_partid_max_ref),
    ((''__mpam_has_hcr''), register_ops_of mpam_has_hcr_ref),
    ((''__impdef_res_TG1''), register_ops_of impdef_res_TG1_ref),
    ((''__impdef_res_TG0''), register_ops_of impdef_res_TG0_ref),
    ((''PhysicalCount''), register_ops_of PhysicalCount_ref),
    ((''CFG_RVBAR''), register_ops_of CFG_RVBAR_ref),
    ((''__supported_va_size''), register_ops_of supported_va_size_ref),
    ((''__supported_pa_size''), register_ops_of supported_pa_size_ref),
    ((''__num_watchpoints''), register_ops_of num_watchpoints_ref),
    ((''__num_event_counters''), register_ops_of num_event_counters_ref),
    ((''__num_ctx_breakpoints''), register_ops_of num_ctx_breakpoints_ref),
    ((''__num_breakpoints''), register_ops_of num_breakpoints_ref),
    ((''__num_brb_records''), register_ops_of num_brb_records_ref),
    ((''__has_sve_extended_bf16''), register_ops_of has_sve_extended_bf16_ref),
    ((''__block_bbm_implemented''), register_ops_of block_bbm_implemented_ref),
    ((''CTR_EL0''), register_ops_of CTR_EL0_ref),
    ((''__vmid16_implemented''), register_ops_of vmid16_implemented_ref),
    ((''__sme_only''), register_ops_of sme_only_ref),
    ((''__rme_implemented''), register_ops_of rme_implemented_ref),
    ((''__pacqarma5_implemented''), register_ops_of pacqarma5_implemented_ref),
    ((''__pacqarma3_implemented''), register_ops_of pacqarma3_implemented_ref),
    ((''__pac_frac_implemented''), register_ops_of pac_frac_implemented_ref),
    ((''__mte_implemented''), register_ops_of mte_implemented_ref),
    ((''__mpam_implemented''), register_ops_of mpam_implemented_ref),
    ((''__mops_option_a_supported''), register_ops_of mops_option_a_supported_ref),
    ((''__isb_is_branch''), register_ops_of isb_is_branch_ref),
    ((''__highest_el_aarch32''), register_ops_of highest_el_aarch32_ref),
    ((''__has_sme_priority_control''), register_ops_of has_sme_priority_control_ref),
    ((''__has_sme_i16i64''), register_ops_of has_sme_i16i64_ref),
    ((''__has_sme_f64f64''), register_ops_of has_sme_f64f64_ref),
    ((''__has_sme''), register_ops_of has_sme_ref),
    ((''__feat_ls64_v''), register_ops_of feat_ls64_v_ref),
    ((''__feat_ls64_accdata''), register_ops_of feat_ls64_accdata_ref),
    ((''__feat_ls64''), register_ops_of feat_ls64_ref),
    ((''__empam_tidr_implemented''), register_ops_of empam_tidr_implemented_ref),
    ((''__empam_sdeflt_implemented''), register_ops_of empam_sdeflt_implemented_ref),
    ((''__empam_implemented''), register_ops_of empam_implemented_ref),
    ((''__empam_force_ns_implemented''), register_ops_of empam_force_ns_implemented_ref),
    ((''__empam_force_ns_RAO''), register_ops_of empam_force_ns_RAO_ref),
    ((''__crypto_sm4_implemented''), register_ops_of crypto_sm4_implemented_ref),
    ((''__crypto_sm3_implemented''), register_ops_of crypto_sm3_implemented_ref),
    ((''__crypto_sha512_implemented''), register_ops_of crypto_sha512_implemented_ref),
    ((''__crypto_sha3_implemented''), register_ops_of crypto_sha3_implemented_ref),
    ((''__crypto_sha256_implemented''), register_ops_of crypto_sha256_implemented_ref),
    ((''__crypto_sha1_implemented''), register_ops_of crypto_sha1_implemented_ref),
    ((''__crypto_aes_implemented''), register_ops_of crypto_aes_implemented_ref),
    ((''__brbev1p1_implemented''), register_ops_of brbev1p1_implemented_ref),
    ((''__brbe_implemented''), register_ops_of brbe_implemented_ref),
    ((''__apply_effective_shareability''), register_ops_of apply_effective_shareability_ref),
    ((''__aa32_hpd_implemented''), register_ops_of aa32_hpd_implemented_ref),
    ((''PSTATE''), register_ops_of PSTATE_ref),
    ((''SEE''), register_ops_of SEE_ref)
  ])\<close>


definition register_accessors  :: \<open>(string \<Rightarrow> regstate \<Rightarrow>(register_value)option)*(string \<Rightarrow> register_value \<Rightarrow> regstate \<Rightarrow>(regstate)option)\<close>  where 
     \<open> register_accessors = ( mk_accessors ((\<lambda> nm .  Map.map_of registers nm)))\<close>


\<comment> \<open>\<open>val get_regval : string -> regstate -> maybe register_value\<close>\<close>
definition get_regval  :: \<open> string \<Rightarrow> regstate \<Rightarrow>(register_value)option \<close>  where 
     \<open> get_regval = ( fst register_accessors )\<close>


\<comment> \<open>\<open>val set_regval : string -> register_value -> regstate -> maybe regstate\<close>\<close>
definition set_regval  :: \<open> string \<Rightarrow> register_value \<Rightarrow> regstate \<Rightarrow>(regstate)option \<close>  where 
     \<open> set_regval = ( snd register_accessors )\<close>



type_synonym( 'a, 'r) MR =" (Fault, Barrier, unit, ( FaultRecord option), ( 56 Word.word), TLBI, ( TranslationInfo option), arm_acc_type, register_value, regstate, 'a, 'r, exception) base_monadR "
type_synonym 'a M =" (Fault, Barrier, unit, ( FaultRecord option), ( 56 Word.word), TLBI, ( TranslationInfo option), arm_acc_type, register_value, regstate, 'a, exception) base_monad "
end
