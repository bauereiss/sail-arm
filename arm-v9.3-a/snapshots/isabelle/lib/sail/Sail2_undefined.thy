chapter \<open>Generated by Lem from \<open>../../src/gen_lib/sail2_undefined.lem\<close>.\<close>

theory "Sail2_undefined" 

imports
  Main
  "LEM.Lem_pervasives_extra"
  "Sail2_values"
  "Sail2_concurrency_interface"
  "Sail2_monadic_combinators"

begin 

\<comment> \<open>\<open>open import Pervasives_extra\<close>\<close>
\<comment> \<open>\<open>open import Sail2_values\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt_monad
open import Sail2_prompt\<close>\<close>
\<comment> \<open>\<open>open import Sail2_concurrency_interface\<close>\<close>
\<comment> \<open>\<open>open import Sail2_monadic_combinators\<close>\<close>

\<comment> \<open>\<open> Default implementations of "undefined" functions for builtin types via
   nondeterministic choice, for use with the -undefined_gen option of Sail.

   Changes here need to be reflected in ../../lib/hol/sail2_undefined.lem
   (identical except for type class constraints). \<close>\<close>

\<comment> \<open>\<open>val undefined_bitvector : forall 'abort 'barrier 'cache_op 'fault 'pa 'tlb_op 'translation_summary 'arch_ak 'rv 'a 'e. Bitvector 'a, Register_Value 'rv =>
  integer -> monad 'abort 'barrier 'cache_op 'fault 'pa 'tlb_op 'translation_summary 'arch_ak 'rv 'a 'e\<close>\<close>
definition undefined_bitvector  :: \<open> 'a Bitvector_class \<Rightarrow> 'rv Register_Value_class \<Rightarrow> int \<Rightarrow>('abort,'barrier,'cache_op,'fault,'pa,'tlb_op,'translation_summary,'arch_ak,'rv,'a,'e)monad \<close>  where 
     \<open> undefined_bitvector dict_Sail2_values_Bitvector_a dict_Sail2_values_Register_Value_rv n = ( choose_bitvector 
  dict_Sail2_values_Bitvector_a dict_Sail2_values_Register_Value_rv (''undefined_bitvector'') (nat (abs ( n))))\<close> 
  for  "dict_Sail2_values_Bitvector_a"  :: " 'a Bitvector_class " 
  and  "dict_Sail2_values_Register_Value_rv"  :: " 'rv Register_Value_class " 
  and  "n"  :: " int "


definition undefined_unit  :: \<open> unit \<Rightarrow>('j,'i,'h,'g,'f,'e,'d,'c,'b,(unit),'a)monad \<close>  where 
     \<open> undefined_unit _ = ( return ()  )\<close>

definition undefined_bits  :: \<open> 'b Bitvector_class \<Rightarrow> 'c Register_Value_class \<Rightarrow> int \<Rightarrow>('k,'j,'i,'h,'g,'f,'e,'d,'c,'b,'a)monad \<close>  where 
     \<open> undefined_bits dict_Sail2_values_Bitvector_b dict_Sail2_values_Register_Value_c = ( 
  undefined_bitvector dict_Sail2_values_Bitvector_b
    dict_Sail2_values_Register_Value_c )\<close> 
  for  "dict_Sail2_values_Bitvector_b"  :: " 'b Bitvector_class " 
  and  "dict_Sail2_values_Register_Value_c"  :: " 'c Register_Value_class "

definition undefined_bit  :: \<open> 'i Register_Value_class \<Rightarrow> unit \<Rightarrow>('a,'b,'c,'d,'e,'f,'g,'h,'i,(bitU),'j)monad \<close>  where 
     \<open> undefined_bit dict_Sail2_values_Register_Value_i _ = ( choose_bit 
  dict_Sail2_values_Register_Value_i (''undefined_bit''))\<close> 
  for  "dict_Sail2_values_Register_Value_i"  :: " 'i Register_Value_class "

definition undefined_bool  :: \<open> 'j Register_Value_class \<Rightarrow> unit \<Rightarrow>('a,'b,'c,'d,'e,'f,'g,'h,'j,(bool),'i)monad \<close>  where 
     \<open> undefined_bool dict_Sail2_values_Register_Value_j _ = ( choose_bool 
  dict_Sail2_values_Register_Value_j (''undefined_bool''))\<close> 
  for  "dict_Sail2_values_Register_Value_j"  :: " 'j Register_Value_class "

definition undefined_string  :: \<open> 'j Register_Value_class \<Rightarrow> unit \<Rightarrow>('a,'b,'c,'d,'e,'f,'g,'h,'j,(string),'i)monad \<close>  where 
     \<open> undefined_string dict_Sail2_values_Register_Value_j _ = ( choose_string 
  dict_Sail2_values_Register_Value_j (''undefined_string''))\<close> 
  for  "dict_Sail2_values_Register_Value_j"  :: " 'j Register_Value_class "

definition undefined_int  :: \<open> 'j Register_Value_class \<Rightarrow> unit \<Rightarrow>('a,'b,'c,'d,'e,'f,'g,'h,'j,(int),'i)monad \<close>  where 
     \<open> undefined_int dict_Sail2_values_Register_Value_j _ = ( choose_int 
  dict_Sail2_values_Register_Value_j (''undefined_int''))\<close> 
  for  "dict_Sail2_values_Register_Value_j"  :: " 'j Register_Value_class "

definition undefined_nat  :: \<open> 'b Register_Value_class \<Rightarrow> unit \<Rightarrow>('j,'i,'h,'g,'f,'e,'d,'c,'b,(int),'a)monad \<close>  where 
     \<open> undefined_nat dict_Sail2_values_Register_Value_b _ = ( choose_nat 
  dict_Sail2_values_Register_Value_b (''undefined_nat''))\<close> 
  for  "dict_Sail2_values_Register_Value_b"  :: " 'b Register_Value_class "

definition undefined_real  :: \<open> 'j Register_Value_class \<Rightarrow> unit \<Rightarrow>('a,'b,'c,'d,'e,'f,'g,'h,'j,(real),'i)monad \<close>  where 
     \<open> undefined_real dict_Sail2_values_Register_Value_j _ = ( choose_real 
  dict_Sail2_values_Register_Value_j (''undefined_real''))\<close> 
  for  "dict_Sail2_values_Register_Value_j"  :: " 'j Register_Value_class "

definition undefined_range  :: \<open> 'b Register_Value_class \<Rightarrow> int \<Rightarrow> int \<Rightarrow>('j,'i,'h,'g,'f,'e,'d,'c,'b,(int),'a)monad \<close>  where 
     \<open> undefined_range dict_Sail2_values_Register_Value_b i j = ( choose_int_in_range 
  dict_Sail2_values_Register_Value_b (''undefined_range'') i j )\<close> 
  for  "dict_Sail2_values_Register_Value_b"  :: " 'b Register_Value_class " 
  and  "i"  :: " int " 
  and  "j"  :: " int "

definition undefined_atom  :: \<open> 'a \<Rightarrow>('k,'j,'i,'h,'g,'f,'e,'d,'c,'a,'b)monad \<close>  where 
     \<open> undefined_atom i = ( return i )\<close> 
  for  "i"  :: " 'a "


\<comment> \<open>\<open> TODO: Choose each vector element individually \<close>\<close>
\<comment> \<open>\<open>val undefined_vector : forall 'abort 'barrier 'cache_op 'fault 'pa 'tlb_op 'translation_summary 'arch_ak 'rv 'a 'e.
  integer -> 'a -> monad 'abort 'barrier 'cache_op 'fault 'pa 'tlb_op 'translation_summary 'arch_ak 'rv (list 'a) 'e\<close>\<close>
definition undefined_vector  :: \<open> int \<Rightarrow> 'a \<Rightarrow>('abort,'barrier,'cache_op,'fault,'pa,'tlb_op,'translation_summary,'arch_ak,'rv,('a list),'e)monad \<close>  where 
     \<open> undefined_vector len u = ( return (repeat [u] len))\<close> 
  for  "len"  :: " int " 
  and  "u"  :: " 'a "

end
