/******************************************************************************/
/*  BSD 3-clause Clear License                                                */
/*                                                                            */
/*  Copyright (c) 2022                                                        */
/*    Arm Limited (or its affiliates),                                        */
/*    Thomas Bauereiss,                                                       */
/*    Brian Campbell,                                                         */
/*    Alasdair Armstrong,                                                     */
/*    Alastair Reid,                                                          */
/*    Peter Sewell                                                            */
/*                                                                            */
/*  All rights reserved.                                                      */
/*                                                                            */
/*  Redistribution and use in source and binary forms, with or without        */
/*  modification, are permitted (subject to the limitations in the            */
/*  disclaimer below) provided that the following conditions are met:         */
/*                                                                            */
/*    * Redistributions of source code must retain the above copyright        */
/*      notice, this list of conditions and the following disclaimer.         */
/*    * Redistributions in binary form must reproduce the above copyright     */
/*      notice, this list of conditions and the following disclaimer in the   */
/*      documentation and/or other materials provided with the distribution.  */
/*    * Neither the name of ARM Limited nor the names of its contributors     */
/*      may be used to endorse or promote products derived from this          */
/*      software without specific prior written permission.                   */
/*                                                                            */
/*  NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED   */
/*  BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND   */
/*  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,    */
/*  BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND         */
/*  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE   */
/*  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,      */
/*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  */
/*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF      */
/*  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON    */
/*  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   */
/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  */
/*  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.         */
/******************************************************************************/

val execute_aarch32_instrs_ADC_i_Op_A_txt : forall 'd 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), bits(32), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_ADC_i_Op_A_txt (d, imm32, n, setflags) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    (result, nzcv) = AddWithCarry(R_read(n), imm32, PSTATE.C);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_ADC_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_ADC_i_A1enc_A_txt (cond, S, Rn, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = A32ExpandImm(imm12);
        execute_aarch32_instrs_ADC_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2100) = {
    SEE = 2100;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_ADC_i_A1enc_A_txt(cond, S, Rn, Rd, imm12)
}

val decode_aarch32_instrs_ADC_i_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_ADC_i_T1enc_A_txt (i, S, Rn, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = T32ExpandImm((i @ imm3) @ imm8);
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ADC_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2101) = {
    SEE = 2101;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_ADC_i_T1enc_A_txt(i, S, Rn, imm3, Rd, imm8)
}

val execute_aarch32_instrs_ADC_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool) 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_ADC_r_Op_A_txt (d, m, n, setflags, shift_n, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(R_read(n), shifted, PSTATE.C);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_ADC_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_ADC_r_A1enc_A_txt (cond, S, Rn, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_ADC_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2102) = {
    SEE = 2102;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_ADC_r_A1enc_A_txt(cond, S, Rn, Rd, imm5, stype, Rm)
}

val decode_aarch32_instrs_ADC_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_ADC_r_T1enc_A_txt (Rm, Rdn) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rdn);
        let 'n = UInt(Rdn);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_ADC_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 2103) = {
    SEE = 2103;
    let Rm = Slice(__opcode, 3, 3);
    let Rdn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_ADC_r_T1enc_A_txt(Rm, Rdn)
}

val decode_aarch32_instrs_ADC_r_T2enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_ADC_r_T2enc_A_txt (S, Rn, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_ADC_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2104) = {
    SEE = 2104;
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_ADC_r_T2enc_A_txt(S, Rn, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_ADC_rr_Op_A_txt : forall 'd 'm 'n 's ('setflags : Bool),
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('s), bool('setflags), SRType) -> unit

function execute_aarch32_instrs_ADC_rr_Op_A_txt (d, m, n, s, setflags, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(R_read(n), shifted, PSTATE.C);
    R_set(d) = result;
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
    };
    ()
}

val decode_aarch32_instrs_ADC_rr_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_ADC_rr_A1enc_A_txt (cond, S, Rn, Rd, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if ((d == 15 | n == 15) | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ADC_rr_Op_A_txt(d, m, n, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2105) = {
    SEE = 2105;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_ADC_rr_A1enc_A_txt(cond, S, Rn, Rd, Rs, stype, Rm)
}

val execute_aarch32_instrs_ADD_i_OpA_A_txt : forall 'd 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), bits(32), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_ADD_i_OpA_A_txt (d, imm32, n, setflags) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    (result, nzcv) = AddWithCarry(R_read(n), imm32, 0b0);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_ADD_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_ADD_i_A1enc_A_txt (cond, S, Rn, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 & S == 0b0 then {
            throw(Error_See("ADR"))
        };
        if Rn == 0b1101 then {
            throw(Error_See("ADD (SP plus immediate)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = A32ExpandImm(imm12);
        execute_aarch32_instrs_ADD_i_OpA_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2106) = {
    SEE = 2106;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_ADD_i_A1enc_A_txt(cond, S, Rn, Rd, imm12)
}

val execute_aarch32_instrs_ADD_i_OpT_A_txt : forall 'd 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), bits(32), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_ADD_i_OpT_A_txt (d, imm32, n, setflags) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    (result, nzcv) = AddWithCarry(R_read(n), imm32, 0b0);
    R_set(d) = result;
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
    };
    ()
}

val decode_aarch32_instrs_ADD_i_T1enc_A_txt : (bits(3), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_ADD_i_T1enc_A_txt (imm3, Rn, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = not_bool(InITBlock());
        let imm32 : bits(32) = ZeroExtend(imm3, 32);
        execute_aarch32_instrs_ADD_i_OpT_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2107) = {
    SEE = 2107;
    let imm3 = Slice(__opcode, 6, 3);
    let Rn = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_ADD_i_T1enc_A_txt(imm3, Rn, Rd)
}

val decode_aarch32_instrs_ADD_i_T2enc_A_txt : (bits(3), bits(8)) -> unit

function decode_aarch32_instrs_ADD_i_T2enc_A_txt (Rdn, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rdn);
        let 'n = UInt(Rdn);
        let setflags : bool = not_bool(InITBlock());
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        execute_aarch32_instrs_ADD_i_OpT_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2108) = {
    SEE = 2108;
    let Rdn = Slice(__opcode, 8, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_ADD_i_T2enc_A_txt(Rdn, imm8)
}

val decode_aarch32_instrs_ADD_i_T3enc_A_txt : (bits(1), bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_ADD_i_T3enc_A_txt (i, S, Rn, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        if Rd == 0b1111 & S == 0b1 then {
            throw(Error_See("CMN (immediate)"))
        };
        if Rn == 0b1101 then {
            throw(Error_See("ADD (SP plus immediate)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = T32ExpandImm((i @ imm3) @ imm8);
        if d == 15 & not_bool(setflags) | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ADD_i_OpT_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2109) = {
    SEE = 2109;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_ADD_i_T3enc_A_txt(i, S, Rn, imm3, Rd, imm8)
}

val decode_aarch32_instrs_ADD_i_T4enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_ADD_i_T4enc_A_txt (i, Rn, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("ADR"))
        };
        if Rn == 0b1101 then {
            throw(Error_See("ADD (SP plus immediate)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = false;
        let imm32 : bits(32) = ZeroExtend((i @ imm3) @ imm8, 32);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ADD_i_OpT_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2110) = {
    SEE = 2110;
    let i = Slice(__opcode, 26, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_ADD_i_T4enc_A_txt(i, Rn, imm3, Rd, imm8)
}

val execute_aarch32_instrs_ADD_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool) 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_ADD_r_Op_A_txt (d, m, n, setflags, shift_n, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(R_read(n), shifted, 0b0);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_ADD_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_ADD_r_A1enc_A_txt (cond, S, Rn, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1101 then {
            throw(Error_See("ADD (SP plus register)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_ADD_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2111) = {
    SEE = 2111;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_ADD_r_A1enc_A_txt(cond, S, Rn, Rd, imm5, stype, Rm)
}

val decode_aarch32_instrs_ADD_r_T1enc_A_txt : (bits(3), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_ADD_r_T1enc_A_txt (Rm, Rn, Rd) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_ADD_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2112) = {
    SEE = 2112;
    let Rm = Slice(__opcode, 6, 3);
    let Rn = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_ADD_r_T1enc_A_txt(Rm, Rn, Rd)
}

val decode_aarch32_instrs_ADD_r_T2enc_A_txt : (bits(1), bits(4), bits(3)) -> unit

function decode_aarch32_instrs_ADD_r_T2enc_A_txt (DN, Rm, Rdn) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if (DN @ Rdn) == 0b1101 | Rm == 0b1101 then {
            throw(Error_See("ADD (SP plus register)"))
        };
        let 'd = UInt(DN @ Rdn);
        let 'n = d;
        let 'm = UInt(Rm);
        let setflags : bool = false;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        if n == 15 & m == 15 then {
            throw(Error_Unpredictable())
        };
        if (d == 15 & InITBlock()) & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ADD_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2113) = {
    SEE = 2113;
    let DN = Slice(__opcode, 7, 1);
    let Rm = Slice(__opcode, 3, 4);
    let Rdn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_ADD_r_T2enc_A_txt(DN, Rm, Rdn)
}

val decode_aarch32_instrs_ADD_r_T3enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_ADD_r_T3enc_A_txt (S, Rn, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rd == 0b1111 & S == 0b1 then {
            throw(Error_See("CMN (register)"))
        };
        if Rn == 0b1101 then {
            throw(Error_See("ADD (SP plus register)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if (d == 15 & not_bool(setflags) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ADD_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2114) = {
    SEE = 2114;
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_ADD_r_T3enc_A_txt(S, Rn, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_ADD_rr_Op_A_txt : forall 'd 'm 'n 's ('setflags : Bool),
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('s), bool('setflags), SRType) -> unit

function execute_aarch32_instrs_ADD_rr_Op_A_txt (d, m, n, s, setflags, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(R_read(n), shifted, 0b0);
    R_set(d) = result;
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
    };
    ()
}

val decode_aarch32_instrs_ADD_rr_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_ADD_rr_A1enc_A_txt (cond, S, Rn, Rd, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if ((d == 15 | n == 15) | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ADD_rr_Op_A_txt(d, m, n, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2115) = {
    SEE = 2115;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_ADD_rr_A1enc_A_txt(cond, S, Rn, Rd, Rs, stype, Rm)
}

val execute_aarch32_instrs_ADD_SP_i_Op_A_txt : forall 'd ('setflags : Bool), (0 <= 'd & 'd <= 15).
  (int('d), bits(32), bool('setflags)) -> unit

function execute_aarch32_instrs_ADD_SP_i_Op_A_txt (d, imm32, setflags) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    (result, nzcv) = AddWithCarry(SP_read__1(), imm32, 0b0);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_ADD_SP_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_ADD_SP_i_A1enc_A_txt (cond, S, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = A32ExpandImm(imm12);
        execute_aarch32_instrs_ADD_SP_i_Op_A_txt(d, imm32, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2116) = {
    SEE = 2116;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_ADD_SP_i_A1enc_A_txt(cond, S, Rd, imm12)
}

val decode_aarch32_instrs_ADD_SP_i_T1enc_A_txt : (bits(3), bits(8)) -> unit

function decode_aarch32_instrs_ADD_SP_i_T1enc_A_txt (Rd, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let setflags : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        execute_aarch32_instrs_ADD_SP_i_Op_A_txt(d, imm32, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2117) = {
    SEE = 2117;
    let Rd = Slice(__opcode, 8, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_ADD_SP_i_T1enc_A_txt(Rd, imm8)
}

val decode_aarch32_instrs_ADD_SP_i_T2enc_A_txt : bits(7) -> unit

function decode_aarch32_instrs_ADD_SP_i_T2enc_A_txt imm7 = {
    if ConditionPassed() then {
        let 'd = 13;
        let setflags : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm7 @ 0b00, 32);
        execute_aarch32_instrs_ADD_SP_i_Op_A_txt(d, imm32, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _] as __opcode)) if SEE < 2118) = {
    SEE = 2118;
    let imm7 = Slice(__opcode, 0, 7);
    decode_aarch32_instrs_ADD_SP_i_T2enc_A_txt(imm7)
}

val decode_aarch32_instrs_ADD_SP_i_T3enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_ADD_SP_i_T3enc_A_txt (i, S, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        if Rd == 0b1111 & S == 0b1 then {
            throw(Error_See("CMN (immediate)"))
        };
        let 'd = UInt(Rd);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = T32ExpandImm((i @ imm3) @ imm8);
        if d == 15 & not_bool(setflags) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ADD_SP_i_Op_A_txt(d, imm32, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2119) = {
    SEE = 2119;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_ADD_SP_i_T3enc_A_txt(i, S, imm3, Rd, imm8)
}

val decode_aarch32_instrs_ADD_SP_i_T4enc_A_txt : (bits(1), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_ADD_SP_i_T4enc_A_txt (i, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let setflags : bool = false;
        let imm32 : bits(32) = ZeroExtend((i @ imm3) @ imm8, 32);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ADD_SP_i_Op_A_txt(d, imm32, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2120) = {
    SEE = 2120;
    let i = Slice(__opcode, 26, 1);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_ADD_SP_i_T4enc_A_txt(i, imm3, Rd, imm8)
}

val execute_aarch32_instrs_ADD_SP_r_Op_A_txt : forall 'd 'm ('setflags : Bool) 'shift_n,
  (0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_ADD_SP_r_Op_A_txt (d, m, setflags, shift_n, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(SP_read__1(), shifted, 0b0);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_ADD_SP_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_ADD_SP_r_A1enc_A_txt (cond, S, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_ADD_SP_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2121) = {
    SEE = 2121;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_ADD_SP_r_A1enc_A_txt(cond, S, Rd, imm5, stype, Rm)
}

val decode_aarch32_instrs_ADD_SP_r_T1enc_A_txt : (bits(1), bits(3)) -> unit

function decode_aarch32_instrs_ADD_SP_r_T1enc_A_txt (DM, Rdm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(DM @ Rdm);
        let 'm = UInt(DM @ Rdm);
        let setflags : bool = false;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        if (d == 15 & InITBlock()) & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_ADD_SP_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, bitone, bitone, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2122) = {
    SEE = 2122;
    let DM = Slice(__opcode, 7, 1);
    let Rdm = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_ADD_SP_r_T1enc_A_txt(DM, Rdm)
}

val decode_aarch32_instrs_ADD_SP_r_T2enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_ADD_SP_r_T2enc_A_txt Rm = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rm == 0b1101 then {
            throw(Error_See("encoding T1"))
        };
        let 'd = 13;
        let 'm = UInt(Rm);
        let setflags : bool = false;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_ADD_SP_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitzero, bitone] as __opcode)) if SEE < 2123) = {
    SEE = 2123;
    let Rm = Slice(__opcode, 3, 4);
    decode_aarch32_instrs_ADD_SP_r_T2enc_A_txt(Rm)
}

val decode_aarch32_instrs_ADD_SP_r_T3enc_A_txt : (bits(1), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_ADD_SP_r_T3enc_A_txt (S, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rd == 0b1111 & S == 0b1 then {
            throw(Error_See("CMN (register)"))
        };
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if d == 15 & not_bool(setflags) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ADD_SP_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2124) = {
    SEE = 2124;
    let S = Slice(__opcode, 20, 1);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_ADD_SP_r_T3enc_A_txt(S, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_ADR_Op_A_txt : forall ('add : Bool) 'd, (0 <= 'd & 'd <= 15).
  (bool('add), int('d), bits(32)) -> unit

function execute_aarch32_instrs_ADR_Op_A_txt (add, d, imm32) = {
    let result : bits(32) = if add then Align(PC_read__1(), 4) + imm32 else
      Align(PC_read__1(), 4) - imm32;
    if d == 15 then {
        ALUWritePC(result)
    } else {
        R_set(d) = result
    }
}

val decode_aarch32_instrs_ADR_A1enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_ADR_A1enc_A_txt (cond, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let imm32 : bits(32) = A32ExpandImm(imm12);
        let add : bool = true;
        execute_aarch32_instrs_ADR_Op_A_txt(add, d, imm32)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2125) = {
    SEE = 2125;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_ADR_A1enc_A_txt(cond, Rd, imm12)
}

val decode_aarch32_instrs_ADR_A2enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_ADR_A2enc_A_txt (cond, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let imm32 : bits(32) = A32ExpandImm(imm12);
        let add : bool = false;
        execute_aarch32_instrs_ADR_Op_A_txt(add, d, imm32)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2126) = {
    SEE = 2126;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_ADR_A2enc_A_txt(cond, Rd, imm12)
}

val decode_aarch32_instrs_ADR_T1enc_A_txt : (bits(3), bits(8)) -> unit

function decode_aarch32_instrs_ADR_T1enc_A_txt (Rd, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let add : bool = true;
        execute_aarch32_instrs_ADR_Op_A_txt(add, d, imm32)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2127) = {
    SEE = 2127;
    let Rd = Slice(__opcode, 8, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_ADR_T1enc_A_txt(Rd, imm8)
}

val decode_aarch32_instrs_ADR_T2enc_A_txt : (bits(1), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_ADR_T2enc_A_txt (i, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let imm32 : bits(32) = ZeroExtend((i @ imm3) @ imm8, 32);
        let add : bool = false;
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ADR_Op_A_txt(add, d, imm32)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2128) = {
    SEE = 2128;
    let i = Slice(__opcode, 26, 1);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_ADR_T2enc_A_txt(i, imm3, Rd, imm8)
}

val decode_aarch32_instrs_ADR_T3enc_A_txt : (bits(1), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_ADR_T3enc_A_txt (i, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let imm32 : bits(32) = ZeroExtend((i @ imm3) @ imm8, 32);
        let add : bool = true;
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ADR_Op_A_txt(add, d, imm32)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2129) = {
    SEE = 2129;
    let i = Slice(__opcode, 26, 1);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_ADR_T3enc_A_txt(i, imm3, Rd, imm8)
}

val execute_aarch32_instrs_AND_i_Op_A_txt : forall 'd 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (bits(1), int('d), bits(32), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_AND_i_Op_A_txt (carry, d, imm32, n, setflags) = {
    let result : bits(32) = R_read(n) & imm32;
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_AND_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_AND_i_A1enc_A_txt (cond, S, Rn, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        (imm32, carry) = A32ExpandImm_C(imm12, PSTATE.C);
        execute_aarch32_instrs_AND_i_Op_A_txt(carry, d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2130) = {
    SEE = 2130;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_AND_i_A1enc_A_txt(cond, S, Rn, Rd, imm12)
}

val decode_aarch32_instrs_AND_i_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_AND_i_T1enc_A_txt (i, S, Rn, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        if Rd == 0b1111 & S == 0b1 then {
            throw(Error_See("TST (immediate)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        (imm32, carry) = T32ExpandImm_C((i @ imm3) @ imm8, PSTATE.C);
        if d == 15 & not_bool(setflags) | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_AND_i_Op_A_txt(carry, d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2131) = {
    SEE = 2131;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_AND_i_T1enc_A_txt(i, S, Rn, imm3, Rd, imm8)
}

val execute_aarch32_instrs_AND_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool) 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_AND_r_Op_A_txt (d, m, n, setflags, shift_n, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = R_read(n) & shifted;
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_AND_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_AND_r_A1enc_A_txt (cond, S, Rn, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_AND_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2132) = {
    SEE = 2132;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_AND_r_A1enc_A_txt(cond, S, Rn, Rd, imm5, stype, Rm)
}

val decode_aarch32_instrs_AND_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_AND_r_T1enc_A_txt (Rm, Rdn) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rdn);
        let 'n = UInt(Rdn);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_AND_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2133) = {
    SEE = 2133;
    let Rm = Slice(__opcode, 3, 3);
    let Rdn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_AND_r_T1enc_A_txt(Rm, Rdn)
}

val decode_aarch32_instrs_AND_r_T2enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_AND_r_T2enc_A_txt (S, Rn, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rd == 0b1111 & S == 0b1 then {
            throw(Error_See("TST (register)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if (d == 15 & not_bool(setflags) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_AND_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2134) = {
    SEE = 2134;
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_AND_r_T2enc_A_txt(S, Rn, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_AND_rr_Op_A_txt : forall 'd 'm 'n 's ('setflags : Bool),
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('s), bool('setflags), SRType) -> unit

function execute_aarch32_instrs_AND_rr_Op_A_txt (d, m, n, s, setflags, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = R_read(n) & shifted;
    R_set(d) = result;
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result);
        PSTATE.C = carry
    };
    ()
}

val decode_aarch32_instrs_AND_rr_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_AND_rr_A1enc_A_txt (cond, S, Rn, Rd, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if ((d == 15 | n == 15) | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_AND_rr_Op_A_txt(d, m, n, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2135) = {
    SEE = 2135;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_AND_rr_A1enc_A_txt(cond, S, Rn, Rd, Rs, stype, Rm)
}

val execute_aarch32_instrs_ASR_i_Op_A_txt : forall 'd 'm ('setflags : Bool) 'shift_n,
  ('m in {0, 1, 2, 3, 4, 5, 6, 7} & 'd in {0, 1, 2, 3, 4, 5, 6, 7}).
  (int('d), int('m), bool('setflags), int('shift_n)) -> unit

function execute_aarch32_instrs_ASR_i_Op_A_txt (d, m, setflags, shift_n) = {
    carry : bits(1) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    (result, carry) = Shift_C(R_read(m), SRType_ASR, shift_n, PSTATE.C);
    if d == 15 then {
        ALUWritePC(result)
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_ASR_i_T1enc_A_txt : (bits(5), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_ASR_i_T1enc_A_txt (imm5, Rm, Rd) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        let (_, __tup_1 : int) = DecodeImmShift(0b10, imm5) in
          {
              shift_n = __tup_1
          };
        let 'shift_n = shift_n;
        execute_aarch32_instrs_ASR_i_Op_A_txt(d, m, setflags, shift_n)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2136) = {
    SEE = 2136;
    let imm5 = Slice(__opcode, 6, 5);
    let Rm = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_ASR_i_T1enc_A_txt(imm5, Rm, Rd)
}

val execute_aarch32_instrs_ASR_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool),
  ('n in {0, 1, 2, 3, 4, 5, 6, 7} & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'd in {0, 1, 2, 3, 4, 5, 6, 7}).
  (int('d), int('m), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_ASR_r_Op_A_txt (d, m, n, setflags) = {
    carry : bits(1) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(m)[7 .. 0]);
    (result, carry) = Shift_C(R_read(n), SRType_ASR, shift_n, PSTATE.C);
    R_set(d) = result;
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result);
        PSTATE.C = carry
    };
    ()
}

val decode_aarch32_instrs_ASR_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_ASR_r_T1enc_A_txt (Rm, Rdn) = {
    if ConditionPassed() then {
        let 'd = UInt(Rdn);
        let 'n = UInt(Rdn);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        execute_aarch32_instrs_ASR_r_Op_A_txt(d, m, n, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2137) = {
    SEE = 2137;
    let Rm = Slice(__opcode, 3, 3);
    let Rdn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_ASR_r_T1enc_A_txt(Rm, Rdn)
}

val execute_aarch32_instrs_B_Op_A_txt : bits(32) -> unit

function execute_aarch32_instrs_B_Op_A_txt imm32 = {
    BranchWritePC(PC_read__1() + imm32, BranchType_DIR)
}

val decode_aarch32_instrs_B_A1enc_A_txt : (bits(4), bits(24)) -> unit

function decode_aarch32_instrs_B_A1enc_A_txt (cond, imm24) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let imm32 : bits(32) = SignExtend(imm24 @ 0b00, 32);
        execute_aarch32_instrs_B_Op_A_txt(imm32)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2138) = {
    SEE = 2138;
    let cond = Slice(__opcode, 28, 4);
    let imm24 = Slice(__opcode, 0, 24);
    decode_aarch32_instrs_B_A1enc_A_txt(cond, imm24)
}

val decode_aarch32_instrs_B_T1enc_A_txt : (bits(4), bits(8)) -> unit

function decode_aarch32_instrs_B_T1enc_A_txt (cond, imm8) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if cond == 0b1110 then {
            throw(Error_See("UDF"))
        };
        if cond == 0b1111 then {
            throw(Error_See("SVC"))
        };
        let imm32 : bits(32) = SignExtend(imm8 @ 0b0, 32);
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_B_Op_A_txt(imm32)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 8, 4) != 0b1111 & SEE < 2139) = {
    SEE = 2139;
    let cond = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_B_T1enc_A_txt(cond, imm8)
}

val decode_aarch32_instrs_B_T2enc_A_txt : bits(11) -> unit

function decode_aarch32_instrs_B_T2enc_A_txt imm11 = {
    if ConditionPassed() then {
        let imm32 : bits(32) = SignExtend(imm11 @ 0b0, 32);
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_B_Op_A_txt(imm32)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2140) = {
    SEE = 2140;
    let imm11 = Slice(__opcode, 0, 11);
    decode_aarch32_instrs_B_T2enc_A_txt(imm11)
}

val decode_aarch32_instrs_B_T3enc_A_txt : (bits(1), bits(4), bits(6), bits(1), bits(1), bits(11)) -> unit

function decode_aarch32_instrs_B_T3enc_A_txt (S, cond, imm6, J1, J2, imm11) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if cond[3 .. 1] == 0b111 then {
            throw(Error_See("Related encodings"))
        };
        let imm32 : bits(32) = SignExtend(((((S @ J2) @ J1) @ imm6) @ imm11) @ 0b0, 32);
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_B_Op_A_txt(imm32)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 22, 4) != 0b1111 & SEE < 2141) = {
    SEE = 2141;
    let S = Slice(__opcode, 26, 1);
    let cond = Slice(__opcode, 22, 4);
    let imm6 = Slice(__opcode, 16, 6);
    let J1 = Slice(__opcode, 13, 1);
    let J2 = Slice(__opcode, 11, 1);
    let imm11 = Slice(__opcode, 0, 11);
    decode_aarch32_instrs_B_T3enc_A_txt(S, cond, imm6, J1, J2, imm11)
}

val decode_aarch32_instrs_B_T4enc_A_txt : (bits(1), bits(10), bits(1), bits(1), bits(11)) -> unit

function decode_aarch32_instrs_B_T4enc_A_txt (S, imm10, J1, J2, imm11) = {
    if ConditionPassed() then {
        let I1 : bits(1) = not_vec(EOR(J1, S));
        let I2 : bits(1) = not_vec(EOR(J2, S));
        let imm32 : bits(32) = SignExtend(((((S @ I1) @ I2) @ imm10) @ imm11) @ 0b0, 32);
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_B_Op_A_txt(imm32)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2142) = {
    SEE = 2142;
    let S = Slice(__opcode, 26, 1);
    let imm10 = Slice(__opcode, 16, 10);
    let J1 = Slice(__opcode, 13, 1);
    let J2 = Slice(__opcode, 11, 1);
    let imm11 = Slice(__opcode, 0, 11);
    decode_aarch32_instrs_B_T4enc_A_txt(S, imm10, J1, J2, imm11)
}

val execute_aarch32_instrs_BFC_Op_A_txt : forall 'd 'lsbit 'msbit,
  (0 <= 'msbit & 'msbit <= 31 & 0 <= 'lsbit & 'lsbit <= 31 & 0 <= 'd & 'd <= 15).
  (int('d), int('lsbit), int('msbit)) -> unit

function execute_aarch32_instrs_BFC_Op_A_txt (d, lsbit, msbit) = {
    if msbit >= lsbit then {
        R_set(d) = [R_read(d) with msbit .. lsbit = Replicate(0b0, msbit - lsbit + 1)]
    } else {
        throw(Error_Unpredictable())
    }
}

val decode_aarch32_instrs_BFC_A1enc_A_txt : (bits(4), bits(5), bits(4), bits(5)) -> unit

function decode_aarch32_instrs_BFC_A1enc_A_txt (cond, msb, Rd, lsb) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'msbit = UInt(msb);
        let 'lsbit = UInt(lsb);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_BFC_Op_A_txt(d, lsbit, msbit)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2143) = {
    SEE = 2143;
    let cond = Slice(__opcode, 28, 4);
    let msb = Slice(__opcode, 16, 5);
    let Rd = Slice(__opcode, 12, 4);
    let lsb = Slice(__opcode, 7, 5);
    decode_aarch32_instrs_BFC_A1enc_A_txt(cond, msb, Rd, lsb)
}

val decode_aarch32_instrs_BFC_T1enc_A_txt : (bits(3), bits(4), bits(2), bits(5)) -> unit

function decode_aarch32_instrs_BFC_T1enc_A_txt (imm3, Rd, imm2, msb) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'msbit = UInt(msb);
        let 'lsbit = UInt(imm3 @ imm2);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_BFC_Op_A_txt(d, lsbit, msbit)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2144) = {
    SEE = 2144;
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let msb = Slice(__opcode, 0, 5);
    if [__opcode[26]] != 0b0 | [__opcode[5]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_BFC_T1enc_A_txt(imm3, Rd, imm2, msb)
    }
}

val execute_aarch32_instrs_BFI_Op_A_txt : forall 'd 'lsbit 'msbit 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'msbit & 'msbit <= 31 & 0 <= 'lsbit & 'lsbit <= 31 & 0 <= 'd & 'd <= 15).
  (int('d), int('lsbit), int('msbit), int('n)) -> unit

function execute_aarch32_instrs_BFI_Op_A_txt (d, lsbit, msbit, n) = {
    if msbit >= lsbit then {
        R_set(d) = [R_read(d) with msbit .. lsbit = R_read(n)[msbit - lsbit .. 0]]
    } else {
        throw(Error_Unpredictable())
    }
}

val decode_aarch32_instrs_BFI_A1enc_A_txt : (bits(4), bits(5), bits(4), bits(5), bits(4)) -> unit

function decode_aarch32_instrs_BFI_A1enc_A_txt (cond, msb, Rd, lsb, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("BFC"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'msbit = UInt(msb);
        let 'lsbit = UInt(lsb);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_BFI_Op_A_txt(d, lsbit, msbit, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2145) = {
    SEE = 2145;
    let cond = Slice(__opcode, 28, 4);
    let msb = Slice(__opcode, 16, 5);
    let Rd = Slice(__opcode, 12, 4);
    let lsb = Slice(__opcode, 7, 5);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_BFI_A1enc_A_txt(cond, msb, Rd, lsb, Rn)
}

val decode_aarch32_instrs_BFI_T1enc_A_txt : (bits(4), bits(3), bits(4), bits(2), bits(5)) -> unit

function decode_aarch32_instrs_BFI_T1enc_A_txt (Rn, imm3, Rd, imm2, msb) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("BFC"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'msbit = UInt(msb);
        let 'lsbit = UInt(imm3 @ imm2);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_BFI_Op_A_txt(d, lsbit, msbit, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2146) = {
    SEE = 2146;
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let msb = Slice(__opcode, 0, 5);
    if [__opcode[26]] != 0b0 | [__opcode[5]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_BFI_T1enc_A_txt(Rn, imm3, Rd, imm2, msb)
    }
}

val execute_aarch32_instrs_BIC_i_Op_A_txt : forall 'd 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (bits(1), int('d), bits(32), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_BIC_i_Op_A_txt (carry, d, imm32, n, setflags) = {
    let result : bits(32) = R_read(n) & not_vec(imm32);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_BIC_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_BIC_i_A1enc_A_txt (cond, S, Rn, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        (imm32, carry) = A32ExpandImm_C(imm12, PSTATE.C);
        execute_aarch32_instrs_BIC_i_Op_A_txt(carry, d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2147) = {
    SEE = 2147;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_BIC_i_A1enc_A_txt(cond, S, Rn, Rd, imm12)
}

val decode_aarch32_instrs_BIC_i_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_BIC_i_T1enc_A_txt (i, S, Rn, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        (imm32, carry) = T32ExpandImm_C((i @ imm3) @ imm8, PSTATE.C);
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        let carry = carry;
        execute_aarch32_instrs_BIC_i_Op_A_txt(carry, d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2148) = {
    SEE = 2148;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_BIC_i_T1enc_A_txt(i, S, Rn, imm3, Rd, imm8)
}

val execute_aarch32_instrs_BIC_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool) 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_BIC_r_Op_A_txt (d, m, n, setflags, shift_n, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = R_read(n) & not_vec(shifted);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_BIC_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_BIC_r_A1enc_A_txt (cond, S, Rn, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_BIC_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2149) = {
    SEE = 2149;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_BIC_r_A1enc_A_txt(cond, S, Rn, Rd, imm5, stype, Rm)
}

val decode_aarch32_instrs_BIC_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_BIC_r_T1enc_A_txt (Rm, Rdn) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rdn);
        let 'n = UInt(Rdn);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_BIC_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2150) = {
    SEE = 2150;
    let Rm = Slice(__opcode, 3, 3);
    let Rdn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_BIC_r_T1enc_A_txt(Rm, Rdn)
}

val decode_aarch32_instrs_BIC_r_T2enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_BIC_r_T2enc_A_txt (S, Rn, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_BIC_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2151) = {
    SEE = 2151;
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_BIC_r_T2enc_A_txt(S, Rn, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_BIC_rr_Op_A_txt : forall 'd 'm 'n 's ('setflags : Bool),
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('s), bool('setflags), SRType) -> unit

function execute_aarch32_instrs_BIC_rr_Op_A_txt (d, m, n, s, setflags, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = R_read(n) & not_vec(shifted);
    R_set(d) = result;
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result);
        PSTATE.C = carry
    };
    ()
}

val decode_aarch32_instrs_BIC_rr_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_BIC_rr_A1enc_A_txt (cond, S, Rn, Rd, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if ((d == 15 | n == 15) | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_BIC_rr_Op_A_txt(d, m, n, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2152) = {
    SEE = 2152;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_BIC_rr_A1enc_A_txt(cond, S, Rn, Rd, Rs, stype, Rm)
}

val execute_aarch32_instrs_BKPT_Op_A_txt : bits(16) -> unit

function execute_aarch32_instrs_BKPT_Op_A_txt imm16 = {
    AArch32_SoftwareBreakpoint(imm16)
}

val decode_aarch32_instrs_BKPT_A1enc_A_txt : (bits(4), bits(12), bits(4)) -> unit

function decode_aarch32_instrs_BKPT_A1enc_A_txt (cond, imm12, imm4) = {
    assert(cond != 0b1111);
    let imm16 : bits(16) = imm12 @ imm4;
    if cond != 0b1110 then {
        throw(Error_Unpredictable())
    };
    execute_aarch32_instrs_BKPT_Op_A_txt(imm16)
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2153) = {
    SEE = 2153;
    let cond = Slice(__opcode, 28, 4);
    let imm12 = Slice(__opcode, 8, 12);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_BKPT_A1enc_A_txt(cond, imm12, imm4)
}

val decode_aarch32_instrs_BKPT_T1enc_A_txt : bits(8) -> unit

function decode_aarch32_instrs_BKPT_T1enc_A_txt imm8 = {
    let imm16 : bits(16) = ZeroExtend(imm8, 16);
    execute_aarch32_instrs_BKPT_Op_A_txt(imm16)
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2154) = {
    SEE = 2154;
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_BKPT_T1enc_A_txt(imm8)
}

val execute_aarch32_instrs_BL_i_Op_A_txt : (bits(32), InstrSet) -> unit

function execute_aarch32_instrs_BL_i_Op_A_txt (imm32, targetInstrSet) = {
    if CurrentInstrSet() == InstrSet_A32 then {
        LR_write() = PC_read__1() - 4
    } else {
        LR_write() = PC_read__1()[31 .. 1] @ 0b1
    };
    targetAddress : bits(32) = undefined;
    if targetInstrSet == InstrSet_A32 then {
        targetAddress = Align(PC_read__1(), 4) + imm32
    } else {
        targetAddress = PC_read__1() + imm32
    };
    SelectInstrSet(targetInstrSet);
    BranchWritePC(targetAddress, BranchType_DIRCALL)
}

val decode_aarch32_instrs_BL_i_A1enc_A_txt : (bits(4), bits(24)) -> unit

function decode_aarch32_instrs_BL_i_A1enc_A_txt (cond, imm24) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let imm32 : bits(32) = SignExtend(imm24 @ 0b00, 32);
        let targetInstrSet : InstrSet = InstrSet_A32;
        execute_aarch32_instrs_BL_i_Op_A_txt(imm32, targetInstrSet)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2155) = {
    SEE = 2155;
    let cond = Slice(__opcode, 28, 4);
    let imm24 = Slice(__opcode, 0, 24);
    decode_aarch32_instrs_BL_i_A1enc_A_txt(cond, imm24)
}

val decode_aarch32_instrs_BL_i_A2enc_A_txt : (bits(1), bits(24)) -> unit

function decode_aarch32_instrs_BL_i_A2enc_A_txt (H, imm24) = {
    if ConditionPassed() then {
        let imm32 : bits(32) = SignExtend((imm24 @ H) @ 0b0, 32);
        let targetInstrSet : InstrSet = InstrSet_T32;
        execute_aarch32_instrs_BL_i_Op_A_txt(imm32, targetInstrSet)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2156) = {
    SEE = 2156;
    let H = Slice(__opcode, 24, 1);
    let imm24 = Slice(__opcode, 0, 24);
    decode_aarch32_instrs_BL_i_A2enc_A_txt(H, imm24)
}

val decode_aarch32_instrs_BL_i_T1enc_A_txt : (bits(1), bits(10), bits(1), bits(1), bits(11)) -> unit

function decode_aarch32_instrs_BL_i_T1enc_A_txt (S, imm10, J1, J2, imm11) = {
    if ConditionPassed() then {
        let I1 : bits(1) = not_vec(EOR(J1, S));
        let I2 : bits(1) = not_vec(EOR(J2, S));
        let imm32 : bits(32) = SignExtend(((((S @ I1) @ I2) @ imm10) @ imm11) @ 0b0, 32);
        let targetInstrSet : InstrSet = InstrSet_T32;
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_BL_i_Op_A_txt(imm32, targetInstrSet)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2157) = {
    SEE = 2157;
    let S = Slice(__opcode, 26, 1);
    let imm10 = Slice(__opcode, 16, 10);
    let J1 = Slice(__opcode, 13, 1);
    let J2 = Slice(__opcode, 11, 1);
    let imm11 = Slice(__opcode, 0, 11);
    decode_aarch32_instrs_BL_i_T1enc_A_txt(S, imm10, J1, J2, imm11)
}

val decode_aarch32_instrs_BL_i_T2enc_A_txt : (bits(1), bits(10), bits(1), bits(1), bits(10), bits(1)) -> unit

function decode_aarch32_instrs_BL_i_T2enc_A_txt (S, imm10H, J1, J2, imm10L, H) = {
    if ConditionPassed() then {
        if H == 0b1 then {
            throw(Error_Undefined())
        };
        let I1 : bits(1) = not_vec(EOR(J1, S));
        let I2 : bits(1) = not_vec(EOR(J2, S));
        let imm32 : bits(32) = SignExtend(((((S @ I1) @ I2) @ imm10H) @ imm10L) @ 0b00, 32);
        let targetInstrSet : InstrSet = InstrSet_A32;
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_BL_i_Op_A_txt(imm32, targetInstrSet)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2158) = {
    SEE = 2158;
    let S = Slice(__opcode, 26, 1);
    let imm10H = Slice(__opcode, 16, 10);
    let J1 = Slice(__opcode, 13, 1);
    let J2 = Slice(__opcode, 11, 1);
    let imm10L = Slice(__opcode, 1, 10);
    let H = Slice(__opcode, 0, 1);
    decode_aarch32_instrs_BL_i_T2enc_A_txt(S, imm10H, J1, J2, imm10L, H)
}

val execute_aarch32_instrs_BLX_r_Op_A_txt : forall 'm, (0 <= 'm & 'm <= 15).
  int('m) -> unit

function execute_aarch32_instrs_BLX_r_Op_A_txt m = {
    let target : bits(32) = R_read(m);
    next_instr_addr : bits(32) = undefined;
    if CurrentInstrSet() == InstrSet_A32 then {
        let next_instr_addr : bits(32) = PC_read__1() - 4;
        LR_write() = next_instr_addr
    } else {
        let next_instr_addr : bits(32) = PC_read__1() - 2;
        LR_write() = next_instr_addr[31 .. 1] @ 0b1
    };
    BXWritePC(target, BranchType_INDCALL)
}

val decode_aarch32_instrs_BLX_r_A1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_BLX_r_A1enc_A_txt (cond, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'm = UInt(Rm);
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_BLX_r_Op_A_txt(m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2159) = {
    SEE = 2159;
    let cond = Slice(__opcode, 28, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[12]] != 0b1) | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_BLX_r_A1enc_A_txt(cond, Rm)
    }
}

val decode_aarch32_instrs_BLX_r_T1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_BLX_r_T1enc_A_txt Rm = {
    if ConditionPassed() then {
        let 'm = UInt(Rm);
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_BLX_r_Op_A_txt(m)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2160) = {
    SEE = 2160;
    let Rm = Slice(__opcode, 3, 4);
    if ([__opcode[0]] != 0b0 | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_BLX_r_T1enc_A_txt(Rm)
    }
}

val execute_aarch32_instrs_BX_Op_A_txt : forall 'm, (0 <= 'm & 'm <= 15).
  int('m) -> unit

function execute_aarch32_instrs_BX_Op_A_txt m = {
    BXWritePC(R_read(m), BranchType_INDIR)
}

val decode_aarch32_instrs_BX_A1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_BX_A1enc_A_txt (cond, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'm = UInt(Rm);
        execute_aarch32_instrs_BX_Op_A_txt(m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2161) = {
    SEE = 2161;
    let cond = Slice(__opcode, 28, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[12]] != 0b1) | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_BX_A1enc_A_txt(cond, Rm)
    }
}

val decode_aarch32_instrs_BX_T1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_BX_T1enc_A_txt Rm = {
    if ConditionPassed() then {
        let 'm = UInt(Rm);
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_BX_Op_A_txt(m)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2162) = {
    SEE = 2162;
    let Rm = Slice(__opcode, 3, 4);
    if ([__opcode[0]] != 0b0 | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_BX_T1enc_A_txt(Rm)
    }
}

val execute_aarch32_instrs_BXJ_Op_A_txt : forall 'm, (0 <= 'm & 'm <= 15).
  int('m) -> unit

function execute_aarch32_instrs_BXJ_Op_A_txt m = {
    BXWritePC(R_read(m), BranchType_INDIR)
}

val decode_aarch32_instrs_BXJ_A1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_BXJ_A1enc_A_txt (cond, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'm = UInt(Rm);
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_BXJ_Op_A_txt(m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2163) = {
    SEE = 2163;
    let cond = Slice(__opcode, 28, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[12]] != 0b1) | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_BXJ_A1enc_A_txt(cond, Rm)
    }
}

val decode_aarch32_instrs_BXJ_T1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_BXJ_T1enc_A_txt Rm = {
    if ConditionPassed() then {
        let 'm = UInt(Rm);
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_BXJ_Op_A_txt(m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2164) = {
    SEE = 2164;
    let Rm = Slice(__opcode, 16, 4);
    if ((((((((((([__opcode[13]] != 0b0 | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0) | [__opcode[4]] != 0b0) | [__opcode[5]] != 0b0) | [__opcode[6]] != 0b0) | [__opcode[7]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_BXJ_T1enc_A_txt(Rm)
    }
}

val execute_aarch32_instrs_CBNZ_Op_A_txt : forall 'n ('nonzero : Bool),
  'n in {0, 1, 2, 3, 4, 5, 6, 7}.
  (bits(32), int('n), bool('nonzero)) -> unit

function execute_aarch32_instrs_CBNZ_Op_A_txt (imm32, n, nonzero) = {
    if nonzero != IsZero(R_read(n)) then {
        CBWritePC(PC_read__1() + imm32)
    };
    ()
}

val decode_aarch32_instrs_CBNZ_T1enc_A_txt : (bits(1), bits(1), bits(5), bits(3)) -> unit

function decode_aarch32_instrs_CBNZ_T1enc_A_txt (op, i, imm5, Rn) = {
    let 'n = UInt(Rn);
    let imm32 : bits(32) = ZeroExtend((i @ imm5) @ 0b0, 32);
    let nonzero : bool = op == 0b1;
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    execute_aarch32_instrs_CBNZ_Op_A_txt(imm32, n, nonzero)
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, _, bitzero, _, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2165) = {
    SEE = 2165;
    let op = Slice(__opcode, 11, 1);
    let i = Slice(__opcode, 9, 1);
    let imm5 = Slice(__opcode, 3, 5);
    let Rn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_CBNZ_T1enc_A_txt(op, i, imm5, Rn)
}

val execute_aarch32_instrs_CLREX_Op_A_txt : unit -> unit

function execute_aarch32_instrs_CLREX_Op_A_txt () = {
    ClearExclusiveLocal(ProcessorID())
}

val decode_aarch32_instrs_CLREX_A1enc_A_txt : unit -> unit

function decode_aarch32_instrs_CLREX_A1enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_CLREX_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, (0b11110101011111111111000000011111 as __opcode)) if SEE < 2166) = {
    SEE = 2166;
    if (((((((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[12]] != 0b1) | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CLREX_A1enc_A_txt()
    }
}

val decode_aarch32_instrs_CLREX_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_CLREX_T1enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_CLREX_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101111111000111100101111 as __opcode)) if SEE < 2167) = {
    SEE = 2167;
    if ((((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CLREX_T1enc_A_txt()
    }
}

val execute_aarch32_instrs_CLZ_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_CLZ_Op_A_txt (d, m) = {
    let 'result = CountLeadingZeroBits(R_read(m));
    R_set(d) = result[31 .. 0]
}

val decode_aarch32_instrs_CLZ_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_CLZ_A1enc_A_txt (cond, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_CLZ_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2168) = {
    SEE = 2168;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CLZ_A1enc_A_txt(cond, Rd, Rm)
    }
}

val decode_aarch32_instrs_CLZ_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_CLZ_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'n = UInt(Rn);
        if (m != n | d == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_CLZ_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2169) = {
    SEE = 2169;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_CLZ_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_CMN_i_Op_A_txt : forall 'n, (0 <= 'n & 'n <= 15).
  (bits(32), int('n)) -> unit

function execute_aarch32_instrs_CMN_i_Op_A_txt (imm32, n) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    (result, nzcv) = AddWithCarry(R_read(n), imm32, 0b0);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
}

val decode_aarch32_instrs_CMN_i_A1enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_CMN_i_A1enc_A_txt (cond, Rn, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = A32ExpandImm(imm12);
        execute_aarch32_instrs_CMN_i_Op_A_txt(imm32, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2170) = {
    SEE = 2170;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let imm12 = Slice(__opcode, 0, 12);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CMN_i_A1enc_A_txt(cond, Rn, imm12)
    }
}

val decode_aarch32_instrs_CMN_i_T1enc_A_txt : (bits(1), bits(4), bits(3), bits(8)) -> unit

function decode_aarch32_instrs_CMN_i_T1enc_A_txt (i, Rn, imm3, imm8) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let imm32 : bits(32) = T32ExpandImm((i @ imm3) @ imm8);
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_CMN_i_Op_A_txt(imm32, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2171) = {
    SEE = 2171;
    let i = Slice(__opcode, 26, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_CMN_i_T1enc_A_txt(i, Rn, imm3, imm8)
}

val execute_aarch32_instrs_CMN_r_Op_A_txt : forall 'm 'n 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (int('m), int('n), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_CMN_r_Op_A_txt (m, n, shift_n, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(R_read(n), shifted, 0b0);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
}

val decode_aarch32_instrs_CMN_r_A1enc_A_txt : (bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_CMN_r_A1enc_A_txt (cond, Rn, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_CMN_r_Op_A_txt(m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2172) = {
    SEE = 2172;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CMN_r_A1enc_A_txt(cond, Rn, imm5, stype, Rm)
    }
}

val decode_aarch32_instrs_CMN_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_CMN_r_T1enc_A_txt (Rm, Rn) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_CMN_r_Op_A_txt(m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 2173) = {
    SEE = 2173;
    let Rm = Slice(__opcode, 3, 3);
    let Rn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_CMN_r_T1enc_A_txt(Rm, Rn)
}

val decode_aarch32_instrs_CMN_r_T2enc_A_txt : (bits(4), bits(3), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_CMN_r_T2enc_A_txt (Rn, imm3, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if n == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_CMN_r_Op_A_txt(m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2174) = {
    SEE = 2174;
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CMN_r_T2enc_A_txt(Rn, imm3, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_CMN_rr_Op_A_txt : forall 'm 'n 's,
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (int('m), int('n), int('s), SRType) -> unit

function execute_aarch32_instrs_CMN_rr_Op_A_txt (m, n, s, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(R_read(n), shifted, 0b0);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
}

val decode_aarch32_instrs_CMN_rr_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_CMN_rr_A1enc_A_txt (cond, Rn, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let shift_t : SRType = DecodeRegShift(stype);
        if (n == 15 | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_CMN_rr_Op_A_txt(m, n, s, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2175) = {
    SEE = 2175;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CMN_rr_A1enc_A_txt(cond, Rn, Rs, stype, Rm)
    }
}

val execute_aarch32_instrs_CMP_i_Op_A_txt : forall 'n, (0 <= 'n & 'n <= 15).
  (bits(32), int('n)) -> unit

function execute_aarch32_instrs_CMP_i_Op_A_txt (imm32, n) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    (result, nzcv) = AddWithCarry(R_read(n), not_vec(imm32), 0b1);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
}

val decode_aarch32_instrs_CMP_i_A1enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_CMP_i_A1enc_A_txt (cond, Rn, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = A32ExpandImm(imm12);
        execute_aarch32_instrs_CMP_i_Op_A_txt(imm32, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2176) = {
    SEE = 2176;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let imm12 = Slice(__opcode, 0, 12);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CMP_i_A1enc_A_txt(cond, Rn, imm12)
    }
}

val decode_aarch32_instrs_CMP_i_T1enc_A_txt : (bits(3), bits(8)) -> unit

function decode_aarch32_instrs_CMP_i_T1enc_A_txt (Rn, imm8) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        execute_aarch32_instrs_CMP_i_Op_A_txt(imm32, n)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2177) = {
    SEE = 2177;
    let Rn = Slice(__opcode, 8, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_CMP_i_T1enc_A_txt(Rn, imm8)
}

val decode_aarch32_instrs_CMP_i_T2enc_A_txt : (bits(1), bits(4), bits(3), bits(8)) -> unit

function decode_aarch32_instrs_CMP_i_T2enc_A_txt (i, Rn, imm3, imm8) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let imm32 : bits(32) = T32ExpandImm((i @ imm3) @ imm8);
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_CMP_i_Op_A_txt(imm32, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2178) = {
    SEE = 2178;
    let i = Slice(__opcode, 26, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_CMP_i_T2enc_A_txt(i, Rn, imm3, imm8)
}

val execute_aarch32_instrs_CMP_r_Op_A_txt : forall 'm 'n 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (int('m), int('n), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_CMP_r_Op_A_txt (m, n, shift_n, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(R_read(n), not_vec(shifted), 0b1);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
}

val decode_aarch32_instrs_CMP_r_A1enc_A_txt : (bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_CMP_r_A1enc_A_txt (cond, Rn, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_CMP_r_Op_A_txt(m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2179) = {
    SEE = 2179;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CMP_r_A1enc_A_txt(cond, Rn, imm5, stype, Rm)
    }
}

val decode_aarch32_instrs_CMP_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_CMP_r_T1enc_A_txt (Rm, Rn) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_CMP_r_Op_A_txt(m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2180) = {
    SEE = 2180;
    let Rm = Slice(__opcode, 3, 3);
    let Rn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_CMP_r_T1enc_A_txt(Rm, Rn)
}

val decode_aarch32_instrs_CMP_r_T2enc_A_txt : (bits(1), bits(4), bits(3)) -> unit

function decode_aarch32_instrs_CMP_r_T2enc_A_txt (N, Rm, Rn) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(N @ Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        if n < 8 & m < 8 then {
            throw(Error_Unpredictable())
        };
        if n == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_CMP_r_Op_A_txt(m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2181) = {
    SEE = 2181;
    let N = Slice(__opcode, 7, 1);
    let Rm = Slice(__opcode, 3, 4);
    let Rn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_CMP_r_T2enc_A_txt(N, Rm, Rn)
}

val decode_aarch32_instrs_CMP_r_T3enc_A_txt : (bits(4), bits(3), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_CMP_r_T3enc_A_txt (Rn, imm3, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if n == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_CMP_r_Op_A_txt(m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2182) = {
    SEE = 2182;
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CMP_r_T3enc_A_txt(Rn, imm3, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_CMP_rr_Op_A_txt : forall 'm 'n 's,
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (int('m), int('n), int('s), SRType) -> unit

function execute_aarch32_instrs_CMP_rr_Op_A_txt (m, n, s, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(R_read(n), not_vec(shifted), 0b1);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
}

val decode_aarch32_instrs_CMP_rr_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_CMP_rr_A1enc_A_txt (cond, Rn, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let shift_t : SRType = DecodeRegShift(stype);
        if (n == 15 | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_CMP_rr_Op_A_txt(m, n, s, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2183) = {
    SEE = 2183;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CMP_rr_A1enc_A_txt(cond, Rn, Rs, stype, Rm)
    }
}

val execute_aarch32_instrs_DBG_Op_A_txt : unit -> unit

function execute_aarch32_instrs_DBG_Op_A_txt () = {
    ()
}

val decode_aarch32_instrs_DBG_A1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_DBG_A1enc_A_txt (cond, option_name) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        execute_aarch32_instrs_DBG_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2184) = {
    SEE = 2184;
    let cond = Slice(__opcode, 28, 4);
    let option_name = Slice(__opcode, 0, 4);
    if (((((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_DBG_A1enc_A_txt(cond, option_name)
    }
}

val decode_aarch32_instrs_DBG_T1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_DBG_T1enc_A_txt option_name = {
    if ConditionPassed() then {
        execute_aarch32_instrs_DBG_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2185) = {
    SEE = 2185;
    let option_name = Slice(__opcode, 0, 4);
    if (((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_DBG_T1enc_A_txt(option_name)
    }
}

val execute_aarch32_instrs_DMB_Op_A_txt : bits(4) -> unit

function execute_aarch32_instrs_DMB_Op_A_txt option_name = {
    domain : MBReqDomain = undefined;
    types : MBReqTypes = undefined;
    match option_name {
      0b0001 => {
          domain = MBReqDomain_OuterShareable;
          types = MBReqTypes_Reads
      },
      0b0010 => {
          domain = MBReqDomain_OuterShareable;
          types = MBReqTypes_Writes
      },
      0b0011 => {
          domain = MBReqDomain_OuterShareable;
          types = MBReqTypes_All
      },
      0b0101 => {
          domain = MBReqDomain_Nonshareable;
          types = MBReqTypes_Reads
      },
      0b0110 => {
          domain = MBReqDomain_Nonshareable;
          types = MBReqTypes_Writes
      },
      0b0111 => {
          domain = MBReqDomain_Nonshareable;
          types = MBReqTypes_All
      },
      0b1001 => {
          domain = MBReqDomain_InnerShareable;
          types = MBReqTypes_Reads
      },
      0b1010 => {
          domain = MBReqDomain_InnerShareable;
          types = MBReqTypes_Writes
      },
      0b1011 => {
          domain = MBReqDomain_InnerShareable;
          types = MBReqTypes_All
      },
      0b1101 => {
          domain = MBReqDomain_FullSystem;
          types = MBReqTypes_Reads
      },
      0b1110 => {
          domain = MBReqDomain_FullSystem;
          types = MBReqTypes_Writes
      },
      _ => {
          domain = MBReqDomain_FullSystem;
          types = MBReqTypes_All
      }
    };
    let types = types;
    if (PSTATE.EL == EL0 | PSTATE.EL == EL1) & EL2Enabled() then {
        if HCR_read()[BSU] == 0b11 then {
            domain = MBReqDomain_FullSystem
        };
        if HCR_read()[BSU] == 0b10 & domain != MBReqDomain_FullSystem then {
            domain = MBReqDomain_OuterShareable
        };
        if HCR_read()[BSU] == 0b01 & domain == MBReqDomain_Nonshareable then {
            domain = MBReqDomain_InnerShareable
        };
        ()
    };
    DataMemoryBarrier(domain, types)
}

val decode_aarch32_instrs_DMB_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_DMB_A1enc_A_txt option_name = {
    if ConditionPassed() then {
        execute_aarch32_instrs_DMB_Op_A_txt(option_name)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2186) = {
    SEE = 2186;
    let option_name = Slice(__opcode, 0, 4);
    if (((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[12]] != 0b1) | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_DMB_A1enc_A_txt(option_name)
    }
}

val decode_aarch32_instrs_DMB_T1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_DMB_T1enc_A_txt option_name = {
    if ConditionPassed() then {
        execute_aarch32_instrs_DMB_Op_A_txt(option_name)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2187) = {
    SEE = 2187;
    let option_name = Slice(__opcode, 0, 4);
    if ((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_DMB_T1enc_A_txt(option_name)
    }
}

val execute_aarch32_instrs_DSB_Op_A_txt : bits(4) -> unit

function execute_aarch32_instrs_DSB_Op_A_txt option_name = {
    nXS : bool = undefined;
    if HaveFeatXS() & HaveFeatHCX() then {
        nXS = (((PSTATE.EL == EL0 | PSTATE.EL == EL1) & not_bool(ELUsingAArch32(EL2))) & IsHCRXEL2Enabled()) & HCRX_EL2[FnXS] == 0b1
    } else {
        nXS = false
    };
    domain : MBReqDomain = undefined;
    types : MBReqTypes = undefined;
    match option_name {
      0b0001 => {
          domain = MBReqDomain_OuterShareable;
          types = MBReqTypes_Reads
      },
      0b0010 => {
          domain = MBReqDomain_OuterShareable;
          types = MBReqTypes_Writes
      },
      0b0011 => {
          domain = MBReqDomain_OuterShareable;
          types = MBReqTypes_All
      },
      0b0101 => {
          domain = MBReqDomain_Nonshareable;
          types = MBReqTypes_Reads
      },
      0b0110 => {
          domain = MBReqDomain_Nonshareable;
          types = MBReqTypes_Writes
      },
      0b0111 => {
          domain = MBReqDomain_Nonshareable;
          types = MBReqTypes_All
      },
      0b1001 => {
          domain = MBReqDomain_InnerShareable;
          types = MBReqTypes_Reads
      },
      0b1010 => {
          domain = MBReqDomain_InnerShareable;
          types = MBReqTypes_Writes
      },
      0b1011 => {
          domain = MBReqDomain_InnerShareable;
          types = MBReqTypes_All
      },
      0b1101 => {
          domain = MBReqDomain_FullSystem;
          types = MBReqTypes_Reads
      },
      0b1110 => {
          domain = MBReqDomain_FullSystem;
          types = MBReqTypes_Writes
      },
      _ => {
          if option_name == 0b0000 then {
              throw(Error_See("SSBB"))
          } else if option_name == 0b0100 then {
              throw(Error_See("PSSBB"))
          } else {
              domain = MBReqDomain_FullSystem;
              types = MBReqTypes_All
          }
      }
    };
    if (PSTATE.EL == EL0 | PSTATE.EL == EL1) & EL2Enabled() then {
        if HCR_read()[BSU] == 0b11 then {
            domain = MBReqDomain_FullSystem
        };
        if HCR_read()[BSU] == 0b10 & domain != MBReqDomain_FullSystem then {
            domain = MBReqDomain_OuterShareable
        };
        if HCR_read()[BSU] == 0b01 & domain == MBReqDomain_Nonshareable then {
            domain = MBReqDomain_InnerShareable
        };
        ()
    };
    DataSynchronizationBarrier(domain, types, nXS)
}

val decode_aarch32_instrs_DSB_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_DSB_A1enc_A_txt option_name = {
    if ConditionPassed() then {
        execute_aarch32_instrs_DSB_Op_A_txt(option_name)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2188) = {
    SEE = 2188;
    let option_name = Slice(__opcode, 0, 4);
    if (((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[12]] != 0b1) | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_DSB_A1enc_A_txt(option_name)
    }
}

val decode_aarch32_instrs_DSB_T1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_DSB_T1enc_A_txt option_name = {
    if ConditionPassed() then {
        execute_aarch32_instrs_DSB_Op_A_txt(option_name)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2189) = {
    SEE = 2189;
    let option_name = Slice(__opcode, 0, 4);
    if ((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_DSB_T1enc_A_txt(option_name)
    }
}

val execute_aarch32_instrs_EOR_i_Op_A_txt : forall 'd 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (bits(1), int('d), bits(32), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_EOR_i_Op_A_txt (carry, d, imm32, n, setflags) = {
    let result : bits(32) = EOR(R_read(n), imm32);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_EOR_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_EOR_i_A1enc_A_txt (cond, S, Rn, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        (imm32, carry) = A32ExpandImm_C(imm12, PSTATE.C);
        execute_aarch32_instrs_EOR_i_Op_A_txt(carry, d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2190) = {
    SEE = 2190;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_EOR_i_A1enc_A_txt(cond, S, Rn, Rd, imm12)
}

val decode_aarch32_instrs_EOR_i_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_EOR_i_T1enc_A_txt (i, S, Rn, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        if Rd == 0b1111 & S == 0b1 then {
            throw(Error_See("TEQ (immediate)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        (imm32, carry) = T32ExpandImm_C((i @ imm3) @ imm8, PSTATE.C);
        if d == 15 & not_bool(setflags) | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_EOR_i_Op_A_txt(carry, d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2191) = {
    SEE = 2191;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_EOR_i_T1enc_A_txt(i, S, Rn, imm3, Rd, imm8)
}

val execute_aarch32_instrs_EOR_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool) 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_EOR_r_Op_A_txt (d, m, n, setflags, shift_n, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = EOR(R_read(n), shifted);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_EOR_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_EOR_r_A1enc_A_txt (cond, S, Rn, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_EOR_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2192) = {
    SEE = 2192;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_EOR_r_A1enc_A_txt(cond, S, Rn, Rd, imm5, stype, Rm)
}

val decode_aarch32_instrs_EOR_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_EOR_r_T1enc_A_txt (Rm, Rdn) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rdn);
        let 'n = UInt(Rdn);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_EOR_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 2193) = {
    SEE = 2193;
    let Rm = Slice(__opcode, 3, 3);
    let Rdn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_EOR_r_T1enc_A_txt(Rm, Rdn)
}

val decode_aarch32_instrs_EOR_r_T2enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_EOR_r_T2enc_A_txt (S, Rn, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rd == 0b1111 & S == 0b1 then {
            throw(Error_See("TEQ (register)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if (d == 15 & not_bool(setflags) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_EOR_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2194) = {
    SEE = 2194;
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_EOR_r_T2enc_A_txt(S, Rn, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_EOR_rr_Op_A_txt : forall 'd 'm 'n 's ('setflags : Bool),
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('s), bool('setflags), SRType) -> unit

function execute_aarch32_instrs_EOR_rr_Op_A_txt (d, m, n, s, setflags, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = EOR(R_read(n), shifted);
    R_set(d) = result;
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result);
        PSTATE.C = carry
    };
    ()
}

val decode_aarch32_instrs_EOR_rr_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_EOR_rr_A1enc_A_txt (cond, S, Rn, Rd, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if ((d == 15 | n == 15) | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_EOR_rr_Op_A_txt(d, m, n, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2195) = {
    SEE = 2195;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_EOR_rr_A1enc_A_txt(cond, S, Rn, Rd, Rs, stype, Rm)
}

val execute_aarch32_instrs_ISB_Op_A_txt : unit -> unit

function execute_aarch32_instrs_ISB_Op_A_txt () = {
    InstructionSynchronizationBarrier()
}

val decode_aarch32_instrs_ISB_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_ISB_A1enc_A_txt option_name = {
    if ConditionPassed() then {
        execute_aarch32_instrs_ISB_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2196) = {
    SEE = 2196;
    let option_name = Slice(__opcode, 0, 4);
    if (((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[12]] != 0b1) | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_ISB_A1enc_A_txt(option_name)
    }
}

val decode_aarch32_instrs_ISB_T1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_ISB_T1enc_A_txt option_name = {
    if ConditionPassed() then {
        execute_aarch32_instrs_ISB_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2197) = {
    SEE = 2197;
    let option_name = Slice(__opcode, 0, 4);
    if ((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_ISB_T1enc_A_txt(option_name)
    }
}

val execute_aarch32_instrs_IT_Op_A_txt : (bits(4), bits(4)) -> unit

function execute_aarch32_instrs_IT_Op_A_txt (firstcond, mask) = {
    AArch32_CheckITEnabled(mask);
    PSTATE.IT[7 .. 0] = firstcond @ mask;
    ShouldAdvanceIT = false
}

val decode_aarch32_instrs_IT_T1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_IT_T1enc_A_txt (firstcond, mask) = {
    if mask == 0b0000 then {
        throw(Error_See("Related encodings"))
    };
    if firstcond == 0b1111 | firstcond == 0b1110 & BitCount(mask) != 1 then {
        throw(Error_Unpredictable())
    };
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    execute_aarch32_instrs_IT_Op_A_txt(firstcond, mask)
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2198) = {
    SEE = 2198;
    let firstcond = Slice(__opcode, 4, 4);
    let mask = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_IT_T1enc_A_txt(firstcond, mask)
}

val execute_aarch32_instrs_LDC_i_Op_A_txt : forall ('add : Bool) ('index : Bool) 'n ('wback : Bool),
  (0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), bool('wback)) -> unit

function execute_aarch32_instrs_LDC_i_Op_A_txt (add, imm32, index, n, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    AArch32_SysRegWriteDBGDTRTXint(address);
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_LDC_i_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_LDC_i_A1enc_A_txt (cond, P, U, W, Rn, imm8) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("LDC (literal)"))
        };
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_Undefined())
        };
        let 'n = UInt(Rn);
        let 'cp = 14;
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        execute_aarch32_instrs_LDC_i_Op_A_txt(add, imm32, index, n, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, _, _, bitzero, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2199) = {
    SEE = 2199;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDC_i_A1enc_A_txt(cond, P, U, W, Rn, imm8)
}

val decode_aarch32_instrs_LDC_i_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_LDC_i_T1enc_A_txt (P, U, W, Rn, imm8) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("LDC (literal)"))
        };
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_Undefined())
        };
        let 'n = UInt(Rn);
        let 'cp = 14;
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        execute_aarch32_instrs_LDC_i_Op_A_txt(add, imm32, index, n, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, bitzero, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2200) = {
    SEE = 2200;
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDC_i_T1enc_A_txt(P, U, W, Rn, imm8)
}

val execute_aarch32_instrs_LDC_l_Op_A_txt : forall ('add : Bool) ('index : Bool).
  (bool('add), bits(32), bool('index)) -> unit

function execute_aarch32_instrs_LDC_l_Op_A_txt (add, imm32, index) = {
    let offset_addr : bits(32) = if add then Align(PC_read__1(), 4) + imm32 else
      Align(PC_read__1(), 4) - imm32;
    let address : bits(32) = if index then offset_addr else
      Align(PC_read__1(), 4);
    AArch32_SysRegWriteDBGDTRTXint(address)
}

val decode_aarch32_instrs_LDC_l_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(8)) -> unit

function decode_aarch32_instrs_LDC_l_A1enc_A_txt (cond, P, U, W, imm8) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_Undefined())
        };
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let 'cp = 14;
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        if W == 0b1 | P == 0b0 & CurrentInstrSet() != InstrSet_A32 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDC_l_Op_A_txt(add, imm32, index)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, _, _, bitzero, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2201) = {
    SEE = 2201;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDC_l_A1enc_A_txt(cond, P, U, W, imm8)
}

val decode_aarch32_instrs_LDC_l_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(8)) -> unit

function decode_aarch32_instrs_LDC_l_T1enc_A_txt (P, U, W, imm8) = {
    if ConditionPassed() then {
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_Undefined())
        };
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let 'cp = 14;
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        if W == 0b1 | P == 0b0 & CurrentInstrSet() != InstrSet_A32 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDC_l_Op_A_txt(add, imm32, index)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, bitzero, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2202) = {
    SEE = 2202;
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDC_l_T1enc_A_txt(P, U, W, imm8)
}

val execute_aarch32_instrs_LDM_Op_A_txt : forall 'n ('wback : Bool), (0 <= 'n & 'n <= 15).
  (int('n), bits(16), bool('wback)) -> unit

function execute_aarch32_instrs_LDM_Op_A_txt (n, registers, wback) = {
    address : bits(32) = R_read(n);
    foreach (i from 0 to 14 by 1 in inc) {
        if [registers[i]] == 0b1 then {
            R_set(i) = MemS_read(address, 4);
            address = address + 4
        };
        ()
    };
    if [registers[15]] == 0b1 then {
        LoadWritePC(MemS_read(address, 4))
    };
    if wback & [registers[n]] == 0b0 then {
        R_set(n) = R_read(n) + 4 * BitCount(registers)
    };
    if wback & [registers[n]] == 0b1 then {
        R_set(n) = __UNKNOWN_bits(32)
    };
    ()
}

val decode_aarch32_instrs_LDM_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(16)) -> unit

function decode_aarch32_instrs_LDM_A1enc_A_txt (cond, W, Rn, register_list) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let registers : bits(16) = register_list;
        let wback : bool = W == 0b1;
        if n == 15 | BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        if wback & [registers[n]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDM_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2203) = {
    SEE = 2203;
    let cond = Slice(__opcode, 28, 4);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let register_list = Slice(__opcode, 0, 16);
    decode_aarch32_instrs_LDM_A1enc_A_txt(cond, W, Rn, register_list)
}

val decode_aarch32_instrs_LDM_T1enc_A_txt : (bits(3), bits(8)) -> unit

function decode_aarch32_instrs_LDM_T1enc_A_txt (Rn, register_list) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let registers : bits(16) = 0b00000000 @ register_list;
        let wback : bool = [registers[n]] == 0b0;
        if BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDM_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2204) = {
    SEE = 2204;
    let Rn = Slice(__opcode, 8, 3);
    let register_list = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDM_T1enc_A_txt(Rn, register_list)
}

val decode_aarch32_instrs_LDM_T2enc_A_txt : (bits(1), bits(4), bits(1), bits(1), bits(14)) -> unit

function decode_aarch32_instrs_LDM_T2enc_A_txt (W, Rn, P, M, register_list) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let registers : bits(16) = (P @ M) @ register_list;
        let wback : bool = W == 0b1;
        if (n == 15 | BitCount(registers) < 2) | P == 0b1 & M == 0b1 then {
            throw(Error_Unpredictable())
        };
        if wback & [registers[n]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        if [registers[13]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        if ([registers[15]] == 0b1 & InITBlock()) & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDM_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2205) = {
    SEE = 2205;
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let P = Slice(__opcode, 15, 1);
    let M = Slice(__opcode, 14, 1);
    let register_list = Slice(__opcode, 0, 14);
    decode_aarch32_instrs_LDM_T2enc_A_txt(W, Rn, P, M, register_list)
}

val execute_aarch32_instrs_LDMDA_Op_A_txt : forall 'n ('wback : Bool), (0 <= 'n & 'n <= 15).
  (int('n), bits(16), bool('wback)) -> unit

function execute_aarch32_instrs_LDMDA_Op_A_txt (n, registers, wback) = {
    address : bits(32) = R_read(n) - 4 * BitCount(registers) + 4;
    foreach (i from 0 to 14 by 1 in inc) {
        if [registers[i]] == 0b1 then {
            R_set(i) = MemS_read(address, 4);
            address = address + 4
        };
        ()
    };
    if [registers[15]] == 0b1 then {
        LoadWritePC(MemS_read(address, 4))
    };
    if wback & [registers[n]] == 0b0 then {
        R_set(n) = R_read(n) - 4 * BitCount(registers)
    };
    if wback & [registers[n]] == 0b1 then {
        R_set(n) = __UNKNOWN_bits(32)
    };
    ()
}

val decode_aarch32_instrs_LDMDA_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(16)) -> unit

function decode_aarch32_instrs_LDMDA_A1enc_A_txt (cond, W, Rn, register_list) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let registers : bits(16) = register_list;
        let wback : bool = W == 0b1;
        if n == 15 | BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        if wback & [registers[n]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDMDA_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2206) = {
    SEE = 2206;
    let cond = Slice(__opcode, 28, 4);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let register_list = Slice(__opcode, 0, 16);
    decode_aarch32_instrs_LDMDA_A1enc_A_txt(cond, W, Rn, register_list)
}

val execute_aarch32_instrs_LDMDB_Op_A_txt : forall 'n ('wback : Bool), (0 <= 'n & 'n <= 15).
  (int('n), bits(16), bool('wback)) -> unit

function execute_aarch32_instrs_LDMDB_Op_A_txt (n, registers, wback) = {
    address : bits(32) = R_read(n) - 4 * BitCount(registers);
    foreach (i from 0 to 14 by 1 in inc) {
        if [registers[i]] == 0b1 then {
            R_set(i) = MemS_read(address, 4);
            address = address + 4
        };
        ()
    };
    if [registers[15]] == 0b1 then {
        LoadWritePC(MemS_read(address, 4))
    };
    if wback & [registers[n]] == 0b0 then {
        R_set(n) = R_read(n) - 4 * BitCount(registers)
    };
    if wback & [registers[n]] == 0b1 then {
        R_set(n) = __UNKNOWN_bits(32)
    };
    ()
}

val decode_aarch32_instrs_LDMDB_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(16)) -> unit

function decode_aarch32_instrs_LDMDB_A1enc_A_txt (cond, W, Rn, register_list) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let registers : bits(16) = register_list;
        let wback : bool = W == 0b1;
        if n == 15 | BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        if wback & [registers[n]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDMDB_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2207) = {
    SEE = 2207;
    let cond = Slice(__opcode, 28, 4);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let register_list = Slice(__opcode, 0, 16);
    decode_aarch32_instrs_LDMDB_A1enc_A_txt(cond, W, Rn, register_list)
}

val decode_aarch32_instrs_LDMDB_T1enc_A_txt : (bits(1), bits(4), bits(1), bits(1), bits(14)) -> unit

function decode_aarch32_instrs_LDMDB_T1enc_A_txt (W, Rn, P, M, register_list) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let registers : bits(16) = (P @ M) @ register_list;
        let wback : bool = W == 0b1;
        if (n == 15 | BitCount(registers) < 2) | P == 0b1 & M == 0b1 then {
            throw(Error_Unpredictable())
        };
        if wback & [registers[n]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        if [registers[13]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        if ([registers[15]] == 0b1 & InITBlock()) & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDMDB_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2208) = {
    SEE = 2208;
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let P = Slice(__opcode, 15, 1);
    let M = Slice(__opcode, 14, 1);
    let register_list = Slice(__opcode, 0, 14);
    decode_aarch32_instrs_LDMDB_T1enc_A_txt(W, Rn, P, M, register_list)
}

val execute_aarch32_instrs_LDMIB_Op_A_txt : forall 'n ('wback : Bool), (0 <= 'n & 'n <= 15).
  (int('n), bits(16), bool('wback)) -> unit

function execute_aarch32_instrs_LDMIB_Op_A_txt (n, registers, wback) = {
    address : bits(32) = R_read(n) + 4;
    foreach (i from 0 to 14 by 1 in inc) {
        if [registers[i]] == 0b1 then {
            R_set(i) = MemS_read(address, 4);
            address = address + 4
        };
        ()
    };
    if [registers[15]] == 0b1 then {
        LoadWritePC(MemS_read(address, 4))
    };
    if wback & [registers[n]] == 0b0 then {
        R_set(n) = R_read(n) + 4 * BitCount(registers)
    };
    if wback & [registers[n]] == 0b1 then {
        R_set(n) = __UNKNOWN_bits(32)
    };
    ()
}

val decode_aarch32_instrs_LDMIB_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(16)) -> unit

function decode_aarch32_instrs_LDMIB_A1enc_A_txt (cond, W, Rn, register_list) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let registers : bits(16) = register_list;
        let wback : bool = W == 0b1;
        if n == 15 | BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        if wback & [registers[n]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDMIB_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2209) = {
    SEE = 2209;
    let cond = Slice(__opcode, 28, 4);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let register_list = Slice(__opcode, 0, 16);
    decode_aarch32_instrs_LDMIB_A1enc_A_txt(cond, W, Rn, register_list)
}

val execute_aarch32_instrs_LDRB_i_OpA_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDRB_i_OpA_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(1, false, t, false)
    };
    R_set(t) = ZeroExtend(MemU_read(address, 1), 32);
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_LDRB_i_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDRB_i_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("LDRB (literal)"))
        };
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRBT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if t == 15 | wback & n == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRB_i_OpA_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitzero, _, _, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2210) = {
    SEE = 2210;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDRB_i_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm12)
}

val execute_aarch32_instrs_LDRB_i_OpT_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDRB_i_OpT_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(1, false, t, false)
    };
    R_set(t) = ZeroExtend(MemU_read(address, 1), 32);
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_LDRB_i_T1enc_A_txt : (bits(5), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_LDRB_i_T1enc_A_txt (imm5, Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm5, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        execute_aarch32_instrs_LDRB_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2211) = {
    SEE = 2211;
    let imm5 = Slice(__opcode, 6, 5);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_LDRB_i_T1enc_A_txt(imm5, Rn, Rt)
}

val decode_aarch32_instrs_LDRB_i_T2enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDRB_i_T2enc_A_txt (Rn, Rt, imm12) = {
    if ConditionPassed() then {
        if Rt == 0b1111 then {
            throw(Error_See("PLD"))
        };
        if Rn == 0b1111 then {
            throw(Error_See("LDRB (literal)"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        execute_aarch32_instrs_LDRB_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2212) = {
    SEE = 2212;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDRB_i_T2enc_A_txt(Rn, Rt, imm12)
}

val decode_aarch32_instrs_LDRB_i_T3enc_A_txt : (bits(4), bits(4), bits(1), bits(1), bits(1), bits(8)) -> unit

function decode_aarch32_instrs_LDRB_i_T3enc_A_txt (Rn, Rt, P, U, W, imm8) = {
    if ConditionPassed() then {
        if ((Rt == 0b1111 & P == 0b1) & U == 0b0) & W == 0b0 then {
            throw(Error_See("PLD, PLDW (immediate)"))
        };
        if Rn == 0b1111 then {
            throw(Error_See("LDRB (literal)"))
        };
        if (P == 0b1 & U == 0b1) & W == 0b0 then {
            throw(Error_See("LDRBT"))
        };
        if P == 0b0 & W == 0b0 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        if t == 15 & W == 0b1 | wback & n == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRB_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2213) = {
    SEE = 2213;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let P = Slice(__opcode, 10, 1);
    let U = Slice(__opcode, 9, 1);
    let W = Slice(__opcode, 8, 1);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDRB_i_T3enc_A_txt(Rn, Rt, P, U, W, imm8)
}

val execute_aarch32_instrs_LDRB_l_Op_A_txt : forall ('add : Bool) 't, (0 <= 't & 't <= 15).
  (bool('add), bits(32), int('t)) -> unit

function execute_aarch32_instrs_LDRB_l_Op_A_txt (add, imm32, t) = {
    let base : bits(32) = Align(PC_read__1(), 4);
    let address : bits(32) = if add then base + imm32 else base - imm32;
    if t != 15 then {
        AArch32_SetLSInstructionSyndrome(1, false, t, false)
    };
    R_set(t) = ZeroExtend(MemU_read(address, 1), 32)
}

val decode_aarch32_instrs_LDRB_l_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDRB_l_A1enc_A_txt (cond, P, U, W, Rt, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRBT"))
        };
        let 't = UInt(Rt);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if t == 15 | wback then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRB_l_Op_A_txt(add, imm32, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitzero, _, _, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2214) = {
    SEE = 2214;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDRB_l_A1enc_A_txt(cond, P, U, W, Rt, imm12)
}

val decode_aarch32_instrs_LDRB_l_T1enc_A_txt : (bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDRB_l_T1enc_A_txt (U, Rt, imm12) = {
    if ConditionPassed() then {
        if Rt == 0b1111 then {
            throw(Error_See("PLD"))
        };
        let 't = UInt(Rt);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = U == 0b1;
        execute_aarch32_instrs_LDRB_l_Op_A_txt(add, imm32, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2215) = {
    SEE = 2215;
    let U = Slice(__opcode, 23, 1);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDRB_l_T1enc_A_txt(U, Rt, imm12)
}

val execute_aarch32_instrs_LDRB_r_Op_A_txt : forall ('add : Bool) ('index : Bool) 'm 'n 'shift_n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('add), bool('index), int('m), int('n), int('shift_n), SRType, int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDRB_r_Op_A_txt (add, index, m, n, shift_n, shift_t, t, wback) = {
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(1, false, t, false)
    };
    R_set(t) = ZeroExtend(MemU_read(address, 1), 32);
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_LDRB_r_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_LDRB_r_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRBT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        if t == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        if wback & (n == 15 | n == t) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRB_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, _, _, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2216) = {
    SEE = 2216;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRB_r_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm5, stype, Rm)
}

val decode_aarch32_instrs_LDRB_r_T1enc_A_txt : (bits(3), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_LDRB_r_T1enc_A_txt (Rm, Rn, Rt) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_LDRB_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2217) = {
    SEE = 2217;
    let Rm = Slice(__opcode, 6, 3);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_LDRB_r_T1enc_A_txt(Rm, Rn, Rt)
}

val decode_aarch32_instrs_LDRB_r_T2enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_LDRB_r_T2enc_A_txt (Rn, Rt, imm2, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rt == 0b1111 then {
            throw(Error_See("PLD"))
        };
        if Rn == 0b1111 then {
            throw(Error_See("LDRB (literal)"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, UInt(imm2));
        let 'shift_n = shift_n;
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRB_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2218) = {
    SEE = 2218;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm2 = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRB_r_T2enc_A_txt(Rn, Rt, imm2, Rm)
}

val execute_aarch32_instrs_LDRBT_Op_A_txt : forall ('add : Bool) 'm 'n ('postindex : Bool) ('register_form : Bool) 'shift_n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), int('m), int('n), bool('postindex), bool('register_form), int('shift_n), SRType, int('t)) -> unit

function execute_aarch32_instrs_LDRBT_Op_A_txt (add, imm32, m, n, postindex, register_form, shift_n, shift_t, t) = {
    if PSTATE.EL == EL2 then {
        throw(Error_Unpredictable())
    };
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = if register_form then
      Shift(R_read(m), shift_t, shift_n, PSTATE.C)
    else
      imm32;
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if postindex then R_read(n) else offset_addr;
    if (not_bool(postindex) & t != 15) & PSTATE.T == 0b1 then {
        AArch32_SetLSInstructionSyndrome(1, false, t, false)
    };
    R_set(t) = ZeroExtend(MemU_unpriv_read(address, 1), 32);
    if postindex then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_LDRBT_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDRBT_A1enc_A_txt (cond, U, Rn, Rt, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        if (t == 15 | n == 15) | n == t then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        execute_aarch32_instrs_LDRBT_Op_A_txt(add, imm32, m, n, postindex, register_form, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitzero, bitzero, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2219) = {
    SEE = 2219;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDRBT_A1enc_A_txt(cond, U, Rn, Rt, imm12)
}

val decode_aarch32_instrs_LDRBT_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_LDRBT_A2enc_A_txt (cond, U, Rn, Rt, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        imm32 : bits(32) = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = true;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        if ((t == 15 | n == 15) | n == t) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_LDRBT_Op_A_txt(add, imm32, m, n, postindex, register_form, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2220) = {
    SEE = 2220;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRBT_A2enc_A_txt(cond, U, Rn, Rt, imm5, stype, Rm)
}

val decode_aarch32_instrs_LDRBT_T1enc_A_txt : (bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_LDRBT_T1enc_A_txt (Rn, Rt, imm8) = {
    if ConditionPassed() then {
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("LDRB (literal)"))
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = false;
        let add : bool = true;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRBT_Op_A_txt(add, imm32, m, n, postindex, register_form, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2221) = {
    SEE = 2221;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDRBT_T1enc_A_txt(Rn, Rt, imm8)
}

val execute_aarch32_instrs_LDRD_i_Op_A_txt : forall ('add : Bool) ('index : Bool) 'n 't 't2 ('wback : Bool),
  (0 <= 't2 & 't2 <= 16 & 0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), int('t2), bool('wback)) -> unit

function execute_aarch32_instrs_LDRD_i_Op_A_txt (add, imm32, index, n, t, t2, wback) = {
    data : bits(64) = undefined;
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if address == Align(address, 8) then {
        let data : bits(64) = MemA_read(address, 8);
        if BigEndian(AccType_ATOMIC) then {
            R_set(t) = data[63 .. 32];
            R_set(t2) = data[31 .. 0]
        } else {
            R_set(t) = data[31 .. 0];
            R_set(t2) = data[63 .. 32]
        }
    } else {
        R_set(t) = MemA_read(address, 4);
        R_set(t2) = MemA_read(address + 4, 4)
    };
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_LDRD_i_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRD_i_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("LDRD (literal)"))
        };
        if [Rt[0]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        let 't = UInt(Rt);
        let 't2 = t + 1;
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if P == 0b0 & W == 0b1 then {
            throw(Error_Unpredictable())
        };
        if wback & (n == t | n == t2) then {
            throw(Error_Unpredictable())
        };
        if t2 == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRD_i_Op_A_txt(add, imm32, index, n, t, t2, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2222) = {
    SEE = 2222;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRD_i_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm4H, imm4L)
}

val decode_aarch32_instrs_LDRD_i_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_LDRD_i_T1enc_A_txt (P, U, W, Rn, Rt, Rt2, imm8) = {
    if ConditionPassed() then {
        if P == 0b0 & W == 0b0 then {
            throw(Error_See("Related encodings"))
        };
        if Rn == 0b1111 then {
            throw(Error_See("LDRD (literal)"))
        };
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        if wback & (n == t | n == t2) then {
            throw(Error_Unpredictable())
        };
        if (t == 15 | t2 == 15) | t == t2 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRD_i_Op_A_txt(add, imm32, index, n, t, t2, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2223) = {
    SEE = 2223;
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rt2 = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDRD_i_T1enc_A_txt(P, U, W, Rn, Rt, Rt2, imm8)
}

val execute_aarch32_instrs_LDRD_l_Op_A_txt : forall ('add : Bool) 't 't2,
  (0 <= 't2 & 't2 <= 16 & 0 <= 't & 't <= 15).
  (bool('add), bits(32), int('t), int('t2)) -> unit

function execute_aarch32_instrs_LDRD_l_Op_A_txt (add, imm32, t, t2) = {
    data : bits(64) = undefined;
    let address : bits(32) = if add then Align(PC_read__1(), 4) + imm32 else
      Align(PC_read__1(), 4) - imm32;
    if address == Align(address, 8) then {
        let data : bits(64) = MemA_read(address, 8);
        if BigEndian(AccType_ATOMIC) then {
            R_set(t) = data[63 .. 32];
            R_set(t2) = data[31 .. 0]
        } else {
            R_set(t) = data[31 .. 0];
            R_set(t2) = data[63 .. 32]
        }
    } else {
        R_set(t) = MemA_read(address, 4);
        R_set(t2) = MemA_read(address + 4, 4)
    }
}

val decode_aarch32_instrs_LDRD_l_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRD_l_A1enc_A_txt (cond, U, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if [Rt[0]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        let 't = UInt(Rt);
        let 't2 = t + 1;
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        let add : bool = U == 0b1;
        if t2 == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRD_l_Op_A_txt(add, imm32, t, t2)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, _, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2224) = {
    SEE = 2224;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    if [__opcode[24]] != 0b1 | [__opcode[21]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDRD_l_A1enc_A_txt(cond, U, Rt, imm4H, imm4L)
    }
}

val decode_aarch32_instrs_LDRD_l_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_LDRD_l_T1enc_A_txt (P, U, W, Rt, Rt2, imm8) = {
    if ConditionPassed() then {
        if P == 0b0 & W == 0b0 then {
            throw(Error_See("Related encodings"))
        };
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let add : bool = U == 0b1;
        if (t == 15 | t2 == 15) | t == t2 then {
            throw(Error_Unpredictable())
        };
        if W == 0b1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRD_l_Op_A_txt(add, imm32, t, t2)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2225) = {
    SEE = 2225;
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rt = Slice(__opcode, 12, 4);
    let Rt2 = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDRD_l_T1enc_A_txt(P, U, W, Rt, Rt2, imm8)
}

val execute_aarch32_instrs_LDRD_r_Op_A_txt : forall ('add : Bool) ('index : Bool) 'm 'n 't 't2 ('wback : Bool),
  (1 <= 't2 & 't2 <= 16 & 0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('add), bool('index), int('m), int('n), int('t), int('t2), bool('wback)) -> unit

function execute_aarch32_instrs_LDRD_r_Op_A_txt (add, index, m, n, t, t2, wback) = {
    data : bits(64) = undefined;
    let offset_addr : bits(32) = if add then R_read(n) + R_read(m) else
      R_read(n) - R_read(m);
    let address : bits(32) = if index then offset_addr else R_read(n);
    if address == Align(address, 8) then {
        let data : bits(64) = MemA_read(address, 8);
        if BigEndian(AccType_ATOMIC) then {
            R_set(t) = data[63 .. 32];
            R_set(t2) = data[31 .. 0]
        } else {
            R_set(t) = data[31 .. 0];
            R_set(t2) = data[63 .. 32]
        }
    } else {
        R_set(t) = MemA_read(address, 4);
        R_set(t2) = MemA_read(address + 4, 4)
    };
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_LDRD_r_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRD_r_A1enc_A_txt (cond, P, U, W, Rn, Rt, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if [Rt[0]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        let 't = UInt(Rt);
        let 't2 = t + 1;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if P == 0b0 & W == 0b1 then {
            throw(Error_Unpredictable())
        };
        if ((t2 == 15 | m == 15) | m == t) | m == t2 then {
            throw(Error_Unpredictable())
        };
        if wback & ((n == 15 | n == t) | n == t2) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRD_r_Op_A_txt(add, index, m, n, t, t2, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitzero, _, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2226) = {
    SEE = 2226;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDRD_r_A1enc_A_txt(cond, P, U, W, Rn, Rt, Rm)
    }
}

val execute_aarch32_instrs_LDREX_Op_A_txt : forall 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bits(32), int('n), int('t)) -> unit

function execute_aarch32_instrs_LDREX_Op_A_txt (imm32, n, t) = {
    let address : bits(32) = R_read(n) + imm32;
    AArch32_SetExclusiveMonitors(address, 4);
    R_set(t) = MemA_read(address, 4)
}

val decode_aarch32_instrs_LDREX_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDREX_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = Zeros(32);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDREX_Op_A_txt(imm32, n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2227) = {
    SEE = 2227;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDREX_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_LDREX_T1enc_A_txt : (bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_LDREX_T1enc_A_txt (Rn, Rt, imm8) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDREX_Op_A_txt(imm32, n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2228) = {
    SEE = 2228;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDREX_T1enc_A_txt(Rn, Rt, imm8)
    }
}

val execute_aarch32_instrs_LDREXB_Op_A_txt : forall 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t)) -> unit

function execute_aarch32_instrs_LDREXB_Op_A_txt (n, t) = {
    let address : bits(32) = R_read(n);
    AArch32_SetExclusiveMonitors(address, 1);
    R_set(t) = ZeroExtend(MemA_read(address, 1), 32)
}

val decode_aarch32_instrs_LDREXB_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDREXB_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDREXB_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2229) = {
    SEE = 2229;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDREXB_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_LDREXB_T1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDREXB_T1enc_A_txt (Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDREXB_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 2230) = {
    SEE = 2230;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDREXB_T1enc_A_txt(Rn, Rt)
    }
}

val execute_aarch32_instrs_LDREXD_Op_A_txt : forall 'n 't 't2,
  (0 <= 't2 & 't2 <= 16 & 0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t), int('t2)) -> unit

function execute_aarch32_instrs_LDREXD_Op_A_txt (n, t, t2) = {
    let address : bits(32) = R_read(n);
    AArch32_SetExclusiveMonitors(address, 8);
    let value_name : bits(64) = MemA_read(address, 8);
    R_set(t) = if BigEndian(AccType_ATOMIC) then value_name[63 .. 32] else
      value_name[31 .. 0];
    R_set(t2) = if BigEndian(AccType_ATOMIC) then value_name[31 .. 0] else
      value_name[63 .. 32]
}

val decode_aarch32_instrs_LDREXD_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDREXD_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 't2 = t + 1;
        let 'n = UInt(Rn);
        if ([Rt[0]] == 0b1 | t2 == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDREXD_Op_A_txt(n, t, t2)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2231) = {
    SEE = 2231;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDREXD_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_LDREXD_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDREXD_T1enc_A_txt (Rn, Rt, Rt2) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'n = UInt(Rn);
        if ((t == 15 | t2 == 15) | t == t2) | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDREXD_Op_A_txt(n, t, t2)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 2232) = {
    SEE = 2232;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rt2 = Slice(__opcode, 8, 4);
    if (([__opcode[0]] != 0b1 | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDREXD_T1enc_A_txt(Rn, Rt, Rt2)
    }
}

val execute_aarch32_instrs_LDREXH_Op_A_txt : forall 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t)) -> unit

function execute_aarch32_instrs_LDREXH_Op_A_txt (n, t) = {
    let address : bits(32) = R_read(n);
    AArch32_SetExclusiveMonitors(address, 2);
    R_set(t) = ZeroExtend(MemA_read(address, 2), 32)
}

val decode_aarch32_instrs_LDREXH_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDREXH_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDREXH_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2233) = {
    SEE = 2233;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDREXH_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_LDREXH_T1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDREXH_T1enc_A_txt (Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDREXH_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 2234) = {
    SEE = 2234;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDREXH_T1enc_A_txt(Rn, Rt)
    }
}

val execute_aarch32_instrs_LDRH_i_OpA_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDRH_i_OpA_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(2, false, t, false)
    };
    let data : bits(16) = MemU_read(address, 2);
    if wback then {
        R_set(n) = offset_addr
    };
    R_set(t) = ZeroExtend(data, 32)
}

val decode_aarch32_instrs_LDRH_i_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRH_i_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("LDRH (literal)"))
        };
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRHT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if t == 15 | wback & n == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRH_i_OpA_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2235) = {
    SEE = 2235;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRH_i_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm4H, imm4L)
}

val execute_aarch32_instrs_LDRH_i_OpT_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDRH_i_OpT_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(2, false, t, false)
    };
    let data : bits(16) = MemU_read(address, 2);
    if wback then {
        R_set(n) = offset_addr
    };
    R_set(t) = ZeroExtend(data, 32)
}

val decode_aarch32_instrs_LDRH_i_T1enc_A_txt : (bits(5), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_LDRH_i_T1enc_A_txt (imm5, Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm5 @ 0b0, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        execute_aarch32_instrs_LDRH_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2236) = {
    SEE = 2236;
    let imm5 = Slice(__opcode, 6, 5);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_LDRH_i_T1enc_A_txt(imm5, Rn, Rt)
}

val decode_aarch32_instrs_LDRH_i_T2enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDRH_i_T2enc_A_txt (Rn, Rt, imm12) = {
    if ConditionPassed() then {
        if Rt == 0b1111 then {
            throw(Error_See("PLD (immediate)"))
        };
        if Rn == 0b1111 then {
            throw(Error_See("LDRH (literal)"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        execute_aarch32_instrs_LDRH_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2237) = {
    SEE = 2237;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDRH_i_T2enc_A_txt(Rn, Rt, imm12)
}

val decode_aarch32_instrs_LDRH_i_T3enc_A_txt : (bits(4), bits(4), bits(1), bits(1), bits(1), bits(8)) -> unit

function decode_aarch32_instrs_LDRH_i_T3enc_A_txt (Rn, Rt, P, U, W, imm8) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("LDRH (literal)"))
        };
        if ((Rt == 0b1111 & P == 0b1) & U == 0b0) & W == 0b0 then {
            throw(Error_See("PLDW (immediate)"))
        };
        if (P == 0b1 & U == 0b1) & W == 0b0 then {
            throw(Error_See("LDRHT"))
        };
        if P == 0b0 & W == 0b0 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        if t == 15 & W == 0b1 | wback & n == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRH_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2238) = {
    SEE = 2238;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let P = Slice(__opcode, 10, 1);
    let U = Slice(__opcode, 9, 1);
    let W = Slice(__opcode, 8, 1);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDRH_i_T3enc_A_txt(Rn, Rt, P, U, W, imm8)
}

val execute_aarch32_instrs_LDRH_l_Op_A_txt : forall ('add : Bool) 't, (0 <= 't & 't <= 15).
  (bool('add), bits(32), int('t)) -> unit

function execute_aarch32_instrs_LDRH_l_Op_A_txt (add, imm32, t) = {
    let base : bits(32) = Align(PC_read__1(), 4);
    let address : bits(32) = if add then base + imm32 else base - imm32;
    if t != 15 then {
        AArch32_SetLSInstructionSyndrome(2, false, t, false)
    };
    let data : bits(16) = MemU_read(address, 2);
    R_set(t) = ZeroExtend(data, 32)
}

val decode_aarch32_instrs_LDRH_l_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRH_l_A1enc_A_txt (cond, P, U, W, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRHT"))
        };
        let 't = UInt(Rt);
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if t == 15 | wback then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRH_l_Op_A_txt(add, imm32, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2239) = {
    SEE = 2239;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRH_l_A1enc_A_txt(cond, P, U, W, Rt, imm4H, imm4L)
}

val decode_aarch32_instrs_LDRH_l_T1enc_A_txt : (bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDRH_l_T1enc_A_txt (U, Rt, imm12) = {
    if ConditionPassed() then {
        if Rt == 0b1111 then {
            throw(Error_See("PLD (literal)"))
        };
        let 't = UInt(Rt);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = U == 0b1;
        execute_aarch32_instrs_LDRH_l_Op_A_txt(add, imm32, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2240) = {
    SEE = 2240;
    let U = Slice(__opcode, 23, 1);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDRH_l_T1enc_A_txt(U, Rt, imm12)
}

val execute_aarch32_instrs_LDRH_r_Op_A_txt : forall ('add : Bool) ('index : Bool) 'm 'n 'shift_n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('add), bool('index), int('m), int('n), int('shift_n), SRType, int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDRH_r_Op_A_txt (add, index, m, n, shift_n, shift_t, t, wback) = {
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if t != 15 then {
        AArch32_SetLSInstructionSyndrome(2, false, t, false)
    };
    let data : bits(16) = MemU_read(address, 2);
    if wback then {
        R_set(n) = offset_addr
    };
    R_set(t) = ZeroExtend(data, 32)
}

val decode_aarch32_instrs_LDRH_r_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRH_r_A1enc_A_txt (cond, P, U, W, Rn, Rt, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRHT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        if t == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        if wback & (n == 15 | n == t) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRH_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitzero, _, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2241) = {
    SEE = 2241;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDRH_r_A1enc_A_txt(cond, P, U, W, Rn, Rt, Rm)
    }
}

val decode_aarch32_instrs_LDRH_r_T1enc_A_txt : (bits(3), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_LDRH_r_T1enc_A_txt (Rm, Rn, Rt) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_LDRH_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2242) = {
    SEE = 2242;
    let Rm = Slice(__opcode, 6, 3);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_LDRH_r_T1enc_A_txt(Rm, Rn, Rt)
}

val decode_aarch32_instrs_LDRH_r_T2enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_LDRH_r_T2enc_A_txt (Rn, Rt, imm2, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("LDRH (literal)"))
        };
        if Rt == 0b1111 then {
            throw(Error_See("PLDW (register)"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, UInt(imm2));
        let 'shift_n = shift_n;
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRH_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2243) = {
    SEE = 2243;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm2 = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRH_r_T2enc_A_txt(Rn, Rt, imm2, Rm)
}

val execute_aarch32_instrs_LDRHT_Op_A_txt : forall ('add : Bool) 'm 'n ('postindex : Bool) ('register_form : Bool) 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), int('m), int('n), bool('postindex), bool('register_form), int('t)) -> unit

function execute_aarch32_instrs_LDRHT_Op_A_txt (add, imm32, m, n, postindex, register_form, t) = {
    if PSTATE.EL == EL2 then {
        throw(Error_Unpredictable())
    };
    let offset : bits(32) = if register_form then R_read(m) else imm32;
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if postindex then R_read(n) else offset_addr;
    if (not_bool(postindex) & t != 15) & PSTATE.T == 0b1 then {
        AArch32_SetLSInstructionSyndrome(2, false, t, false)
    };
    let data : bits(16) = MemU_unpriv_read(address, 2);
    if postindex then {
        R_set(n) = offset_addr
    };
    R_set(t) = ZeroExtend(data, 32)
}

val decode_aarch32_instrs_LDRHT_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRHT_A1enc_A_txt (cond, U, Rn, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        if (t == 15 | n == 15) | n == t then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        execute_aarch32_instrs_LDRHT_Op_A_txt(add, imm32, m, n, postindex, register_form, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2244) = {
    SEE = 2244;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRHT_A1enc_A_txt(cond, U, Rn, Rt, imm4H, imm4L)
}

val decode_aarch32_instrs_LDRHT_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRHT_A2enc_A_txt (cond, U, Rn, Rt, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        imm32 : bits(32) = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = true;
        if ((t == 15 | n == 15) | n == t) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        execute_aarch32_instrs_LDRHT_Op_A_txt(add, imm32, m, n, postindex, register_form, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2245) = {
    SEE = 2245;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDRHT_A2enc_A_txt(cond, U, Rn, Rt, Rm)
    }
}

val decode_aarch32_instrs_LDRHT_T1enc_A_txt : (bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_LDRHT_T1enc_A_txt (Rn, Rt, imm8) = {
    if ConditionPassed() then {
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("LDRH (literal)"))
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = false;
        let add : bool = true;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRHT_Op_A_txt(add, imm32, m, n, postindex, register_form, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2246) = {
    SEE = 2246;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDRHT_T1enc_A_txt(Rn, Rt, imm8)
}

val execute_aarch32_instrs_LDR_i_OpA_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDR_i_OpA_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(4, false, t, false)
    };
    let data : bits(32) = MemU_read(address, 4);
    if wback then {
        R_set(n) = offset_addr
    };
    if t == 15 then {
        if address[1 .. 0] == 0b00 then {
            LoadWritePC(data)
        } else {
            throw(Error_Unpredictable())
        }
    } else {
        R_set(t) = data
    }
}

val decode_aarch32_instrs_LDR_i_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDR_i_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("LDR (literal)"))
        };
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if wback & n == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDR_i_OpA_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2247) = {
    SEE = 2247;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDR_i_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm12)
}

val execute_aarch32_instrs_LDR_i_OpT_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDR_i_OpT_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(4, false, t, false)
    };
    let data : bits(32) = MemU_read(address, 4);
    if wback then {
        R_set(n) = offset_addr
    };
    if t == 15 then {
        if address[1 .. 0] == 0b00 then {
            LoadWritePC(data)
        } else {
            throw(Error_Unpredictable())
        }
    } else {
        R_set(t) = data
    }
}

val decode_aarch32_instrs_LDR_i_T1enc_A_txt : (bits(5), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_LDR_i_T1enc_A_txt (imm5, Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm5 @ 0b00, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        execute_aarch32_instrs_LDR_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2248) = {
    SEE = 2248;
    let imm5 = Slice(__opcode, 6, 5);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_LDR_i_T1enc_A_txt(imm5, Rn, Rt)
}

val decode_aarch32_instrs_LDR_i_T2enc_A_txt : (bits(3), bits(8)) -> unit

function decode_aarch32_instrs_LDR_i_T2enc_A_txt (Rt, imm8) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = 13;
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        execute_aarch32_instrs_LDR_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2249) = {
    SEE = 2249;
    let Rt = Slice(__opcode, 8, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDR_i_T2enc_A_txt(Rt, imm8)
}

val decode_aarch32_instrs_LDR_i_T3enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDR_i_T3enc_A_txt (Rn, Rt, imm12) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("LDR (literal)"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        if (t == 15 & InITBlock()) & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDR_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2250) = {
    SEE = 2250;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDR_i_T3enc_A_txt(Rn, Rt, imm12)
}

val decode_aarch32_instrs_LDR_i_T4enc_A_txt : (bits(4), bits(4), bits(1), bits(1), bits(1), bits(8)) -> unit

function decode_aarch32_instrs_LDR_i_T4enc_A_txt (Rn, Rt, P, U, W, imm8) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("LDR (literal)"))
        };
        if (P == 0b1 & U == 0b1) & W == 0b0 then {
            throw(Error_See("LDRT"))
        };
        if P == 0b0 & W == 0b0 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        if wback & n == t | (t == 15 & InITBlock()) & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDR_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2251) = {
    SEE = 2251;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let P = Slice(__opcode, 10, 1);
    let U = Slice(__opcode, 9, 1);
    let W = Slice(__opcode, 8, 1);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDR_i_T4enc_A_txt(Rn, Rt, P, U, W, imm8)
}

val execute_aarch32_instrs_LDR_l_Op_A_txt : forall ('add : Bool) 't, (0 <= 't & 't <= 15).
  (bool('add), bits(32), int('t)) -> unit

function execute_aarch32_instrs_LDR_l_Op_A_txt (add, imm32, t) = {
    let base : bits(32) = Align(PC_read__1(), 4);
    let address : bits(32) = if add then base + imm32 else base - imm32;
    if t != 15 then {
        AArch32_SetLSInstructionSyndrome(4, false, t, false)
    };
    let data : bits(32) = MemU_read(address, 4);
    if t == 15 then {
        if address[1 .. 0] == 0b00 then {
            LoadWritePC(data)
        } else {
            throw(Error_Unpredictable())
        }
    } else {
        R_set(t) = data
    }
}

val decode_aarch32_instrs_LDR_l_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDR_l_A1enc_A_txt (cond, P, U, W, Rt, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRT"))
        };
        let 't = UInt(Rt);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if wback then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDR_l_Op_A_txt(add, imm32, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2252) = {
    SEE = 2252;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDR_l_A1enc_A_txt(cond, P, U, W, Rt, imm12)
}

val decode_aarch32_instrs_LDR_l_T1enc_A_txt : (bits(3), bits(8)) -> unit

function decode_aarch32_instrs_LDR_l_T1enc_A_txt (Rt, imm8) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let add : bool = true;
        execute_aarch32_instrs_LDR_l_Op_A_txt(add, imm32, t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2253) = {
    SEE = 2253;
    let Rt = Slice(__opcode, 8, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDR_l_T1enc_A_txt(Rt, imm8)
}

val decode_aarch32_instrs_LDR_l_T2enc_A_txt : (bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDR_l_T2enc_A_txt (U, Rt, imm12) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = U == 0b1;
        if (t == 15 & InITBlock()) & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDR_l_Op_A_txt(add, imm32, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2254) = {
    SEE = 2254;
    let U = Slice(__opcode, 23, 1);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDR_l_T2enc_A_txt(U, Rt, imm12)
}

val execute_aarch32_instrs_LDR_r_OpA_A_txt : forall ('add : Bool) ('index : Bool) 'm 'n 'shift_n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('add), bool('index), int('m), int('n), int('shift_n), SRType, int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDR_r_OpA_A_txt (add, index, m, n, shift_n, shift_t, t, wback) = {
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(4, false, t, false)
    };
    let data : bits(32) = MemU_read(address, 4);
    if wback then {
        R_set(n) = offset_addr
    };
    if t == 15 then {
        if address[1 .. 0] == 0b00 then {
            LoadWritePC(data)
        } else {
            throw(Error_Unpredictable())
        }
    } else {
        R_set(t) = data
    }
}

val decode_aarch32_instrs_LDR_r_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_LDR_r_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        if wback & (n == 15 | n == t) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDR_r_OpA_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, _, _, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2255) = {
    SEE = 2255;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDR_r_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm5, stype, Rm)
}

val execute_aarch32_instrs_LDR_r_OpT_A_txt : forall 'm 'n 'shift_n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (int('m), int('n), int('shift_n), SRType, int('t)) -> unit

function execute_aarch32_instrs_LDR_r_OpT_A_txt (m, n, shift_n, shift_t, t) = {
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    let offset_addr : bits(32) = R_read(n) + offset;
    let address : bits(32) = offset_addr;
    if t != 15 then {
        AArch32_SetLSInstructionSyndrome(4, false, t, false)
    };
    let data : bits(32) = MemU_read(address, 4);
    if t == 15 then {
        if address[1 .. 0] == 0b00 then {
            LoadWritePC(data)
        } else {
            throw(Error_Unpredictable())
        }
    } else {
        R_set(t) = data
    }
}

val decode_aarch32_instrs_LDR_r_T1enc_A_txt : (bits(3), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_LDR_r_T1enc_A_txt (Rm, Rn, Rt) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_LDR_r_OpT_A_txt(m, n, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2256) = {
    SEE = 2256;
    let Rm = Slice(__opcode, 6, 3);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_LDR_r_T1enc_A_txt(Rm, Rn, Rt)
}

val decode_aarch32_instrs_LDR_r_T2enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_LDR_r_T2enc_A_txt (Rn, Rt, imm2, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("LDR (literal)"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = (SRType_LSL, UInt(imm2));
        let 'shift_n = shift_n;
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        if (t == 15 & InITBlock()) & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDR_r_OpT_A_txt(m, n, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2257) = {
    SEE = 2257;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm2 = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDR_r_T2enc_A_txt(Rn, Rt, imm2, Rm)
}

val execute_aarch32_instrs_LDRSB_i_Op_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDRSB_i_Op_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(1, true, t, false)
    };
    R_set(t) = SignExtend(MemU_read(address, 1), 32);
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_LDRSB_i_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRSB_i_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("LDRSB (literal)"))
        };
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRSBT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if t == 15 | wback & n == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRSB_i_Op_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2258) = {
    SEE = 2258;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRSB_i_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm4H, imm4L)
}

val decode_aarch32_instrs_LDRSB_i_T1enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDRSB_i_T1enc_A_txt (Rn, Rt, imm12) = {
    if ConditionPassed() then {
        if Rt == 0b1111 then {
            throw(Error_See("PLI"))
        };
        if Rn == 0b1111 then {
            throw(Error_See("LDRSB (literal)"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        execute_aarch32_instrs_LDRSB_i_Op_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2259) = {
    SEE = 2259;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDRSB_i_T1enc_A_txt(Rn, Rt, imm12)
}

val decode_aarch32_instrs_LDRSB_i_T2enc_A_txt : (bits(4), bits(4), bits(1), bits(1), bits(1), bits(8)) -> unit

function decode_aarch32_instrs_LDRSB_i_T2enc_A_txt (Rn, Rt, P, U, W, imm8) = {
    if ConditionPassed() then {
        if ((Rt == 0b1111 & P == 0b1) & U == 0b0) & W == 0b0 then {
            throw(Error_See("PLI"))
        };
        if Rn == 0b1111 then {
            throw(Error_See("LDRSB (literal)"))
        };
        if (P == 0b1 & U == 0b1) & W == 0b0 then {
            throw(Error_See("LDRSBT"))
        };
        if P == 0b0 & W == 0b0 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        if t == 15 & W == 0b1 | wback & n == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRSB_i_Op_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2260) = {
    SEE = 2260;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let P = Slice(__opcode, 10, 1);
    let U = Slice(__opcode, 9, 1);
    let W = Slice(__opcode, 8, 1);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDRSB_i_T2enc_A_txt(Rn, Rt, P, U, W, imm8)
}

val execute_aarch32_instrs_LDRSB_l_Op_A_txt : forall ('add : Bool) 't, (0 <= 't & 't <= 15).
  (bool('add), bits(32), int('t)) -> unit

function execute_aarch32_instrs_LDRSB_l_Op_A_txt (add, imm32, t) = {
    let base : bits(32) = Align(PC_read__1(), 4);
    let address : bits(32) = if add then base + imm32 else base - imm32;
    if t != 15 then {
        AArch32_SetLSInstructionSyndrome(1, true, t, false)
    };
    R_set(t) = SignExtend(MemU_read(address, 1), 32)
}

val decode_aarch32_instrs_LDRSB_l_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRSB_l_A1enc_A_txt (cond, P, U, W, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRSBT"))
        };
        let 't = UInt(Rt);
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if t == 15 | wback then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRSB_l_Op_A_txt(add, imm32, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2261) = {
    SEE = 2261;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRSB_l_A1enc_A_txt(cond, P, U, W, Rt, imm4H, imm4L)
}

val decode_aarch32_instrs_LDRSB_l_T1enc_A_txt : (bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDRSB_l_T1enc_A_txt (U, Rt, imm12) = {
    if ConditionPassed() then {
        if Rt == 0b1111 then {
            throw(Error_See("PLI"))
        };
        let 't = UInt(Rt);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = U == 0b1;
        execute_aarch32_instrs_LDRSB_l_Op_A_txt(add, imm32, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2262) = {
    SEE = 2262;
    let U = Slice(__opcode, 23, 1);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDRSB_l_T1enc_A_txt(U, Rt, imm12)
}

val execute_aarch32_instrs_LDRSB_r_Op_A_txt : forall ('add : Bool) ('index : Bool) 'm 'n 'shift_n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('add), bool('index), int('m), int('n), int('shift_n), SRType, int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDRSB_r_Op_A_txt (add, index, m, n, shift_n, shift_t, t, wback) = {
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(1, true, t, false)
    };
    R_set(t) = SignExtend(MemU_read(address, 1), 32);
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_LDRSB_r_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRSB_r_A1enc_A_txt (cond, P, U, W, Rn, Rt, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRSBT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        if t == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        if wback & (n == 15 | n == t) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRSB_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitzero, _, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2263) = {
    SEE = 2263;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDRSB_r_A1enc_A_txt(cond, P, U, W, Rn, Rt, Rm)
    }
}

val decode_aarch32_instrs_LDRSB_r_T1enc_A_txt : (bits(3), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_LDRSB_r_T1enc_A_txt (Rm, Rn, Rt) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_LDRSB_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2264) = {
    SEE = 2264;
    let Rm = Slice(__opcode, 6, 3);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_LDRSB_r_T1enc_A_txt(Rm, Rn, Rt)
}

val decode_aarch32_instrs_LDRSB_r_T2enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_LDRSB_r_T2enc_A_txt (Rn, Rt, imm2, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rt == 0b1111 then {
            throw(Error_See("PLI"))
        };
        if Rn == 0b1111 then {
            throw(Error_See("LDRSB (literal)"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, UInt(imm2));
        let 'shift_n = shift_n;
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRSB_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2265) = {
    SEE = 2265;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm2 = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRSB_r_T2enc_A_txt(Rn, Rt, imm2, Rm)
}

val execute_aarch32_instrs_LDRSBT_Op_A_txt : forall ('add : Bool) 'm 'n ('postindex : Bool) ('register_form : Bool) 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), int('m), int('n), bool('postindex), bool('register_form), int('t)) -> unit

function execute_aarch32_instrs_LDRSBT_Op_A_txt (add, imm32, m, n, postindex, register_form, t) = {
    if PSTATE.EL == EL2 then {
        throw(Error_Unpredictable())
    };
    let offset : bits(32) = if register_form then R_read(m) else imm32;
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if postindex then R_read(n) else offset_addr;
    if (not_bool(postindex) & t != 15) & PSTATE.T == 0b1 then {
        AArch32_SetLSInstructionSyndrome(1, true, t, false)
    };
    R_set(t) = SignExtend(MemU_unpriv_read(address, 1), 32);
    if postindex then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_LDRSBT_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRSBT_A1enc_A_txt (cond, U, Rn, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        if (t == 15 | n == 15) | n == t then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        execute_aarch32_instrs_LDRSBT_Op_A_txt(add, imm32, m, n, postindex, register_form, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2266) = {
    SEE = 2266;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRSBT_A1enc_A_txt(cond, U, Rn, Rt, imm4H, imm4L)
}

val decode_aarch32_instrs_LDRSBT_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRSBT_A2enc_A_txt (cond, U, Rn, Rt, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        imm32 : bits(32) = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = true;
        if ((t == 15 | n == 15) | n == t) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        execute_aarch32_instrs_LDRSBT_Op_A_txt(add, imm32, m, n, postindex, register_form, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2267) = {
    SEE = 2267;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDRSBT_A2enc_A_txt(cond, U, Rn, Rt, Rm)
    }
}

val decode_aarch32_instrs_LDRSBT_T1enc_A_txt : (bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_LDRSBT_T1enc_A_txt (Rn, Rt, imm8) = {
    if ConditionPassed() then {
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("LDRSB (literal)"))
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = false;
        let add : bool = true;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRSBT_Op_A_txt(add, imm32, m, n, postindex, register_form, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2268) = {
    SEE = 2268;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDRSBT_T1enc_A_txt(Rn, Rt, imm8)
}

val execute_aarch32_instrs_LDRSH_i_Op_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDRSH_i_Op_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(2, true, t, false)
    };
    let data : bits(16) = MemU_read(address, 2);
    if wback then {
        R_set(n) = offset_addr
    };
    R_set(t) = SignExtend(data, 32)
}

val decode_aarch32_instrs_LDRSH_i_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRSH_i_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("LDRSH (literal)"))
        };
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRSHT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if t == 15 | wback & n == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRSH_i_Op_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2269) = {
    SEE = 2269;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRSH_i_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm4H, imm4L)
}

val decode_aarch32_instrs_LDRSH_i_T1enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDRSH_i_T1enc_A_txt (Rn, Rt, imm12) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("LDRSH (literal)"))
        };
        if Rt == 0b1111 then {
            throw(Error_See("Related instructions"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        execute_aarch32_instrs_LDRSH_i_Op_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2270) = {
    SEE = 2270;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDRSH_i_T1enc_A_txt(Rn, Rt, imm12)
}

val decode_aarch32_instrs_LDRSH_i_T2enc_A_txt : (bits(4), bits(4), bits(1), bits(1), bits(1), bits(8)) -> unit

function decode_aarch32_instrs_LDRSH_i_T2enc_A_txt (Rn, Rt, P, U, W, imm8) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("LDRSH (literal)"))
        };
        if ((Rt == 0b1111 & P == 0b1) & U == 0b0) & W == 0b0 then {
            throw(Error_See("Related instructions"))
        };
        if (P == 0b1 & U == 0b1) & W == 0b0 then {
            throw(Error_See("LDRSHT"))
        };
        if P == 0b0 & W == 0b0 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        if t == 15 & W == 0b1 | wback & n == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRSH_i_Op_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2271) = {
    SEE = 2271;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let P = Slice(__opcode, 10, 1);
    let U = Slice(__opcode, 9, 1);
    let W = Slice(__opcode, 8, 1);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDRSH_i_T2enc_A_txt(Rn, Rt, P, U, W, imm8)
}

val execute_aarch32_instrs_LDRSH_l_Op_A_txt : forall ('add : Bool) 't, (0 <= 't & 't <= 15).
  (bool('add), bits(32), int('t)) -> unit

function execute_aarch32_instrs_LDRSH_l_Op_A_txt (add, imm32, t) = {
    let base : bits(32) = Align(PC_read__1(), 4);
    let address : bits(32) = if add then base + imm32 else base - imm32;
    if t != 15 then {
        AArch32_SetLSInstructionSyndrome(2, true, t, false)
    };
    let data : bits(16) = MemU_read(address, 2);
    R_set(t) = SignExtend(data, 32)
}

val decode_aarch32_instrs_LDRSH_l_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRSH_l_A1enc_A_txt (cond, P, U, W, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRSHT"))
        };
        let 't = UInt(Rt);
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if t == 15 | wback then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRSH_l_Op_A_txt(add, imm32, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2272) = {
    SEE = 2272;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRSH_l_A1enc_A_txt(cond, P, U, W, Rt, imm4H, imm4L)
}

val decode_aarch32_instrs_LDRSH_l_T1enc_A_txt : (bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDRSH_l_T1enc_A_txt (U, Rt, imm12) = {
    if ConditionPassed() then {
        if Rt == 0b1111 then {
            throw(Error_See("Related instructions"))
        };
        let 't = UInt(Rt);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = U == 0b1;
        execute_aarch32_instrs_LDRSH_l_Op_A_txt(add, imm32, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2273) = {
    SEE = 2273;
    let U = Slice(__opcode, 23, 1);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDRSH_l_T1enc_A_txt(U, Rt, imm12)
}

val execute_aarch32_instrs_LDRSH_r_Op_A_txt : forall ('add : Bool) ('index : Bool) 'm 'n 'shift_n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('add), bool('index), int('m), int('n), int('shift_n), SRType, int('t), bool('wback)) -> unit

function execute_aarch32_instrs_LDRSH_r_Op_A_txt (add, index, m, n, shift_n, shift_t, t, wback) = {
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(2, true, t, false)
    };
    let data : bits(16) = MemU_read(address, 2);
    if wback then {
        R_set(n) = offset_addr
    };
    R_set(t) = SignExtend(data, 32)
}

val decode_aarch32_instrs_LDRSH_r_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRSH_r_A1enc_A_txt (cond, P, U, W, Rn, Rt, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("LDRSHT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        if t == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        if wback & (n == 15 | n == t) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRSH_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitzero, _, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2274) = {
    SEE = 2274;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDRSH_r_A1enc_A_txt(cond, P, U, W, Rn, Rt, Rm)
    }
}

val decode_aarch32_instrs_LDRSH_r_T1enc_A_txt : (bits(3), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_LDRSH_r_T1enc_A_txt (Rm, Rn, Rt) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_LDRSH_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2275) = {
    SEE = 2275;
    let Rm = Slice(__opcode, 6, 3);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_LDRSH_r_T1enc_A_txt(Rm, Rn, Rt)
}

val decode_aarch32_instrs_LDRSH_r_T2enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_LDRSH_r_T2enc_A_txt (Rn, Rt, imm2, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("LDRSH (literal)"))
        };
        if Rt == 0b1111 then {
            throw(Error_See("Related instructions"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, UInt(imm2));
        let 'shift_n = shift_n;
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRSH_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2276) = {
    SEE = 2276;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm2 = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRSH_r_T2enc_A_txt(Rn, Rt, imm2, Rm)
}

val execute_aarch32_instrs_LDRSHT_Op_A_txt : forall ('add : Bool) 'm 'n ('postindex : Bool) ('register_form : Bool) 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), int('m), int('n), bool('postindex), bool('register_form), int('t)) -> unit

function execute_aarch32_instrs_LDRSHT_Op_A_txt (add, imm32, m, n, postindex, register_form, t) = {
    if PSTATE.EL == EL2 then {
        throw(Error_Unpredictable())
    };
    let offset : bits(32) = if register_form then R_read(m) else imm32;
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if postindex then R_read(n) else offset_addr;
    if (not_bool(postindex) & t != 15) & PSTATE.T == 0b1 then {
        AArch32_SetLSInstructionSyndrome(2, true, t, false)
    };
    let data : bits(16) = MemU_unpriv_read(address, 2);
    if postindex then {
        R_set(n) = offset_addr
    };
    R_set(t) = SignExtend(data, 32)
}

val decode_aarch32_instrs_LDRSHT_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRSHT_A1enc_A_txt (cond, U, Rn, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        if (t == 15 | n == 15) | n == t then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        execute_aarch32_instrs_LDRSHT_Op_A_txt(add, imm32, m, n, postindex, register_form, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2277) = {
    SEE = 2277;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRSHT_A1enc_A_txt(cond, U, Rn, Rt, imm4H, imm4L)
}

val decode_aarch32_instrs_LDRSHT_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDRSHT_A2enc_A_txt (cond, U, Rn, Rt, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        imm32 : bits(32) = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = true;
        if ((t == 15 | n == 15) | n == t) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        execute_aarch32_instrs_LDRSHT_Op_A_txt(add, imm32, m, n, postindex, register_form, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2278) = {
    SEE = 2278;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDRSHT_A2enc_A_txt(cond, U, Rn, Rt, Rm)
    }
}

val decode_aarch32_instrs_LDRSHT_T1enc_A_txt : (bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_LDRSHT_T1enc_A_txt (Rn, Rt, imm8) = {
    if ConditionPassed() then {
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("LDRSH (literal)"))
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = false;
        let add : bool = true;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRSHT_Op_A_txt(add, imm32, m, n, postindex, register_form, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2279) = {
    SEE = 2279;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDRSHT_T1enc_A_txt(Rn, Rt, imm8)
}

val execute_aarch32_instrs_LDRT_Op_A_txt : forall ('add : Bool) 'm 'n ('postindex : Bool) ('register_form : Bool) 'shift_n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), int('m), int('n), bool('postindex), bool('register_form), int('shift_n), SRType, int('t)) -> unit

function execute_aarch32_instrs_LDRT_Op_A_txt (add, imm32, m, n, postindex, register_form, shift_n, shift_t, t) = {
    if PSTATE.EL == EL2 then {
        throw(Error_Unpredictable())
    };
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = if register_form then
      Shift(R_read(m), shift_t, shift_n, PSTATE.C)
    else
      imm32;
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if postindex then R_read(n) else offset_addr;
    if (not_bool(postindex) & t != 15) & PSTATE.T == 0b1 then {
        AArch32_SetLSInstructionSyndrome(4, false, t, false)
    };
    let data : bits(32) = MemU_unpriv_read(address, 4);
    if postindex then {
        R_set(n) = offset_addr
    };
    R_set(t) = data
}

val decode_aarch32_instrs_LDRT_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_LDRT_A1enc_A_txt (cond, U, Rn, Rt, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        if (t == 15 | n == 15) | n == t then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        execute_aarch32_instrs_LDRT_Op_A_txt(add, imm32, m, n, postindex, register_form, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitzero, bitzero, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2280) = {
    SEE = 2280;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_LDRT_A1enc_A_txt(cond, U, Rn, Rt, imm12)
}

val decode_aarch32_instrs_LDRT_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_LDRT_A2enc_A_txt (cond, U, Rn, Rt, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        imm32 : bits(32) = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = true;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        if ((t == 15 | n == 15) | n == t) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_LDRT_Op_A_txt(add, imm32, m, n, postindex, register_form, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2281) = {
    SEE = 2281;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LDRT_A2enc_A_txt(cond, U, Rn, Rt, imm5, stype, Rm)
}

val decode_aarch32_instrs_LDRT_T1enc_A_txt : (bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_LDRT_T1enc_A_txt (Rn, Rt, imm8) = {
    if ConditionPassed() then {
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("LDR (literal)"))
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = false;
        let add : bool = true;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDRT_Op_A_txt(add, imm32, m, n, postindex, register_form, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2282) = {
    SEE = 2282;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_LDRT_T1enc_A_txt(Rn, Rt, imm8)
}

val execute_aarch32_instrs_LSL_i_Op_A_txt : forall 'd 'm ('setflags : Bool) 'shift_n,
  ('m in {0, 1, 2, 3, 4, 5, 6, 7} & 'd in {0, 1, 2, 3, 4, 5, 6, 7}).
  (int('d), int('m), bool('setflags), int('shift_n)) -> unit

function execute_aarch32_instrs_LSL_i_Op_A_txt (d, m, setflags, shift_n) = {
    carry : bits(1) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    (result, carry) = Shift_C(R_read(m), SRType_LSL, shift_n, PSTATE.C);
    if d == 15 then {
        ALUWritePC(result)
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_LSL_i_T1enc_A_txt : (bits(5), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_LSL_i_T1enc_A_txt (imm5, Rm, Rd) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        if imm5 == 0b00000 then {
            throw(Error_See("MOV (register)"))
        };
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        let (_, __tup_1 : int) = DecodeImmShift(0b00, imm5) in
          {
              shift_n = __tup_1
          };
        let 'shift_n = shift_n;
        execute_aarch32_instrs_LSL_i_Op_A_txt(d, m, setflags, shift_n)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2283) = {
    SEE = 2283;
    let imm5 = Slice(__opcode, 6, 5);
    let Rm = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_LSL_i_T1enc_A_txt(imm5, Rm, Rd)
}

val execute_aarch32_instrs_LSL_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_LSL_r_Op_A_txt (d, m, n, setflags) = {
    carry : bits(1) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(m)[7 .. 0]);
    (result, carry) = Shift_C(R_read(n), SRType_LSL, shift_n, PSTATE.C);
    R_set(d) = result;
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result);
        PSTATE.C = carry
    };
    ()
}

val decode_aarch32_instrs_LSL_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_LSL_r_T1enc_A_txt (Rm, Rdn) = {
    if ConditionPassed() then {
        let 'd = UInt(Rdn);
        let 'n = UInt(Rdn);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        execute_aarch32_instrs_LSL_r_Op_A_txt(d, m, n, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2284) = {
    SEE = 2284;
    let Rm = Slice(__opcode, 3, 3);
    let Rdn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_LSL_r_T1enc_A_txt(Rm, Rdn)
}

val decode_aarch32_instrs_LSL_r_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LSL_r_T2enc_A_txt (S, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LSL_r_Op_A_txt(d, m, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2285) = {
    SEE = 2285;
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_LSL_r_T2enc_A_txt(S, Rn, Rd, Rm)
}

val execute_aarch32_instrs_LSR_i_Op_A_txt : forall 'd 'm ('setflags : Bool) 'shift_n,
  ('m in {0, 1, 2, 3, 4, 5, 6, 7} & 'd in {0, 1, 2, 3, 4, 5, 6, 7}).
  (int('d), int('m), bool('setflags), int('shift_n)) -> unit

function execute_aarch32_instrs_LSR_i_Op_A_txt (d, m, setflags, shift_n) = {
    carry : bits(1) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    (result, carry) = Shift_C(R_read(m), SRType_LSR, shift_n, PSTATE.C);
    if d == 15 then {
        ALUWritePC(result)
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_LSR_i_T1enc_A_txt : (bits(5), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_LSR_i_T1enc_A_txt (imm5, Rm, Rd) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        let (_, __tup_1 : int) = DecodeImmShift(0b01, imm5) in
          {
              shift_n = __tup_1
          };
        let 'shift_n = shift_n;
        execute_aarch32_instrs_LSR_i_Op_A_txt(d, m, setflags, shift_n)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2286) = {
    SEE = 2286;
    let imm5 = Slice(__opcode, 6, 5);
    let Rm = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_LSR_i_T1enc_A_txt(imm5, Rm, Rd)
}

val execute_aarch32_instrs_LSR_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool),
  ('n in {0, 1, 2, 3, 4, 5, 6, 7} & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'd in {0, 1, 2, 3, 4, 5, 6, 7}).
  (int('d), int('m), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_LSR_r_Op_A_txt (d, m, n, setflags) = {
    carry : bits(1) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(m)[7 .. 0]);
    (result, carry) = Shift_C(R_read(n), SRType_LSR, shift_n, PSTATE.C);
    R_set(d) = result;
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result);
        PSTATE.C = carry
    };
    ()
}

val decode_aarch32_instrs_LSR_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_LSR_r_T1enc_A_txt (Rm, Rdn) = {
    if ConditionPassed() then {
        let 'd = UInt(Rdn);
        let 'n = UInt(Rdn);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        execute_aarch32_instrs_LSR_r_Op_A_txt(d, m, n, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 2287) = {
    SEE = 2287;
    let Rm = Slice(__opcode, 3, 3);
    let Rdn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_LSR_r_T1enc_A_txt(Rm, Rdn)
}

val execute_aarch32_instrs_MCR_Op_A_txt : forall 'cp 't,
  (0 <= 't & 't <= 15 & 'cp in {14, 15}).
  (int('cp), int('t)) -> unit

function execute_aarch32_instrs_MCR_Op_A_txt (cp, t) = {
    AArch32_SysRegWrite(cp, ThisInstr(), t)
}

val decode_aarch32_instrs_MCR_A1enc_A_txt : (bits(4), bits(3), bits(4), bits(4), bits(1), bits(3), bits(4)) -> unit

function decode_aarch32_instrs_MCR_A1enc_A_txt (cond, opc1, CRn, Rt, coproc, opc2, CRm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'cp = if [coproc[0]] == 0b0 then 14 else 15;
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MCR_Op_A_txt(cp, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2288) = {
    SEE = 2288;
    let cond = Slice(__opcode, 28, 4);
    let opc1 = Slice(__opcode, 21, 3);
    let CRn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let coproc = Slice(__opcode, 8, 1);
    let opc2 = Slice(__opcode, 5, 3);
    let CRm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MCR_A1enc_A_txt(cond, opc1, CRn, Rt, coproc, opc2, CRm)
}

val decode_aarch32_instrs_MCR_T1enc_A_txt : (bits(3), bits(4), bits(4), bits(1), bits(3), bits(4)) -> unit

function decode_aarch32_instrs_MCR_T1enc_A_txt (opc1, CRn, Rt, coproc, opc2, CRm) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'cp = if [coproc[0]] == 0b0 then 14 else 15;
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MCR_Op_A_txt(cp, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2289) = {
    SEE = 2289;
    let opc1 = Slice(__opcode, 21, 3);
    let CRn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let coproc = Slice(__opcode, 8, 1);
    let opc2 = Slice(__opcode, 5, 3);
    let CRm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MCR_T1enc_A_txt(opc1, CRn, Rt, coproc, opc2, CRm)
}

val execute_aarch32_instrs_MCRR_Op_A_txt : forall 'cp 't 't2,
  (0 <= 't2 & 't2 <= 15 & 0 <= 't & 't <= 15 & 'cp in {14, 15}).
  (int('cp), int('t), int('t2)) -> unit

function execute_aarch32_instrs_MCRR_Op_A_txt (cp, t, t2) = {
    AArch32_SysRegWrite64(cp, ThisInstr(), t, t2)
}

val decode_aarch32_instrs_MCRR_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MCRR_A1enc_A_txt (cond, Rt2, Rt, coproc, opc1, CRm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'cp = if [coproc[0]] == 0b0 then 14 else 15;
        if t == 15 | t2 == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MCRR_Op_A_txt(cp, t, t2)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2290) = {
    SEE = 2290;
    let cond = Slice(__opcode, 28, 4);
    let Rt2 = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let coproc = Slice(__opcode, 8, 1);
    let opc1 = Slice(__opcode, 4, 4);
    let CRm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MCRR_A1enc_A_txt(cond, Rt2, Rt, coproc, opc1, CRm)
}

val decode_aarch32_instrs_MCRR_T1enc_A_txt : (bits(4), bits(4), bits(1), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MCRR_T1enc_A_txt (Rt2, Rt, coproc, opc1, CRm) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'cp = if [coproc[0]] == 0b0 then 14 else 15;
        if t == 15 | t2 == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MCRR_Op_A_txt(cp, t, t2)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2291) = {
    SEE = 2291;
    let Rt2 = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let coproc = Slice(__opcode, 8, 1);
    let opc1 = Slice(__opcode, 4, 4);
    let CRm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MCRR_T1enc_A_txt(Rt2, Rt, coproc, opc1, CRm)
}

val execute_aarch32_instrs_MLA_Op_A_txt : forall 'a 'd 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15 & 0 <= 'a & 'a <= 15).
  (int('a), int('d), int('m), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_MLA_Op_A_txt (a, d, m, n, setflags) = {
    let 'operand1 = SInt(R_read(n));
    let 'operand2 = SInt(R_read(m));
    let 'addend = SInt(R_read(a));
    let 'result = operand1 * operand2 + addend;
    R_set(d) = result[31 .. 0];
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result[31 .. 0])
    };
    ()
}

val decode_aarch32_instrs_MLA_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MLA_A1enc_A_txt (cond, S, Rd, Ra, Rm, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let setflags : bool = S == 0b1;
        if ((d == 15 | n == 15) | m == 15) | a == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MLA_Op_A_txt(a, d, m, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2292) = {
    SEE = 2292;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MLA_A1enc_A_txt(cond, S, Rd, Ra, Rm, Rn)
}

val decode_aarch32_instrs_MLA_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MLA_T1enc_A_txt (Rn, Ra, Rd, Rm) = {
    if ConditionPassed() then {
        if Ra == 0b1111 then {
            throw(Error_See("MUL"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let setflags : bool = false;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MLA_Op_A_txt(a, d, m, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2293) = {
    SEE = 2293;
    let Rn = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MLA_T1enc_A_txt(Rn, Ra, Rd, Rm)
}

val execute_aarch32_instrs_MLS_Op_A_txt : forall 'a 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15 & 0 <= 'a & 'a <= 15).
  (int('a), int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_MLS_Op_A_txt (a, d, m, n) = {
    let 'operand1 = SInt(R_read(n));
    let 'operand2 = SInt(R_read(m));
    let 'addend = SInt(R_read(a));
    let 'result = addend - operand1 * operand2;
    R_set(d) = result[31 .. 0]
}

val decode_aarch32_instrs_MLS_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MLS_A1enc_A_txt (cond, Rd, Ra, Rm, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        if ((d == 15 | n == 15) | m == 15) | a == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MLS_Op_A_txt(a, d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2294) = {
    SEE = 2294;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MLS_A1enc_A_txt(cond, Rd, Ra, Rm, Rn)
}

val decode_aarch32_instrs_MLS_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MLS_T1enc_A_txt (Rn, Ra, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        if ((d == 15 | n == 15) | m == 15) | a == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MLS_Op_A_txt(a, d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2295) = {
    SEE = 2295;
    let Rn = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MLS_T1enc_A_txt(Rn, Ra, Rd, Rm)
}

val execute_aarch32_instrs_MOV_i_Op_A_txt : forall 'd ('setflags : Bool), (0 <= 'd & 'd <= 15).
  (bits(1), int('d), bits(32), bool('setflags)) -> unit

function execute_aarch32_instrs_MOV_i_Op_A_txt (carry, d, imm32, setflags) = {
    let result : bits(32) = imm32;
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_MOV_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_MOV_i_A1enc_A_txt (cond, S, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'd = UInt(Rd);
        let setflags : bool = S == 0b1;
        (imm32, carry) = A32ExpandImm_C(imm12, PSTATE.C);
        execute_aarch32_instrs_MOV_i_Op_A_txt(carry, d, imm32, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2296) = {
    SEE = 2296;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    if (([__opcode[16]] != 0b0 | [__opcode[17]] != 0b0) | [__opcode[18]] != 0b0) | [__opcode[19]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MOV_i_A1enc_A_txt(cond, S, Rd, imm12)
    }
}

val decode_aarch32_instrs_MOV_i_A2enc_A_txt : (bits(4), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_MOV_i_A2enc_A_txt (cond, imm4, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        carry : bits(1) = undefined;
        let 'd = UInt(Rd);
        let setflags : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm4 @ imm12, 32);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        let carry = carry;
        execute_aarch32_instrs_MOV_i_Op_A_txt(carry, d, imm32, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2297) = {
    SEE = 2297;
    let cond = Slice(__opcode, 28, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_MOV_i_A2enc_A_txt(cond, imm4, Rd, imm12)
}

val decode_aarch32_instrs_MOV_i_T1enc_A_txt : (bits(3), bits(8)) -> unit

function decode_aarch32_instrs_MOV_i_T1enc_A_txt (Rd, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let setflags : bool = not_bool(InITBlock());
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        let carry : bits(1) = PSTATE.C;
        execute_aarch32_instrs_MOV_i_Op_A_txt(carry, d, imm32, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2298) = {
    SEE = 2298;
    let Rd = Slice(__opcode, 8, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_MOV_i_T1enc_A_txt(Rd, imm8)
}

val decode_aarch32_instrs_MOV_i_T2enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_MOV_i_T2enc_A_txt (i, S, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'd = UInt(Rd);
        let setflags : bool = S == 0b1;
        (imm32, carry) = T32ExpandImm_C((i @ imm3) @ imm8, PSTATE.C);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        let carry = carry;
        execute_aarch32_instrs_MOV_i_Op_A_txt(carry, d, imm32, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2299) = {
    SEE = 2299;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_MOV_i_T2enc_A_txt(i, S, imm3, Rd, imm8)
}

val decode_aarch32_instrs_MOV_i_T3enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_MOV_i_T3enc_A_txt (i, imm4, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        carry : bits(1) = undefined;
        let 'd = UInt(Rd);
        let setflags : bool = false;
        let imm32 : bits(32) = ZeroExtend(((imm4 @ i) @ imm3) @ imm8, 32);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        let carry = carry;
        execute_aarch32_instrs_MOV_i_Op_A_txt(carry, d, imm32, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2300) = {
    SEE = 2300;
    let i = Slice(__opcode, 26, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_MOV_i_T3enc_A_txt(i, imm4, imm3, Rd, imm8)
}

val execute_aarch32_instrs_MOV_r_Op_A_txt : forall 'd 'm ('setflags : Bool) 'shift_n,
  (0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_MOV_r_Op_A_txt (d, m, setflags, shift_n, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = shifted;
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_MOV_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_MOV_r_A1enc_A_txt (cond, S, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_MOV_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2301) = {
    SEE = 2301;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[16]] != 0b0 | [__opcode[17]] != 0b0) | [__opcode[18]] != 0b0) | [__opcode[19]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MOV_r_A1enc_A_txt(cond, S, Rd, imm5, stype, Rm)
    }
}

val decode_aarch32_instrs_MOV_r_T1enc_A_txt : (bits(1), bits(4), bits(3)) -> unit

function decode_aarch32_instrs_MOV_r_T1enc_A_txt (D, Rm, Rd) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(D @ Rd);
        let 'm = UInt(Rm);
        let setflags : bool = false;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        if (d == 15 & InITBlock()) & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_MOV_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2302) = {
    SEE = 2302;
    let D = Slice(__opcode, 7, 1);
    let Rm = Slice(__opcode, 3, 4);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_MOV_r_T1enc_A_txt(D, Rm, Rd)
}

val decode_aarch32_instrs_MOV_r_T2enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_MOV_r_T2enc_A_txt (Rm, Rd) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = true;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_MOV_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2303) = {
    SEE = 2303;
    let Rm = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_MOV_r_T2enc_A_txt(Rm, Rd)
}

val decode_aarch32_instrs_MOV_r_T3enc_A_txt : (bits(1), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_MOV_r_T3enc_A_txt (S, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_MOV_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2304) = {
    SEE = 2304;
    let S = Slice(__opcode, 20, 1);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MOV_r_T3enc_A_txt(S, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_MOV_rr_Op_A_txt : forall 'd 'm 's ('setflags : Bool),
  (0 <= 's & 's <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('s), bool('setflags), SRType) -> unit

function execute_aarch32_instrs_MOV_rr_Op_A_txt (d, m, s, setflags, shift_t) = {
    carry : bits(1) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    (result, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    R_set(d) = result;
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result);
        PSTATE.C = carry
    };
    ()
}

val decode_aarch32_instrs_MOV_rr_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_MOV_rr_A1enc_A_txt (cond, S, Rd, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if (d == 15 | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MOV_rr_Op_A_txt(d, m, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2305) = {
    SEE = 2305;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 12, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[16]] != 0b0 | [__opcode[17]] != 0b0) | [__opcode[18]] != 0b0) | [__opcode[19]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MOV_rr_A1enc_A_txt(cond, S, Rd, Rs, stype, Rm)
    }
}

val decode_aarch32_instrs_MOV_rr_T1enc_A_txt : (bits(4), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_MOV_rr_T1enc_A_txt (op, Rs, Rdm) = {
    if ConditionPassed() then {
        if not_bool(op == 0b0010 | op == 0b0011 | op == 0b0100 | op == 0b0111) then {
            throw(Error_See("Related encodings"))
        };
        let 'd = UInt(Rdm);
        let 'm = UInt(Rdm);
        let 's = UInt(Rs);
        let setflags : bool = not_bool(InITBlock());
        let shift_t : SRType = DecodeRegShift([op[2]] @ [op[0]]);
        execute_aarch32_instrs_MOV_rr_Op_A_txt(d, m, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2306) = {
    SEE = 2306;
    let op = Slice(__opcode, 6, 4);
    let Rs = Slice(__opcode, 3, 3);
    let Rdm = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_MOV_rr_T1enc_A_txt(op, Rs, Rdm)
}

val decode_aarch32_instrs_MOV_rr_T2enc_A_txt : (bits(2), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MOV_rr_T2enc_A_txt (stype, S, Rm, Rd, Rs) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if (d == 15 | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MOV_rr_Op_A_txt(d, m, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2307) = {
    SEE = 2307;
    let stype = Slice(__opcode, 21, 2);
    let S = Slice(__opcode, 20, 1);
    let Rm = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rs = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MOV_rr_T2enc_A_txt(stype, S, Rm, Rd, Rs)
}

val execute_aarch32_instrs_MOVT_Op_A_txt : forall 'd, (0 <= 'd & 'd <= 15).
  (int('d), bits(16)) -> unit

function execute_aarch32_instrs_MOVT_Op_A_txt (d, imm16) = {
    R_set(d) = [R_read(d) with 31 .. 16 = imm16]
}

val decode_aarch32_instrs_MOVT_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_MOVT_A1enc_A_txt (cond, imm4, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let imm16 : bits(16) = imm4 @ imm12;
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MOVT_Op_A_txt(d, imm16)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2308) = {
    SEE = 2308;
    let cond = Slice(__opcode, 28, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_MOVT_A1enc_A_txt(cond, imm4, Rd, imm12)
}

val decode_aarch32_instrs_MOVT_T1enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_MOVT_T1enc_A_txt (i, imm4, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let imm16 : bits(16) = ((imm4 @ i) @ imm3) @ imm8;
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MOVT_Op_A_txt(d, imm16)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2309) = {
    SEE = 2309;
    let i = Slice(__opcode, 26, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_MOVT_T1enc_A_txt(i, imm4, imm3, Rd, imm8)
}

val execute_aarch32_instrs_MRC_Op_A_txt : forall 'cp 't,
  (0 <= 't & 't <= 15 & 'cp in {14, 15}).
  (int('cp), int('t)) -> unit

function execute_aarch32_instrs_MRC_Op_A_txt (cp, t) = {
    if t != 15 | AArch32_SysRegReadCanWriteAPSR(cp, ThisInstr()) then {
        AArch32_SysRegRead(cp, ThisInstr(), t)
    } else {
        throw(Error_Unpredictable())
    }
}

val decode_aarch32_instrs_MRC_A1enc_A_txt : (bits(4), bits(3), bits(4), bits(4), bits(1), bits(3), bits(4)) -> unit

function decode_aarch32_instrs_MRC_A1enc_A_txt (cond, opc1, CRn, Rt, coproc, opc2, CRm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'cp = if [coproc[0]] == 0b0 then 14 else 15;
        execute_aarch32_instrs_MRC_Op_A_txt(cp, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2310) = {
    SEE = 2310;
    let cond = Slice(__opcode, 28, 4);
    let opc1 = Slice(__opcode, 21, 3);
    let CRn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let coproc = Slice(__opcode, 8, 1);
    let opc2 = Slice(__opcode, 5, 3);
    let CRm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MRC_A1enc_A_txt(cond, opc1, CRn, Rt, coproc, opc2, CRm)
}

val decode_aarch32_instrs_MRC_T1enc_A_txt : (bits(3), bits(4), bits(4), bits(1), bits(3), bits(4)) -> unit

function decode_aarch32_instrs_MRC_T1enc_A_txt (opc1, CRn, Rt, coproc, opc2, CRm) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'cp = if [coproc[0]] == 0b0 then 14 else 15;
        execute_aarch32_instrs_MRC_Op_A_txt(cp, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2311) = {
    SEE = 2311;
    let opc1 = Slice(__opcode, 21, 3);
    let CRn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let coproc = Slice(__opcode, 8, 1);
    let opc2 = Slice(__opcode, 5, 3);
    let CRm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MRC_T1enc_A_txt(opc1, CRn, Rt, coproc, opc2, CRm)
}

val execute_aarch32_instrs_MRRC_Op_A_txt : forall 'cp 't 't2,
  (0 <= 't2 & 't2 <= 15 & 0 <= 't & 't <= 15 & 'cp in {14, 15}).
  (int('cp), int('t), int('t2)) -> unit

function execute_aarch32_instrs_MRRC_Op_A_txt (cp, t, t2) = {
    AArch32_SysRegRead64(cp, ThisInstr(), t, t2)
}

val decode_aarch32_instrs_MRRC_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MRRC_A1enc_A_txt (cond, Rt2, Rt, coproc, opc1, CRm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'cp = if [coproc[0]] == 0b0 then 14 else 15;
        if (t == 15 | t2 == 15) | t == t2 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MRRC_Op_A_txt(cp, t, t2)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2312) = {
    SEE = 2312;
    let cond = Slice(__opcode, 28, 4);
    let Rt2 = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let coproc = Slice(__opcode, 8, 1);
    let opc1 = Slice(__opcode, 4, 4);
    let CRm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MRRC_A1enc_A_txt(cond, Rt2, Rt, coproc, opc1, CRm)
}

val decode_aarch32_instrs_MRRC_T1enc_A_txt : (bits(4), bits(4), bits(1), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MRRC_T1enc_A_txt (Rt2, Rt, coproc, opc1, CRm) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'cp = if [coproc[0]] == 0b0 then 14 else 15;
        if (t == 15 | t2 == 15) | t == t2 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MRRC_Op_A_txt(cp, t, t2)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2313) = {
    SEE = 2313;
    let Rt2 = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let coproc = Slice(__opcode, 8, 1);
    let opc1 = Slice(__opcode, 4, 4);
    let CRm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MRRC_T1enc_A_txt(Rt2, Rt, coproc, opc1, CRm)
}

val execute_aarch32_instrs_MUL_Op_A_txt : forall 'd 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_MUL_Op_A_txt (d, m, n, setflags) = {
    let 'operand1 = SInt(R_read(n));
    let 'operand2 = SInt(R_read(m));
    let 'result = operand1 * operand2;
    R_set(d) = result[31 .. 0];
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result[31 .. 0])
    };
    ()
}

val decode_aarch32_instrs_MUL_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MUL_A1enc_A_txt (cond, S, Rd, Rm, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MUL_Op_A_txt(d, m, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2314) = {
    SEE = 2314;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 16, 4);
    let Rm = Slice(__opcode, 8, 4);
    let Rn = Slice(__opcode, 0, 4);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MUL_A1enc_A_txt(cond, S, Rd, Rm, Rn)
    }
}

val decode_aarch32_instrs_MUL_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_MUL_T1enc_A_txt (Rn, Rdm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rdm);
        let 'n = UInt(Rn);
        let 'm = UInt(Rdm);
        let setflags : bool = not_bool(InITBlock());
        execute_aarch32_instrs_MUL_Op_A_txt(d, m, n, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 2315) = {
    SEE = 2315;
    let Rn = Slice(__opcode, 3, 3);
    let Rdm = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_MUL_T1enc_A_txt(Rn, Rdm)
}

val decode_aarch32_instrs_MUL_T2enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MUL_T2enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = false;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MUL_Op_A_txt(d, m, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2316) = {
    SEE = 2316;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MUL_T2enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_MVN_i_Op_A_txt : forall 'd ('setflags : Bool), (0 <= 'd & 'd <= 15).
  (bits(1), int('d), bits(32), bool('setflags)) -> unit

function execute_aarch32_instrs_MVN_i_Op_A_txt (carry, d, imm32, setflags) = {
    let result : bits(32) = not_vec(imm32);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_MVN_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_MVN_i_A1enc_A_txt (cond, S, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'd = UInt(Rd);
        let setflags : bool = S == 0b1;
        (imm32, carry) = A32ExpandImm_C(imm12, PSTATE.C);
        execute_aarch32_instrs_MVN_i_Op_A_txt(carry, d, imm32, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2317) = {
    SEE = 2317;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    if (([__opcode[16]] != 0b0 | [__opcode[17]] != 0b0) | [__opcode[18]] != 0b0) | [__opcode[19]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MVN_i_A1enc_A_txt(cond, S, Rd, imm12)
    }
}

val decode_aarch32_instrs_MVN_i_T1enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_MVN_i_T1enc_A_txt (i, S, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'd = UInt(Rd);
        let setflags : bool = S == 0b1;
        (imm32, carry) = T32ExpandImm_C((i @ imm3) @ imm8, PSTATE.C);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        let carry = carry;
        execute_aarch32_instrs_MVN_i_Op_A_txt(carry, d, imm32, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2318) = {
    SEE = 2318;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_MVN_i_T1enc_A_txt(i, S, imm3, Rd, imm8)
}

val execute_aarch32_instrs_MVN_r_Op_A_txt : forall 'd 'm ('setflags : Bool) 'shift_n,
  (0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_MVN_r_Op_A_txt (d, m, setflags, shift_n, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = not_vec(shifted);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_MVN_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_MVN_r_A1enc_A_txt (cond, S, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_MVN_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2319) = {
    SEE = 2319;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[16]] != 0b0 | [__opcode[17]] != 0b0) | [__opcode[18]] != 0b0) | [__opcode[19]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MVN_r_A1enc_A_txt(cond, S, Rd, imm5, stype, Rm)
    }
}

val decode_aarch32_instrs_MVN_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_MVN_r_T1enc_A_txt (Rm, Rd) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_MVN_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 2320) = {
    SEE = 2320;
    let Rm = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_MVN_r_T1enc_A_txt(Rm, Rd)
}

val decode_aarch32_instrs_MVN_r_T2enc_A_txt : (bits(1), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_MVN_r_T2enc_A_txt (S, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_MVN_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2321) = {
    SEE = 2321;
    let S = Slice(__opcode, 20, 1);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MVN_r_T2enc_A_txt(S, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_MVN_rr_Op_A_txt : forall 'd 'm 's ('setflags : Bool),
  (0 <= 's & 's <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('s), bool('setflags), SRType) -> unit

function execute_aarch32_instrs_MVN_rr_Op_A_txt (d, m, s, setflags, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = not_vec(shifted);
    R_set(d) = result;
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result);
        PSTATE.C = carry
    };
    ()
}

val decode_aarch32_instrs_MVN_rr_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_MVN_rr_A1enc_A_txt (cond, S, Rd, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if (d == 15 | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MVN_rr_Op_A_txt(d, m, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2322) = {
    SEE = 2322;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 12, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[16]] != 0b0 | [__opcode[17]] != 0b0) | [__opcode[18]] != 0b0) | [__opcode[19]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MVN_rr_A1enc_A_txt(cond, S, Rd, Rs, stype, Rm)
    }
}

val execute_aarch32_instrs_NOP_Op_A_txt : unit -> unit

function execute_aarch32_instrs_NOP_Op_A_txt () = {
    ()
}

val decode_aarch32_instrs_NOP_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_NOP_A1enc_A_txt cond = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        execute_aarch32_instrs_NOP_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2323) = {
    SEE = 2323;
    let cond = Slice(__opcode, 28, 4);
    if (((((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_NOP_A1enc_A_txt(cond)
    }
}

val decode_aarch32_instrs_NOP_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_NOP_T1enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_NOP_Op_A_txt()
    };
    ()
}

function clause __DecodeT16 ((pc, (0b1011111100000000 as __opcode)) if SEE < 2324) = {
    SEE = 2324;
    decode_aarch32_instrs_NOP_T1enc_A_txt()
}

val decode_aarch32_instrs_NOP_T2enc_A_txt : unit -> unit

function decode_aarch32_instrs_NOP_T2enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_NOP_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101011111000000000000000 as __opcode)) if SEE < 2325) = {
    SEE = 2325;
    if (((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_NOP_T2enc_A_txt()
    }
}

val execute_aarch32_instrs_ORN_i_Op_A_txt : forall 'd 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (bits(1), int('d), bits(32), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_ORN_i_Op_A_txt (carry, d, imm32, n, setflags) = {
    let result : bits(32) = R_read(n) | not_vec(imm32);
    R_set(d) = result;
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result);
        PSTATE.C = carry
    };
    ()
}

val decode_aarch32_instrs_ORN_i_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_ORN_i_T1enc_A_txt (i, S, Rn, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("MVN (immediate)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        (imm32, carry) = T32ExpandImm_C((i @ imm3) @ imm8, PSTATE.C);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ORN_i_Op_A_txt(carry, d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2326) = {
    SEE = 2326;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_ORN_i_T1enc_A_txt(i, S, Rn, imm3, Rd, imm8)
}

val execute_aarch32_instrs_ORN_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool) 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_ORN_r_Op_A_txt (d, m, n, setflags, shift_n, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = R_read(n) | not_vec(shifted);
    R_set(d) = result;
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result);
        PSTATE.C = carry
    };
    ()
}

val decode_aarch32_instrs_ORN_r_T1enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_ORN_r_T1enc_A_txt (S, Rn, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("MVN (register)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ORN_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2327) = {
    SEE = 2327;
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_ORN_r_T1enc_A_txt(S, Rn, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_ORR_i_Op_A_txt : forall 'd 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (bits(1), int('d), bits(32), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_ORR_i_Op_A_txt (carry, d, imm32, n, setflags) = {
    let result : bits(32) = R_read(n) | imm32;
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_ORR_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_ORR_i_A1enc_A_txt (cond, S, Rn, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        (imm32, carry) = A32ExpandImm_C(imm12, PSTATE.C);
        execute_aarch32_instrs_ORR_i_Op_A_txt(carry, d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2328) = {
    SEE = 2328;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_ORR_i_A1enc_A_txt(cond, S, Rn, Rd, imm12)
}

val decode_aarch32_instrs_ORR_i_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_ORR_i_T1enc_A_txt (i, S, Rn, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("MOV (immediate)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        (imm32, carry) = T32ExpandImm_C((i @ imm3) @ imm8, PSTATE.C);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ORR_i_Op_A_txt(carry, d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2329) = {
    SEE = 2329;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_ORR_i_T1enc_A_txt(i, S, Rn, imm3, Rd, imm8)
}

val execute_aarch32_instrs_ORR_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool) 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_ORR_r_Op_A_txt (d, m, n, setflags, shift_n, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = R_read(n) | shifted;
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            PSTATE.N = [result[31]];
            PSTATE.Z = IsZeroBit(result);
            PSTATE.C = carry
        };
        ()
    }
}

val decode_aarch32_instrs_ORR_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_ORR_r_A1enc_A_txt (cond, S, Rn, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_ORR_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2330) = {
    SEE = 2330;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_ORR_r_A1enc_A_txt(cond, S, Rn, Rd, imm5, stype, Rm)
}

val decode_aarch32_instrs_ORR_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_ORR_r_T1enc_A_txt (Rm, Rdn) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rdn);
        let 'n = UInt(Rdn);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_ORR_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2331) = {
    SEE = 2331;
    let Rm = Slice(__opcode, 3, 3);
    let Rdn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_ORR_r_T1enc_A_txt(Rm, Rdn)
}

val decode_aarch32_instrs_ORR_r_T2enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_ORR_r_T2enc_A_txt (S, Rn, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("Related encodings"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ORR_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2332) = {
    SEE = 2332;
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_ORR_r_T2enc_A_txt(S, Rn, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_ORR_rr_Op_A_txt : forall 'd 'm 'n 's ('setflags : Bool),
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('s), bool('setflags), SRType) -> unit

function execute_aarch32_instrs_ORR_rr_Op_A_txt (d, m, n, s, setflags, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = R_read(n) | shifted;
    R_set(d) = result;
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result);
        PSTATE.C = carry
    };
    ()
}

val decode_aarch32_instrs_ORR_rr_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_ORR_rr_A1enc_A_txt (cond, S, Rn, Rd, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if ((d == 15 | n == 15) | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ORR_rr_Op_A_txt(d, m, n, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2333) = {
    SEE = 2333;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_ORR_rr_A1enc_A_txt(cond, S, Rn, Rd, Rs, stype, Rm)
}

val execute_aarch32_instrs_PKH_Op_A_txt : forall 'd 'm 'n 'shift_n ('tbform : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('shift_n), SRType, bool('tbform)) -> unit

function execute_aarch32_instrs_PKH_Op_A_txt (d, m, n, shift_n, shift_t, tbform) = {
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let operand2 : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    R_set(d) = [R_read(d) with 15 .. 0 = if tbform then operand2[15 .. 0] else
      R_read(n)[15 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 16 = if tbform then R_read(n)[31 .. 16]
    else
      operand2[31 .. 16]]
}

val decode_aarch32_instrs_PKH_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(5), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_PKH_A1enc_A_txt (cond, Rn, Rd, imm5, tb, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let tbform : bool = tb == 0b1;
        (shift_t, shift_n) = DecodeImmShift(tb @ 0b0, imm5);
        let 'shift_n = shift_n;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_PKH_Op_A_txt(d, m, n, shift_n, shift_t, tbform)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2334) = {
    SEE = 2334;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let tb = Slice(__opcode, 6, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_PKH_A1enc_A_txt(cond, Rn, Rd, imm5, tb, Rm)
}

val decode_aarch32_instrs_PKH_T1enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_PKH_T1enc_A_txt (S, Rn, imm3, Rd, imm2, tb, T, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if S == 0b1 | T == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let tbform : bool = tb == 0b1;
        (shift_t, shift_n) = DecodeImmShift(tb @ 0b0, imm3 @ imm2);
        let 'shift_n = shift_n;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_PKH_Op_A_txt(d, m, n, shift_n, shift_t, tbform)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2335) = {
    SEE = 2335;
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let tb = Slice(__opcode, 5, 1);
    let T = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_PKH_T1enc_A_txt(S, Rn, imm3, Rd, imm2, tb, T, Rm)
    }
}

val execute_aarch32_instrs_PLD_i_Op_A_txt : forall ('add : Bool) ('is_pldw : Bool) 'n,
  (0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('is_pldw), int('n)) -> unit

function execute_aarch32_instrs_PLD_i_Op_A_txt (add, imm32, is_pldw, n) = {
    let address : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    if is_pldw then {
        Hint_PreloadDataForWrite(address)
    } else {
        Hint_PreloadData(address)
    }
}

val decode_aarch32_instrs_PLD_i_A1enc_A_txt : (bits(1), bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_PLD_i_A1enc_A_txt (U, R, Rn, imm12) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("PLD (literal)"))
        };
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = U == 0b1;
        let is_pldw : bool = R == 0b0;
        execute_aarch32_instrs_PLD_i_Op_A_txt(add, imm32, is_pldw, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2336) = {
    SEE = 2336;
    let U = Slice(__opcode, 23, 1);
    let R = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_PLD_i_A1enc_A_txt(U, R, Rn, imm12)
}

val decode_aarch32_instrs_PLD_i_T1enc_A_txt : (bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_PLD_i_T1enc_A_txt (W, Rn, imm12) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("PLD (literal)"))
        };
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = true;
        let is_pldw : bool = W == 0b1;
        execute_aarch32_instrs_PLD_i_Op_A_txt(add, imm32, is_pldw, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2337) = {
    SEE = 2337;
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_PLD_i_T1enc_A_txt(W, Rn, imm12)
}

val decode_aarch32_instrs_PLD_i_T2enc_A_txt : (bits(1), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_PLD_i_T2enc_A_txt (W, Rn, imm8) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("PLD (literal)"))
        };
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        let add : bool = false;
        let is_pldw : bool = W == 0b1;
        execute_aarch32_instrs_PLD_i_Op_A_txt(add, imm32, is_pldw, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2338) = {
    SEE = 2338;
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_PLD_i_T2enc_A_txt(W, Rn, imm8)
}

val execute_aarch32_instrs_PLD_l_Op_A_txt : forall ('add : Bool).
  (bool('add), bits(32)) -> unit

function execute_aarch32_instrs_PLD_l_Op_A_txt (add, imm32) = {
    let address : bits(32) = if add then Align(PC_read__1(), 4) + imm32 else
      Align(PC_read__1(), 4) - imm32;
    Hint_PreloadData(address)
}

val decode_aarch32_instrs_PLD_l_A1enc_A_txt : (bits(1), bits(12)) -> unit

function decode_aarch32_instrs_PLD_l_A1enc_A_txt (U, imm12) = {
    if ConditionPassed() then {
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = U == 0b1;
        execute_aarch32_instrs_PLD_l_Op_A_txt(add, imm32)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2339) = {
    SEE = 2339;
    let U = Slice(__opcode, 23, 1);
    let imm12 = Slice(__opcode, 0, 12);
    if [__opcode[22]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_PLD_l_A1enc_A_txt(U, imm12)
    }
}

val decode_aarch32_instrs_PLD_l_T1enc_A_txt : (bits(1), bits(12)) -> unit

function decode_aarch32_instrs_PLD_l_T1enc_A_txt (U, imm12) = {
    if ConditionPassed() then {
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = U == 0b1;
        execute_aarch32_instrs_PLD_l_Op_A_txt(add, imm32)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2340) = {
    SEE = 2340;
    let U = Slice(__opcode, 23, 1);
    let imm12 = Slice(__opcode, 0, 12);
    if [__opcode[21]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_PLD_l_T1enc_A_txt(U, imm12)
    }
}

val execute_aarch32_instrs_PLD_r_Op_A_txt : forall ('add : Bool) ('is_pldw : Bool) 'm 'n 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('add), bool('is_pldw), int('m), int('n), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_PLD_r_Op_A_txt (add, is_pldw, m, n, shift_n, shift_t) = {
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    let address : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    if is_pldw then {
        Hint_PreloadDataForWrite(address)
    } else {
        Hint_PreloadData(address)
    }
}

val decode_aarch32_instrs_PLD_r_A1enc_A_txt : (bits(1), bits(1), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_PLD_r_A1enc_A_txt (U, R, Rn, imm5, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let add : bool = U == 0b1;
        let is_pldw : bool = R == 0b0;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        if m == 15 | n == 15 & is_pldw then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_PLD_r_Op_A_txt(add, is_pldw, m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2341) = {
    SEE = 2341;
    let U = Slice(__opcode, 23, 1);
    let R = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_PLD_r_A1enc_A_txt(U, R, Rn, imm5, stype, Rm)
}

val decode_aarch32_instrs_PLD_r_T1enc_A_txt : (bits(1), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_PLD_r_T1enc_A_txt (W, Rn, imm2, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("PLD (literal)"))
        };
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let add : bool = true;
        let is_pldw : bool = W == 0b1;
        (shift_t, shift_n) = (SRType_LSL, UInt(imm2));
        let 'shift_n = shift_n;
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_PLD_r_Op_A_txt(add, is_pldw, m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2342) = {
    SEE = 2342;
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm2 = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_PLD_r_T1enc_A_txt(W, Rn, imm2, Rm)
}

val execute_aarch32_instrs_PLI_i_Op_A_txt : forall ('add : Bool) 'n, (0 <= 'n & 'n <= 15).
  (bool('add), bits(32), int('n)) -> unit

function execute_aarch32_instrs_PLI_i_Op_A_txt (add, imm32, n) = {
    let base : bits(32) = if n == 15 then Align(PC_read__1(), 4) else R_read(n);
    let address : bits(32) = if add then base + imm32 else base - imm32;
    Hint_PreloadInstr(address)
}

val decode_aarch32_instrs_PLI_i_A1enc_A_txt : (bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_PLI_i_A1enc_A_txt (U, Rn, imm12) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = U == 0b1;
        execute_aarch32_instrs_PLI_i_Op_A_txt(add, imm32, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2343) = {
    SEE = 2343;
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_PLI_i_A1enc_A_txt(U, Rn, imm12)
}

val decode_aarch32_instrs_PLI_i_T1enc_A_txt : (bits(4), bits(12)) -> unit

function decode_aarch32_instrs_PLI_i_T1enc_A_txt (Rn, imm12) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("encoding T3"))
        };
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = true;
        execute_aarch32_instrs_PLI_i_Op_A_txt(add, imm32, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2344) = {
    SEE = 2344;
    let Rn = Slice(__opcode, 16, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_PLI_i_T1enc_A_txt(Rn, imm12)
}

val decode_aarch32_instrs_PLI_i_T2enc_A_txt : (bits(4), bits(8)) -> unit

function decode_aarch32_instrs_PLI_i_T2enc_A_txt (Rn, imm8) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("encoding T3"))
        };
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        let add : bool = false;
        execute_aarch32_instrs_PLI_i_Op_A_txt(add, imm32, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2345) = {
    SEE = 2345;
    let Rn = Slice(__opcode, 16, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_PLI_i_T2enc_A_txt(Rn, imm8)
}

val decode_aarch32_instrs_PLI_i_T3enc_A_txt : (bits(1), bits(12)) -> unit

function decode_aarch32_instrs_PLI_i_T3enc_A_txt (U, imm12) = {
    if ConditionPassed() then {
        let 'n = 15;
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let add : bool = U == 0b1;
        execute_aarch32_instrs_PLI_i_Op_A_txt(add, imm32, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2346) = {
    SEE = 2346;
    let U = Slice(__opcode, 23, 1);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_PLI_i_T3enc_A_txt(U, imm12)
}

val execute_aarch32_instrs_PLI_r_Op_A_txt : forall ('add : Bool) 'm 'n 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('add), int('m), int('n), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_PLI_r_Op_A_txt (add, m, n, shift_n, shift_t) = {
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    let address : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    Hint_PreloadInstr(address)
}

val decode_aarch32_instrs_PLI_r_A1enc_A_txt : (bits(1), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_PLI_r_A1enc_A_txt (U, Rn, imm5, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let add : bool = U == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_PLI_r_Op_A_txt(add, m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, _, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2347) = {
    SEE = 2347;
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_PLI_r_A1enc_A_txt(U, Rn, imm5, stype, Rm)
}

val decode_aarch32_instrs_PLI_r_T1enc_A_txt : (bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_PLI_r_T1enc_A_txt (Rn, imm2, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_See("PLI (immediate, literal)"))
        };
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let add : bool = true;
        (shift_t, shift_n) = (SRType_LSL, UInt(imm2));
        let 'shift_n = shift_n;
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_PLI_r_Op_A_txt(add, m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2348) = {
    SEE = 2348;
    let Rn = Slice(__opcode, 16, 4);
    let imm2 = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_PLI_r_T1enc_A_txt(Rn, imm2, Rm)
}

val execute_aarch32_instrs_POP_Op_A_txt : forall ('UnalignedAllowed : Bool).
  (bool('UnalignedAllowed), bits(16)) -> unit

function execute_aarch32_instrs_POP_Op_A_txt (UnalignedAllowed, registers) = {
    address : bits(32) = SP_read__1();
    foreach (i from 0 to 14 by 1 in inc) {
        if [registers[i]] == 0b1 then {
            R_set(i) = if UnalignedAllowed then MemU_read(address, 4) else
              MemA_read(address, 4);
            address = address + 4
        };
        ()
    };
    if [registers[15]] == 0b1 then {
        if UnalignedAllowed then {
            if address[1 .. 0] == 0b00 then {
                LoadWritePC(MemU_read(address, 4))
            } else {
                throw(Error_Unpredictable())
            }
        } else {
            LoadWritePC(MemA_read(address, 4))
        }
    };
    if [registers[13]] == 0b0 then {
        SP_write() = SP_read__1() + 4 * BitCount(registers)
    };
    if [registers[13]] == 0b1 then {
        SP_write() = __UNKNOWN_bits(32)
    };
    ()
}

val decode_aarch32_instrs_POP_T1enc_A_txt : (bits(1), bits(8)) -> unit

function decode_aarch32_instrs_POP_T1enc_A_txt (P, register_list) = {
    if ConditionPassed() then {
        let registers : bits(16) = (P @ 0b0000000) @ register_list;
        let UnalignedAllowed : bool = false;
        if BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        if ([registers[15]] == 0b1 & InITBlock()) & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_POP_Op_A_txt(UnalignedAllowed, registers)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2349) = {
    SEE = 2349;
    let P = Slice(__opcode, 8, 1);
    let register_list = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_POP_T1enc_A_txt(P, register_list)
}

val execute_aarch32_instrs_PUSH_Op_A_txt : forall ('UnalignedAllowed : Bool).
  (bool('UnalignedAllowed), bits(16)) -> unit

function execute_aarch32_instrs_PUSH_Op_A_txt (UnalignedAllowed, registers) = {
    address : bits(32) = SP_read__1() - 4 * BitCount(registers);
    foreach (i from 0 to 14 by 1 in inc) {
        if [registers[i]] == 0b1 then {
            if i == 13 & i != LowestSetBit(registers) then {
                MemA_set(address, 4) = __UNKNOWN_bits(32)
            } else {
                if UnalignedAllowed then {
                    MemU_set(address, 4) = R_read(i)
                } else {
                    MemA_set(address, 4) = R_read(i)
                }
            };
            address = address + 4
        };
        ()
    };
    if [registers[15]] == 0b1 then {
        if UnalignedAllowed then {
            MemU_set(address, 4) = PCStoreValue()
        } else {
            MemA_set(address, 4) = PCStoreValue()
        }
    };
    SP_write() = SP_read__1() - 4 * BitCount(registers)
}

val decode_aarch32_instrs_PUSH_T1enc_A_txt : (bits(1), bits(8)) -> unit

function decode_aarch32_instrs_PUSH_T1enc_A_txt (M, register_list) = {
    if ConditionPassed() then {
        let registers : bits(16) = ((0b0 @ M) @ 0b000000) @ register_list;
        let UnalignedAllowed : bool = false;
        if BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_PUSH_Op_A_txt(UnalignedAllowed, registers)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2350) = {
    SEE = 2350;
    let M = Slice(__opcode, 8, 1);
    let register_list = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_PUSH_T1enc_A_txt(M, register_list)
}

val execute_aarch32_instrs_QADD16_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_QADD16_Op_A_txt (d, m, n) = {
    let 'sum1 = SInt(R_read(n)[15 .. 0]) + SInt(R_read(m)[15 .. 0]);
    let 'sum2 = SInt(R_read(n)[31 .. 16]) + SInt(R_read(m)[31 .. 16]);
    R_set(d) = [R_read(d) with 15 .. 0 = SignedSat(sum1, 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = SignedSat(sum2, 16)]
}

val decode_aarch32_instrs_QADD16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QADD16_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QADD16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2351) = {
    SEE = 2351;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_QADD16_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_QADD16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QADD16_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QADD16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2352) = {
    SEE = 2352;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_QADD16_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_QADD8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_QADD8_Op_A_txt (d, m, n) = {
    let 'sum1 = SInt(R_read(n)[7 .. 0]) + SInt(R_read(m)[7 .. 0]);
    let 'sum2 = SInt(R_read(n)[15 .. 8]) + SInt(R_read(m)[15 .. 8]);
    let 'sum3 = SInt(R_read(n)[23 .. 16]) + SInt(R_read(m)[23 .. 16]);
    let 'sum4 = SInt(R_read(n)[31 .. 24]) + SInt(R_read(m)[31 .. 24]);
    R_set(d) = [R_read(d) with 7 .. 0 = SignedSat(sum1, 8)];
    R_set(d) = [R_read(d) with 15 .. 8 = SignedSat(sum2, 8)];
    R_set(d) = [R_read(d) with 23 .. 16 = SignedSat(sum3, 8)];
    R_set(d) = [R_read(d) with 31 .. 24 = SignedSat(sum4, 8)]
}

val decode_aarch32_instrs_QADD8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QADD8_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QADD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2353) = {
    SEE = 2353;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_QADD8_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_QADD8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QADD8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QADD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2354) = {
    SEE = 2354;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_QADD8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_QADD_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_QADD_Op_A_txt (d, m, n) = {
    sat : bool = undefined;
    let (__tup_0 : bits(32), __tup_1 : bool) =
      SignedSatQ(SInt(R_read(m)) + SInt(R_read(n)), 32)
    in
      {
          R_set(d) = __tup_0;
          sat = __tup_1
      };
    if sat then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_QADD_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QADD_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QADD_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2355) = {
    SEE = 2355;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_QADD_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_QADD_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QADD_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QADD_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2356) = {
    SEE = 2356;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_QADD_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_QASX_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_QASX_Op_A_txt (d, m, n) = {
    let 'diff = SInt(R_read(n)[15 .. 0]) - SInt(R_read(m)[31 .. 16]);
    let 'sum = SInt(R_read(n)[31 .. 16]) + SInt(R_read(m)[15 .. 0]);
    R_set(d) = [R_read(d) with 15 .. 0 = SignedSat(diff, 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = SignedSat(sum, 16)]
}

val decode_aarch32_instrs_QASX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QASX_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QASX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2357) = {
    SEE = 2357;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_QASX_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_QASX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QASX_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QASX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2358) = {
    SEE = 2358;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_QASX_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_QDADD_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_QDADD_Op_A_txt (d, m, n) = {
    doubled : bits(32) = undefined;
    sat1 : bool = undefined;
    (doubled, sat1) = SignedSatQ(2 * SInt(R_read(n)), 32);
    sat2 : bool = undefined;
    let (__tup_0 : bits(32), __tup_1 : bool) =
      SignedSatQ(SInt(R_read(m)) + SInt(doubled), 32)
    in
      {
          R_set(d) = __tup_0;
          sat2 = __tup_1
      };
    if sat1 | sat2 then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_QDADD_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QDADD_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QDADD_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2359) = {
    SEE = 2359;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_QDADD_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_QDADD_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QDADD_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QDADD_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2360) = {
    SEE = 2360;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_QDADD_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_QDSUB_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_QDSUB_Op_A_txt (d, m, n) = {
    doubled : bits(32) = undefined;
    sat1 : bool = undefined;
    (doubled, sat1) = SignedSatQ(2 * SInt(R_read(n)), 32);
    sat2 : bool = undefined;
    let (__tup_0 : bits(32), __tup_1 : bool) =
      SignedSatQ(SInt(R_read(m)) - SInt(doubled), 32)
    in
      {
          R_set(d) = __tup_0;
          sat2 = __tup_1
      };
    if sat1 | sat2 then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_QDSUB_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QDSUB_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QDSUB_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2361) = {
    SEE = 2361;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_QDSUB_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_QDSUB_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QDSUB_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QDSUB_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2362) = {
    SEE = 2362;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_QDSUB_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_QSAX_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_QSAX_Op_A_txt (d, m, n) = {
    let 'sum = SInt(R_read(n)[15 .. 0]) + SInt(R_read(m)[31 .. 16]);
    let 'diff = SInt(R_read(n)[31 .. 16]) - SInt(R_read(m)[15 .. 0]);
    R_set(d) = [R_read(d) with 15 .. 0 = SignedSat(sum, 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = SignedSat(diff, 16)]
}

val decode_aarch32_instrs_QSAX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QSAX_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QSAX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2363) = {
    SEE = 2363;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_QSAX_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_QSAX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QSAX_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QSAX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2364) = {
    SEE = 2364;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_QSAX_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_QSUB16_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_QSUB16_Op_A_txt (d, m, n) = {
    let 'diff1 = SInt(R_read(n)[15 .. 0]) - SInt(R_read(m)[15 .. 0]);
    let 'diff2 = SInt(R_read(n)[31 .. 16]) - SInt(R_read(m)[31 .. 16]);
    R_set(d) = [R_read(d) with 15 .. 0 = SignedSat(diff1, 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = SignedSat(diff2, 16)]
}

val decode_aarch32_instrs_QSUB16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QSUB16_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QSUB16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2365) = {
    SEE = 2365;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_QSUB16_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_QSUB16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QSUB16_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QSUB16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2366) = {
    SEE = 2366;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_QSUB16_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_QSUB8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_QSUB8_Op_A_txt (d, m, n) = {
    let 'diff1 = SInt(R_read(n)[7 .. 0]) - SInt(R_read(m)[7 .. 0]);
    let 'diff2 = SInt(R_read(n)[15 .. 8]) - SInt(R_read(m)[15 .. 8]);
    let 'diff3 = SInt(R_read(n)[23 .. 16]) - SInt(R_read(m)[23 .. 16]);
    let 'diff4 = SInt(R_read(n)[31 .. 24]) - SInt(R_read(m)[31 .. 24]);
    R_set(d) = [R_read(d) with 7 .. 0 = SignedSat(diff1, 8)];
    R_set(d) = [R_read(d) with 15 .. 8 = SignedSat(diff2, 8)];
    R_set(d) = [R_read(d) with 23 .. 16 = SignedSat(diff3, 8)];
    R_set(d) = [R_read(d) with 31 .. 24 = SignedSat(diff4, 8)]
}

val decode_aarch32_instrs_QSUB8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QSUB8_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QSUB8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2367) = {
    SEE = 2367;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_QSUB8_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_QSUB8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QSUB8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QSUB8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2368) = {
    SEE = 2368;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_QSUB8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_QSUB_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_QSUB_Op_A_txt (d, m, n) = {
    sat : bool = undefined;
    let (__tup_0 : bits(32), __tup_1 : bool) =
      SignedSatQ(SInt(R_read(m)) - SInt(R_read(n)), 32)
    in
      {
          R_set(d) = __tup_0;
          sat = __tup_1
      };
    if sat then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_QSUB_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QSUB_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QSUB_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2369) = {
    SEE = 2369;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_QSUB_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_QSUB_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_QSUB_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_QSUB_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2370) = {
    SEE = 2370;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_QSUB_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_RBIT_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_RBIT_Op_A_txt (d, m) = {
    result : bits(32) = undefined;
    foreach (i from 0 to 31 by 1 in inc) {
        result[31 - i] = Bit([R_read(m)[i]])
    };
    R_set(d) = result
}

val decode_aarch32_instrs_RBIT_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_RBIT_A1enc_A_txt (cond, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_RBIT_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2371) = {
    SEE = 2371;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_RBIT_A1enc_A_txt(cond, Rd, Rm)
    }
}

val decode_aarch32_instrs_RBIT_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_RBIT_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'n = UInt(Rn);
        if (m != n | d == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_RBIT_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2372) = {
    SEE = 2372;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_RBIT_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_REV16_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_REV16_Op_A_txt (d, m) = {
    result : bits(32) = undefined;
    result[31 .. 24] = R_read(m)[23 .. 16];
    result[23 .. 16] = R_read(m)[31 .. 24];
    result[15 .. 8] = R_read(m)[7 .. 0];
    result[7 .. 0] = R_read(m)[15 .. 8];
    R_set(d) = result
}

val decode_aarch32_instrs_REV16_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_REV16_A1enc_A_txt (cond, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_REV16_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2373) = {
    SEE = 2373;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_REV16_A1enc_A_txt(cond, Rd, Rm)
    }
}

val decode_aarch32_instrs_REV16_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_REV16_T1enc_A_txt (Rm, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        execute_aarch32_instrs_REV16_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 2374) = {
    SEE = 2374;
    let Rm = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_REV16_T1enc_A_txt(Rm, Rd)
}

val decode_aarch32_instrs_REV16_T2enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_REV16_T2enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'n = UInt(Rn);
        if (m != n | d == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_REV16_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2375) = {
    SEE = 2375;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_REV16_T2enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_REV_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_REV_Op_A_txt (d, m) = {
    result : bits(32) = undefined;
    result[31 .. 24] = R_read(m)[7 .. 0];
    result[23 .. 16] = R_read(m)[15 .. 8];
    result[15 .. 8] = R_read(m)[23 .. 16];
    result[7 .. 0] = R_read(m)[31 .. 24];
    R_set(d) = result
}

val decode_aarch32_instrs_REV_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_REV_A1enc_A_txt (cond, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_REV_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2376) = {
    SEE = 2376;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_REV_A1enc_A_txt(cond, Rd, Rm)
    }
}

val decode_aarch32_instrs_REV_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_REV_T1enc_A_txt (Rm, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        execute_aarch32_instrs_REV_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2377) = {
    SEE = 2377;
    let Rm = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_REV_T1enc_A_txt(Rm, Rd)
}

val decode_aarch32_instrs_REV_T2enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_REV_T2enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'n = UInt(Rn);
        if (m != n | d == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_REV_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2378) = {
    SEE = 2378;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_REV_T2enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_REVSH_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_REVSH_Op_A_txt (d, m) = {
    result : bits(32) = undefined;
    result[31 .. 8] = SignExtend(R_read(m)[7 .. 0], 24);
    result[7 .. 0] = R_read(m)[15 .. 8];
    R_set(d) = result
}

val decode_aarch32_instrs_REVSH_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_REVSH_A1enc_A_txt (cond, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_REVSH_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2379) = {
    SEE = 2379;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_REVSH_A1enc_A_txt(cond, Rd, Rm)
    }
}

val decode_aarch32_instrs_REVSH_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_REVSH_T1enc_A_txt (Rm, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        execute_aarch32_instrs_REVSH_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 2380) = {
    SEE = 2380;
    let Rm = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_REVSH_T1enc_A_txt(Rm, Rd)
}

val decode_aarch32_instrs_REVSH_T2enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_REVSH_T2enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'n = UInt(Rn);
        if (m != n | d == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_REVSH_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2381) = {
    SEE = 2381;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_REVSH_T2enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_ROR_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool),
  ('n in {0, 1, 2, 3, 4, 5, 6, 7} & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'd in {0, 1, 2, 3, 4, 5, 6, 7}).
  (int('d), int('m), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_ROR_r_Op_A_txt (d, m, n, setflags) = {
    carry : bits(1) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(m)[7 .. 0]);
    (result, carry) = Shift_C(R_read(n), SRType_ROR, shift_n, PSTATE.C);
    R_set(d) = result;
    if setflags then {
        PSTATE.N = [result[31]];
        PSTATE.Z = IsZeroBit(result);
        PSTATE.C = carry
    };
    ()
}

val decode_aarch32_instrs_ROR_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_ROR_r_T1enc_A_txt (Rm, Rdn) = {
    if ConditionPassed() then {
        let 'd = UInt(Rdn);
        let 'n = UInt(Rdn);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        execute_aarch32_instrs_ROR_r_Op_A_txt(d, m, n, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 2382) = {
    SEE = 2382;
    let Rm = Slice(__opcode, 3, 3);
    let Rdn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_ROR_r_T1enc_A_txt(Rm, Rdn)
}

val execute_aarch32_instrs_RSB_i_Op_A_txt : forall 'd 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), bits(32), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_RSB_i_Op_A_txt (d, imm32, n, setflags) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    (result, nzcv) = AddWithCarry(not_vec(R_read(n)), imm32, 0b1);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_RSB_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_RSB_i_A1enc_A_txt (cond, S, Rn, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = A32ExpandImm(imm12);
        execute_aarch32_instrs_RSB_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2383) = {
    SEE = 2383;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_RSB_i_A1enc_A_txt(cond, S, Rn, Rd, imm12)
}

val decode_aarch32_instrs_RSB_i_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_RSB_i_T1enc_A_txt (Rn, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = not_bool(InITBlock());
        let imm32 : bits(32) = Zeros(32);
        execute_aarch32_instrs_RSB_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 2384) = {
    SEE = 2384;
    let Rn = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_RSB_i_T1enc_A_txt(Rn, Rd)
}

val decode_aarch32_instrs_RSB_i_T2enc_A_txt : (bits(1), bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_RSB_i_T2enc_A_txt (i, S, Rn, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = T32ExpandImm((i @ imm3) @ imm8);
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_RSB_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2385) = {
    SEE = 2385;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_RSB_i_T2enc_A_txt(i, S, Rn, imm3, Rd, imm8)
}

val execute_aarch32_instrs_RSB_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool) 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_RSB_r_Op_A_txt (d, m, n, setflags, shift_n, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(not_vec(R_read(n)), shifted, 0b1);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_RSB_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_RSB_r_A1enc_A_txt (cond, S, Rn, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_RSB_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2386) = {
    SEE = 2386;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_RSB_r_A1enc_A_txt(cond, S, Rn, Rd, imm5, stype, Rm)
}

val decode_aarch32_instrs_RSB_r_T1enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_RSB_r_T1enc_A_txt (S, Rn, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_RSB_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2387) = {
    SEE = 2387;
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_RSB_r_T1enc_A_txt(S, Rn, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_RSB_rr_Op_A_txt : forall 'd 'm 'n 's ('setflags : Bool),
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('s), bool('setflags), SRType) -> unit

function execute_aarch32_instrs_RSB_rr_Op_A_txt (d, m, n, s, setflags, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(not_vec(R_read(n)), shifted, 0b1);
    R_set(d) = result;
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
    };
    ()
}

val decode_aarch32_instrs_RSB_rr_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_RSB_rr_A1enc_A_txt (cond, S, Rn, Rd, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if ((d == 15 | n == 15) | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_RSB_rr_Op_A_txt(d, m, n, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2388) = {
    SEE = 2388;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_RSB_rr_A1enc_A_txt(cond, S, Rn, Rd, Rs, stype, Rm)
}

val execute_aarch32_instrs_RSC_i_Op_A_txt : forall 'd 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), bits(32), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_RSC_i_Op_A_txt (d, imm32, n, setflags) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    (result, nzcv) = AddWithCarry(not_vec(R_read(n)), imm32, PSTATE.C);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_RSC_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_RSC_i_A1enc_A_txt (cond, S, Rn, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = A32ExpandImm(imm12);
        execute_aarch32_instrs_RSC_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2389) = {
    SEE = 2389;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_RSC_i_A1enc_A_txt(cond, S, Rn, Rd, imm12)
}

val execute_aarch32_instrs_RSC_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool) 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_RSC_r_Op_A_txt (d, m, n, setflags, shift_n, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(not_vec(R_read(n)), shifted, PSTATE.C);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_RSC_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_RSC_r_A1enc_A_txt (cond, S, Rn, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_RSC_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2390) = {
    SEE = 2390;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_RSC_r_A1enc_A_txt(cond, S, Rn, Rd, imm5, stype, Rm)
}

val execute_aarch32_instrs_RSC_rr_Op_A_txt : forall 'd 'm 'n 's ('setflags : Bool),
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('s), bool('setflags), SRType) -> unit

function execute_aarch32_instrs_RSC_rr_Op_A_txt (d, m, n, s, setflags, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(not_vec(R_read(n)), shifted, PSTATE.C);
    R_set(d) = result;
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
    };
    ()
}

val decode_aarch32_instrs_RSC_rr_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_RSC_rr_A1enc_A_txt (cond, S, Rn, Rd, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if ((d == 15 | n == 15) | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_RSC_rr_Op_A_txt(d, m, n, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2391) = {
    SEE = 2391;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_RSC_rr_A1enc_A_txt(cond, S, Rn, Rd, Rs, stype, Rm)
}

val execute_aarch32_instrs_SADD16_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SADD16_Op_A_txt (d, m, n) = {
    let 'sum1 = SInt(R_read(n)[15 .. 0]) + SInt(R_read(m)[15 .. 0]);
    let 'sum2 = SInt(R_read(n)[31 .. 16]) + SInt(R_read(m)[31 .. 16]);
    R_set(d) = [R_read(d) with 15 .. 0 = sum1[15 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 16 = sum2[15 .. 0]];
    PSTATE.GE[1 .. 0] = if sum1 >= 0 then 0b11 else 0b00;
    PSTATE.GE[3 .. 2] = if sum2 >= 0 then 0b11 else 0b00
}

val decode_aarch32_instrs_SADD16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SADD16_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SADD16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2392) = {
    SEE = 2392;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SADD16_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SADD16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SADD16_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SADD16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2393) = {
    SEE = 2393;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SADD16_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_SADD8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SADD8_Op_A_txt (d, m, n) = {
    let 'sum1 = SInt(R_read(n)[7 .. 0]) + SInt(R_read(m)[7 .. 0]);
    let 'sum2 = SInt(R_read(n)[15 .. 8]) + SInt(R_read(m)[15 .. 8]);
    let 'sum3 = SInt(R_read(n)[23 .. 16]) + SInt(R_read(m)[23 .. 16]);
    let 'sum4 = SInt(R_read(n)[31 .. 24]) + SInt(R_read(m)[31 .. 24]);
    R_set(d) = [R_read(d) with 7 .. 0 = sum1[7 .. 0]];
    R_set(d) = [R_read(d) with 15 .. 8 = sum2[7 .. 0]];
    R_set(d) = [R_read(d) with 23 .. 16 = sum3[7 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 24 = sum4[7 .. 0]];
    PSTATE.GE[0] = Bit(if sum1 >= 0 then 0b1 else 0b0);
    PSTATE.GE[1] = Bit(if sum2 >= 0 then 0b1 else 0b0);
    PSTATE.GE[2] = Bit(if sum3 >= 0 then 0b1 else 0b0);
    PSTATE.GE[3] = Bit(if sum4 >= 0 then 0b1 else 0b0)
}

val decode_aarch32_instrs_SADD8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SADD8_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SADD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2394) = {
    SEE = 2394;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SADD8_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SADD8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SADD8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SADD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2395) = {
    SEE = 2395;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SADD8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_SASX_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SASX_Op_A_txt (d, m, n) = {
    let 'diff = SInt(R_read(n)[15 .. 0]) - SInt(R_read(m)[31 .. 16]);
    let 'sum = SInt(R_read(n)[31 .. 16]) + SInt(R_read(m)[15 .. 0]);
    R_set(d) = [R_read(d) with 15 .. 0 = diff[15 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 16 = sum[15 .. 0]];
    PSTATE.GE[1 .. 0] = if diff >= 0 then 0b11 else 0b00;
    PSTATE.GE[3 .. 2] = if sum >= 0 then 0b11 else 0b00
}

val decode_aarch32_instrs_SASX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SASX_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SASX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2396) = {
    SEE = 2396;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SASX_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SASX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SASX_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SASX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2397) = {
    SEE = 2397;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SASX_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_SB_Op_A_txt : unit -> unit

function execute_aarch32_instrs_SB_Op_A_txt () = {
    SpeculationBarrier()
}

val decode_aarch32_instrs_SB_A1enc_A_txt : unit -> unit

function decode_aarch32_instrs_SB_A1enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_SB_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, (0b11110101011111111111000001110000 as __opcode)) if SEE < 2398) = {
    SEE = 2398;
    if (((((((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[12]] != 0b1) | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SB_A1enc_A_txt()
    }
}

val decode_aarch32_instrs_SB_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_SB_T1enc_A_txt () = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SB_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101111111000111101110000 as __opcode)) if SEE < 2399) = {
    SEE = 2399;
    if ((((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SB_T1enc_A_txt()
    }
}

val execute_aarch32_instrs_SBC_i_Op_A_txt : forall 'd 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), bits(32), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_SBC_i_Op_A_txt (d, imm32, n, setflags) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    (result, nzcv) = AddWithCarry(R_read(n), not_vec(imm32), PSTATE.C);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_SBC_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_SBC_i_A1enc_A_txt (cond, S, Rn, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = A32ExpandImm(imm12);
        execute_aarch32_instrs_SBC_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2400) = {
    SEE = 2400;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_SBC_i_A1enc_A_txt(cond, S, Rn, Rd, imm12)
}

val decode_aarch32_instrs_SBC_i_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_SBC_i_T1enc_A_txt (i, S, Rn, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = T32ExpandImm((i @ imm3) @ imm8);
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SBC_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2401) = {
    SEE = 2401;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_SBC_i_T1enc_A_txt(i, S, Rn, imm3, Rd, imm8)
}

val execute_aarch32_instrs_SBC_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool) 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_SBC_r_Op_A_txt (d, m, n, setflags, shift_n, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(R_read(n), not_vec(shifted), PSTATE.C);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_SBC_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SBC_r_A1enc_A_txt (cond, S, Rn, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_SBC_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2402) = {
    SEE = 2402;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SBC_r_A1enc_A_txt(cond, S, Rn, Rd, imm5, stype, Rm)
}

val decode_aarch32_instrs_SBC_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_SBC_r_T1enc_A_txt (Rm, Rdn) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rdn);
        let 'n = UInt(Rdn);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_SBC_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2403) = {
    SEE = 2403;
    let Rm = Slice(__opcode, 3, 3);
    let Rdn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_SBC_r_T1enc_A_txt(Rm, Rdn)
}

val decode_aarch32_instrs_SBC_r_T2enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SBC_r_T2enc_A_txt (S, Rn, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_SBC_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2404) = {
    SEE = 2404;
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SBC_r_T2enc_A_txt(S, Rn, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_SBC_rr_Op_A_txt : forall 'd 'm 'n 's ('setflags : Bool),
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('s), bool('setflags), SRType) -> unit

function execute_aarch32_instrs_SBC_rr_Op_A_txt (d, m, n, s, setflags, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(R_read(n), not_vec(shifted), PSTATE.C);
    R_set(d) = result;
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
    };
    ()
}

val decode_aarch32_instrs_SBC_rr_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SBC_rr_A1enc_A_txt (cond, S, Rn, Rd, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if ((d == 15 | n == 15) | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SBC_rr_Op_A_txt(d, m, n, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2405) = {
    SEE = 2405;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SBC_rr_A1enc_A_txt(cond, S, Rn, Rd, Rs, stype, Rm)
}

val execute_aarch32_instrs_SBFX_Op_A_txt : forall 'd 'lsbit 'n 'widthminus1,
  (0 <= 'widthminus1 & 'widthminus1 <= 31 & 0 <= 'n & 'n <= 15 & 0 <= 'lsbit & 'lsbit <= 31 & 0 <= 'd & 'd <= 15).
  (int('d), int('lsbit), int('n), int('widthminus1)) -> unit

function execute_aarch32_instrs_SBFX_Op_A_txt (d, lsbit, n, widthminus1) = {
    let 'msbit = lsbit + widthminus1;
    if msbit <= 31 then {
        R_set(d) = SignExtend(R_read(n)[msbit .. lsbit], 32)
    } else {
        throw(Error_Unpredictable())
    }
}

val decode_aarch32_instrs_SBFX_A1enc_A_txt : (bits(4), bits(5), bits(4), bits(5), bits(4)) -> unit

function decode_aarch32_instrs_SBFX_A1enc_A_txt (cond, widthm1, Rd, lsb, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'lsbit = UInt(lsb);
        let 'widthminus1 = UInt(widthm1);
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SBFX_Op_A_txt(d, lsbit, n, widthminus1)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2406) = {
    SEE = 2406;
    let cond = Slice(__opcode, 28, 4);
    let widthm1 = Slice(__opcode, 16, 5);
    let Rd = Slice(__opcode, 12, 4);
    let lsb = Slice(__opcode, 7, 5);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SBFX_A1enc_A_txt(cond, widthm1, Rd, lsb, Rn)
}

val decode_aarch32_instrs_SBFX_T1enc_A_txt : (bits(4), bits(3), bits(4), bits(2), bits(5)) -> unit

function decode_aarch32_instrs_SBFX_T1enc_A_txt (Rn, imm3, Rd, imm2, widthm1) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'lsbit = UInt(imm3 @ imm2);
        let 'widthminus1 = UInt(widthm1);
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SBFX_Op_A_txt(d, lsbit, n, widthminus1)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2407) = {
    SEE = 2407;
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let widthm1 = Slice(__opcode, 0, 5);
    if [__opcode[26]] != 0b0 | [__opcode[5]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SBFX_T1enc_A_txt(Rn, imm3, Rd, imm2, widthm1)
    }
}

val execute_aarch32_instrs_SDIV_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SDIV_Op_A_txt (d, m, n) = {
    result : int = undefined;
    if SInt(R_read(m)) == 0 then {
        result = 0
    } else {
        result = RoundTowardsZero(Real(SInt(R_read(n))) / Real(SInt(R_read(m))))
    };
    let 'result = result;
    R_set(d) = result[31 .. 0]
}

val decode_aarch32_instrs_SDIV_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SDIV_A1enc_A_txt (cond, Rd, Ra, Rm, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        if ((d == 15 | n == 15) | m == 15) | a != 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SDIV_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2408) = {
    SEE = 2408;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SDIV_A1enc_A_txt(cond, Rd, Ra, Rm, Rn)
}

val decode_aarch32_instrs_SDIV_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SDIV_T1enc_A_txt (Rn, Ra, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        if ((d == 15 | n == 15) | m == 15) | a != 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SDIV_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2409) = {
    SEE = 2409;
    let Rn = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SDIV_T1enc_A_txt(Rn, Ra, Rd, Rm)
}

val execute_aarch32_instrs_SEL_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SEL_Op_A_txt (d, m, n) = {
    R_set(d) = [R_read(d) with 7 .. 0 = if [PSTATE.GE[0]] == 0b1 then
      R_read(n)[7 .. 0]
    else
      R_read(m)[7 .. 0]];
    R_set(d) = [R_read(d) with 15 .. 8 = if [PSTATE.GE[1]] == 0b1 then
      R_read(n)[15 .. 8]
    else
      R_read(m)[15 .. 8]];
    R_set(d) = [R_read(d) with 23 .. 16 = if [PSTATE.GE[2]] == 0b1 then
      R_read(n)[23 .. 16]
    else
      R_read(m)[23 .. 16]];
    R_set(d) = [R_read(d) with 31 .. 24 = if [PSTATE.GE[3]] == 0b1 then
      R_read(n)[31 .. 24]
    else
      R_read(m)[31 .. 24]]
}

val decode_aarch32_instrs_SEL_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SEL_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SEL_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2410) = {
    SEE = 2410;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SEL_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SEL_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SEL_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SEL_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2411) = {
    SEE = 2411;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SEL_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_SETEND_Op_A_txt : forall ('set_bigend : Bool).
  bool('set_bigend) -> unit

function execute_aarch32_instrs_SETEND_Op_A_txt set_bigend = {
    AArch32_CheckSETENDEnabled();
    PSTATE.E = if set_bigend then 0b1 else 0b0
}

val decode_aarch32_instrs_SETEND_A1enc_A_txt : bits(1) -> unit

function decode_aarch32_instrs_SETEND_A1enc_A_txt E = {
    let set_bigend : bool = E == 0b1;
    execute_aarch32_instrs_SETEND_Op_A_txt(set_bigend)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2412) = {
    SEE = 2412;
    let E = Slice(__opcode, 9, 1);
    if ((((((((([__opcode[10]] != 0b0 | [__opcode[11]] != 0b0) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0) | [__opcode[8]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SETEND_A1enc_A_txt(E)
    }
}

val decode_aarch32_instrs_SETEND_T1enc_A_txt : bits(1) -> unit

function decode_aarch32_instrs_SETEND_T1enc_A_txt E = {
    let set_bigend : bool = E == 0b1;
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    execute_aarch32_instrs_SETEND_Op_A_txt(set_bigend)
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2413) = {
    SEE = 2413;
    let E = Slice(__opcode, 3, 1);
    if ([__opcode[0]] != 0b0 | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SETEND_T1enc_A_txt(E)
    }
}

val execute_aarch32_instrs_SEV_Op_A_txt : unit -> unit

function execute_aarch32_instrs_SEV_Op_A_txt () = {
    SendEvent()
}

val decode_aarch32_instrs_SEV_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_SEV_A1enc_A_txt cond = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        execute_aarch32_instrs_SEV_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2414) = {
    SEE = 2414;
    let cond = Slice(__opcode, 28, 4);
    if (((((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SEV_A1enc_A_txt(cond)
    }
}

val decode_aarch32_instrs_SEV_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_SEV_T1enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_SEV_Op_A_txt()
    };
    ()
}

function clause __DecodeT16 ((pc, (0b1011111101000000 as __opcode)) if SEE < 2415) = {
    SEE = 2415;
    decode_aarch32_instrs_SEV_T1enc_A_txt()
}

val decode_aarch32_instrs_SEV_T2enc_A_txt : unit -> unit

function decode_aarch32_instrs_SEV_T2enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_SEV_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101011111000000000000100 as __opcode)) if SEE < 2416) = {
    SEE = 2416;
    if (((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SEV_T2enc_A_txt()
    }
}

val execute_aarch32_instrs_SHADD16_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHADD16_Op_A_txt (d, m, n) = {
    let 'sum1 = SInt(R_read(n)[15 .. 0]) + SInt(R_read(m)[15 .. 0]);
    let 'sum2 = SInt(R_read(n)[31 .. 16]) + SInt(R_read(m)[31 .. 16]);
    R_set(d) = [R_read(d) with 15 .. 0 = sum1[16 .. 1]];
    R_set(d) = [R_read(d) with 31 .. 16 = sum2[16 .. 1]]
}

val decode_aarch32_instrs_SHADD16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SHADD16_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SHADD16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2417) = {
    SEE = 2417;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SHADD16_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SHADD16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SHADD16_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SHADD16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2418) = {
    SEE = 2418;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHADD16_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_SHADD8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHADD8_Op_A_txt (d, m, n) = {
    let 'sum1 = SInt(R_read(n)[7 .. 0]) + SInt(R_read(m)[7 .. 0]);
    let 'sum2 = SInt(R_read(n)[15 .. 8]) + SInt(R_read(m)[15 .. 8]);
    let 'sum3 = SInt(R_read(n)[23 .. 16]) + SInt(R_read(m)[23 .. 16]);
    let 'sum4 = SInt(R_read(n)[31 .. 24]) + SInt(R_read(m)[31 .. 24]);
    R_set(d) = [R_read(d) with 7 .. 0 = sum1[8 .. 1]];
    R_set(d) = [R_read(d) with 15 .. 8 = sum2[8 .. 1]];
    R_set(d) = [R_read(d) with 23 .. 16 = sum3[8 .. 1]];
    R_set(d) = [R_read(d) with 31 .. 24 = sum4[8 .. 1]]
}

val decode_aarch32_instrs_SHADD8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SHADD8_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SHADD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2419) = {
    SEE = 2419;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SHADD8_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SHADD8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SHADD8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SHADD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2420) = {
    SEE = 2420;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHADD8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_SHASX_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHASX_Op_A_txt (d, m, n) = {
    let 'diff = SInt(R_read(n)[15 .. 0]) - SInt(R_read(m)[31 .. 16]);
    let 'sum = SInt(R_read(n)[31 .. 16]) + SInt(R_read(m)[15 .. 0]);
    R_set(d) = [R_read(d) with 15 .. 0 = diff[16 .. 1]];
    R_set(d) = [R_read(d) with 31 .. 16 = sum[16 .. 1]]
}

val decode_aarch32_instrs_SHASX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SHASX_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SHASX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2421) = {
    SEE = 2421;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SHASX_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SHASX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SHASX_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SHASX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2422) = {
    SEE = 2422;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHASX_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_SHSAX_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHSAX_Op_A_txt (d, m, n) = {
    let 'sum = SInt(R_read(n)[15 .. 0]) + SInt(R_read(m)[31 .. 16]);
    let 'diff = SInt(R_read(n)[31 .. 16]) - SInt(R_read(m)[15 .. 0]);
    R_set(d) = [R_read(d) with 15 .. 0 = sum[16 .. 1]];
    R_set(d) = [R_read(d) with 31 .. 16 = diff[16 .. 1]]
}

val decode_aarch32_instrs_SHSAX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SHSAX_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SHSAX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2423) = {
    SEE = 2423;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SHSAX_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SHSAX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SHSAX_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SHSAX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2424) = {
    SEE = 2424;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHSAX_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_SHSUB16_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHSUB16_Op_A_txt (d, m, n) = {
    let 'diff1 = SInt(R_read(n)[15 .. 0]) - SInt(R_read(m)[15 .. 0]);
    let 'diff2 = SInt(R_read(n)[31 .. 16]) - SInt(R_read(m)[31 .. 16]);
    R_set(d) = [R_read(d) with 15 .. 0 = diff1[16 .. 1]];
    R_set(d) = [R_read(d) with 31 .. 16 = diff2[16 .. 1]]
}

val decode_aarch32_instrs_SHSUB16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SHSUB16_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SHSUB16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2425) = {
    SEE = 2425;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SHSUB16_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SHSUB16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SHSUB16_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SHSUB16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2426) = {
    SEE = 2426;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHSUB16_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_SHSUB8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHSUB8_Op_A_txt (d, m, n) = {
    let 'diff1 = SInt(R_read(n)[7 .. 0]) - SInt(R_read(m)[7 .. 0]);
    let 'diff2 = SInt(R_read(n)[15 .. 8]) - SInt(R_read(m)[15 .. 8]);
    let 'diff3 = SInt(R_read(n)[23 .. 16]) - SInt(R_read(m)[23 .. 16]);
    let 'diff4 = SInt(R_read(n)[31 .. 24]) - SInt(R_read(m)[31 .. 24]);
    R_set(d) = [R_read(d) with 7 .. 0 = diff1[8 .. 1]];
    R_set(d) = [R_read(d) with 15 .. 8 = diff2[8 .. 1]];
    R_set(d) = [R_read(d) with 23 .. 16 = diff3[8 .. 1]];
    R_set(d) = [R_read(d) with 31 .. 24 = diff4[8 .. 1]]
}

val decode_aarch32_instrs_SHSUB8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SHSUB8_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SHSUB8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2427) = {
    SEE = 2427;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SHSUB8_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SHSUB8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SHSUB8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SHSUB8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2428) = {
    SEE = 2428;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHSUB8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_SMLABB_Op_A_txt : forall 'a 'd 'm ('m_high : Bool) 'n ('n_high : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15 & 0 <= 'a & 'a <= 15).
  (int('a), int('d), int('m), bool('m_high), int('n), bool('n_high)) -> unit

function execute_aarch32_instrs_SMLABB_Op_A_txt (a, d, m, m_high, n, n_high) = {
    let operand1 : bits(16) = if n_high then R_read(n)[31 .. 16] else
      R_read(n)[15 .. 0];
    let operand2 : bits(16) = if m_high then R_read(m)[31 .. 16] else
      R_read(m)[15 .. 0];
    let 'result = SInt(operand1) * SInt(operand2) + SInt(R_read(a));
    R_set(d) = result[31 .. 0];
    if result != SInt(result[31 .. 0]) then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_SMLABB_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLABB_A1enc_A_txt (cond, Rd, Ra, Rm, M, N, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let n_high : bool = N == 0b1;
        let m_high : bool = M == 0b1;
        if ((d == 15 | n == 15) | m == 15) | a == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLABB_Op_A_txt(a, d, m, m_high, n, n_high)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2429) = {
    SEE = 2429;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 6, 1);
    let N = Slice(__opcode, 5, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLABB_A1enc_A_txt(cond, Rd, Ra, Rm, M, N, Rn)
}

val decode_aarch32_instrs_SMLABB_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLABB_T1enc_A_txt (Rn, Ra, Rd, N, M, Rm) = {
    if ConditionPassed() then {
        if Ra == 0b1111 then {
            throw(Error_See("SMULBB, SMULBT, SMULTB, SMULTT"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let n_high : bool = N == 0b1;
        let m_high : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLABB_Op_A_txt(a, d, m, m_high, n, n_high)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2430) = {
    SEE = 2430;
    let Rn = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 8, 4);
    let N = Slice(__opcode, 5, 1);
    let M = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLABB_T1enc_A_txt(Rn, Ra, Rd, N, M, Rm)
}

val execute_aarch32_instrs_SMLAD_Op_A_txt : forall 'a 'd 'm ('m_swap : Bool) 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15 & 0 <= 'a & 'a <= 15).
  (int('a), int('d), int('m), bool('m_swap), int('n)) -> unit

function execute_aarch32_instrs_SMLAD_Op_A_txt (a, d, m, m_swap, n) = {
    let operand2 : bits(32) = if m_swap then ROR(R_read(m), 16) else R_read(m);
    let 'product1 = SInt(R_read(n)[15 .. 0]) * SInt(operand2[15 .. 0]);
    let 'product2 = SInt(R_read(n)[31 .. 16]) * SInt(operand2[31 .. 16]);
    let 'result = product1 + product2 + SInt(R_read(a));
    R_set(d) = result[31 .. 0];
    if result != SInt(result[31 .. 0]) then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_SMLAD_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLAD_A1enc_A_txt (cond, Rd, Ra, Rm, M, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Ra == 0b1111 then {
            throw(Error_See("SMUAD"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let m_swap : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLAD_Op_A_txt(a, d, m, m_swap, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2431) = {
    SEE = 2431;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 5, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLAD_A1enc_A_txt(cond, Rd, Ra, Rm, M, Rn)
}

val decode_aarch32_instrs_SMLAD_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLAD_T1enc_A_txt (Rn, Ra, Rd, M, Rm) = {
    if ConditionPassed() then {
        if Ra == 0b1111 then {
            throw(Error_See("SMUAD"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let m_swap : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLAD_Op_A_txt(a, d, m, m_swap, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2432) = {
    SEE = 2432;
    let Rn = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLAD_T1enc_A_txt(Rn, Ra, Rd, M, Rm)
}

val execute_aarch32_instrs_SMLAL_Op_A_txt : forall 'dHi 'dLo 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'dLo & 'dLo <= 15 & 0 <= 'dHi & 'dHi <= 15).
  (int('dHi), int('dLo), int('m), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_SMLAL_Op_A_txt (dHi, dLo, m, n, setflags) = {
    let 'result = SInt(R_read(n)) * SInt(R_read(m)) + SInt(R_read(dHi) @ R_read(dLo));
    R_set(dHi) = result[63 .. 32];
    R_set(dLo) = result[31 .. 0];
    if setflags then {
        PSTATE.N = [result[63]];
        PSTATE.Z = IsZeroBit(result[63 .. 0])
    };
    ()
}

val decode_aarch32_instrs_SMLAL_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SMLAL_A1enc_A_txt (cond, S, RdHi, RdLo, Rm, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLAL_Op_A_txt(dHi, dLo, m, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2433) = {
    SEE = 2433;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let RdHi = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLAL_A1enc_A_txt(cond, S, RdHi, RdLo, Rm, Rn)
}

val decode_aarch32_instrs_SMLAL_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SMLAL_T1enc_A_txt (Rn, RdLo, RdHi, Rm) = {
    if ConditionPassed() then {
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = false;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLAL_Op_A_txt(dHi, dLo, m, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2434) = {
    SEE = 2434;
    let Rn = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let RdHi = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLAL_T1enc_A_txt(Rn, RdLo, RdHi, Rm)
}

val execute_aarch32_instrs_SMLALBB_Op_A_txt : forall 'dHi 'dLo 'm ('m_high : Bool) 'n ('n_high : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'dLo & 'dLo <= 15 & 0 <= 'dHi & 'dHi <= 15).
  (int('dHi), int('dLo), int('m), bool('m_high), int('n), bool('n_high)) -> unit

function execute_aarch32_instrs_SMLALBB_Op_A_txt (dHi, dLo, m, m_high, n, n_high) = {
    let operand1 : bits(16) = if n_high then R_read(n)[31 .. 16] else
      R_read(n)[15 .. 0];
    let operand2 : bits(16) = if m_high then R_read(m)[31 .. 16] else
      R_read(m)[15 .. 0];
    let 'result = SInt(operand1) * SInt(operand2) + SInt(R_read(dHi) @ R_read(dLo));
    R_set(dHi) = result[63 .. 32];
    R_set(dLo) = result[31 .. 0]
}

val decode_aarch32_instrs_SMLALBB_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLALBB_A1enc_A_txt (cond, RdHi, RdLo, Rm, M, N, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let n_high : bool = N == 0b1;
        let m_high : bool = M == 0b1;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLALBB_Op_A_txt(dHi, dLo, m, m_high, n, n_high)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2435) = {
    SEE = 2435;
    let cond = Slice(__opcode, 28, 4);
    let RdHi = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 6, 1);
    let N = Slice(__opcode, 5, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLALBB_A1enc_A_txt(cond, RdHi, RdLo, Rm, M, N, Rn)
}

val decode_aarch32_instrs_SMLALBB_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLALBB_T1enc_A_txt (Rn, RdLo, RdHi, N, M, Rm) = {
    if ConditionPassed() then {
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let n_high : bool = N == 0b1;
        let m_high : bool = M == 0b1;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLALBB_Op_A_txt(dHi, dLo, m, m_high, n, n_high)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2436) = {
    SEE = 2436;
    let Rn = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let RdHi = Slice(__opcode, 8, 4);
    let N = Slice(__opcode, 5, 1);
    let M = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLALBB_T1enc_A_txt(Rn, RdLo, RdHi, N, M, Rm)
}

val execute_aarch32_instrs_SMLALD_Op_A_txt : forall 'dHi 'dLo 'm ('m_swap : Bool) 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'dLo & 'dLo <= 15 & 0 <= 'dHi & 'dHi <= 15).
  (int('dHi), int('dLo), int('m), bool('m_swap), int('n)) -> unit

function execute_aarch32_instrs_SMLALD_Op_A_txt (dHi, dLo, m, m_swap, n) = {
    let operand2 : bits(32) = if m_swap then ROR(R_read(m), 16) else R_read(m);
    let 'product1 = SInt(R_read(n)[15 .. 0]) * SInt(operand2[15 .. 0]);
    let 'product2 = SInt(R_read(n)[31 .. 16]) * SInt(operand2[31 .. 16]);
    let 'result = product1 + product2 + SInt(R_read(dHi) @ R_read(dLo));
    R_set(dHi) = result[63 .. 32];
    R_set(dLo) = result[31 .. 0]
}

val decode_aarch32_instrs_SMLALD_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLALD_A1enc_A_txt (cond, RdHi, RdLo, Rm, M, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let m_swap : bool = M == 0b1;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLALD_Op_A_txt(dHi, dLo, m, m_swap, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2437) = {
    SEE = 2437;
    let cond = Slice(__opcode, 28, 4);
    let RdHi = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 5, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLALD_A1enc_A_txt(cond, RdHi, RdLo, Rm, M, Rn)
}

val decode_aarch32_instrs_SMLALD_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLALD_T1enc_A_txt (Rn, RdLo, RdHi, M, Rm) = {
    if ConditionPassed() then {
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let m_swap : bool = M == 0b1;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLALD_Op_A_txt(dHi, dLo, m, m_swap, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2438) = {
    SEE = 2438;
    let Rn = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let RdHi = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLALD_T1enc_A_txt(Rn, RdLo, RdHi, M, Rm)
}

val execute_aarch32_instrs_SMLAWB_Op_A_txt : forall 'a 'd 'm ('m_high : Bool) 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15 & 0 <= 'a & 'a <= 15).
  (int('a), int('d), int('m), bool('m_high), int('n)) -> unit

function execute_aarch32_instrs_SMLAWB_Op_A_txt (a, d, m, m_high, n) = {
    let operand2 : bits(16) = if m_high then R_read(m)[31 .. 16] else
      R_read(m)[15 .. 0];
    let 'result = SInt(R_read(n)) * SInt(operand2) + (SInt(R_read(a)) << 16);
    R_set(d) = result[47 .. 16];
    if (result >> 16) != SInt(R_read(d)) then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_SMLAWB_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLAWB_A1enc_A_txt (cond, Rd, Ra, Rm, M, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let m_high : bool = M == 0b1;
        if ((d == 15 | n == 15) | m == 15) | a == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLAWB_Op_A_txt(a, d, m, m_high, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, _, bitzero, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2439) = {
    SEE = 2439;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 6, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLAWB_A1enc_A_txt(cond, Rd, Ra, Rm, M, Rn)
}

val decode_aarch32_instrs_SMLAWB_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLAWB_T1enc_A_txt (Rn, Ra, Rd, M, Rm) = {
    if ConditionPassed() then {
        if Ra == 0b1111 then {
            throw(Error_See("SMULWB, SMULWT"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let m_high : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLAWB_Op_A_txt(a, d, m, m_high, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2440) = {
    SEE = 2440;
    let Rn = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLAWB_T1enc_A_txt(Rn, Ra, Rd, M, Rm)
}

val execute_aarch32_instrs_SMLSD_Op_A_txt : forall 'a 'd 'm ('m_swap : Bool) 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15 & 0 <= 'a & 'a <= 15).
  (int('a), int('d), int('m), bool('m_swap), int('n)) -> unit

function execute_aarch32_instrs_SMLSD_Op_A_txt (a, d, m, m_swap, n) = {
    let operand2 : bits(32) = if m_swap then ROR(R_read(m), 16) else R_read(m);
    let 'product1 = SInt(R_read(n)[15 .. 0]) * SInt(operand2[15 .. 0]);
    let 'product2 = SInt(R_read(n)[31 .. 16]) * SInt(operand2[31 .. 16]);
    let 'result = product1 - product2 + SInt(R_read(a));
    R_set(d) = result[31 .. 0];
    if result != SInt(result[31 .. 0]) then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_SMLSD_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLSD_A1enc_A_txt (cond, Rd, Ra, Rm, M, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Ra == 0b1111 then {
            throw(Error_See("SMUSD"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let m_swap : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLSD_Op_A_txt(a, d, m, m_swap, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2441) = {
    SEE = 2441;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 5, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLSD_A1enc_A_txt(cond, Rd, Ra, Rm, M, Rn)
}

val decode_aarch32_instrs_SMLSD_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLSD_T1enc_A_txt (Rn, Ra, Rd, M, Rm) = {
    if ConditionPassed() then {
        if Ra == 0b1111 then {
            throw(Error_See("SMUSD"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let m_swap : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLSD_Op_A_txt(a, d, m, m_swap, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2442) = {
    SEE = 2442;
    let Rn = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLSD_T1enc_A_txt(Rn, Ra, Rd, M, Rm)
}

val execute_aarch32_instrs_SMLSLD_Op_A_txt : forall 'dHi 'dLo 'm ('m_swap : Bool) 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'dLo & 'dLo <= 15 & 0 <= 'dHi & 'dHi <= 15).
  (int('dHi), int('dLo), int('m), bool('m_swap), int('n)) -> unit

function execute_aarch32_instrs_SMLSLD_Op_A_txt (dHi, dLo, m, m_swap, n) = {
    let operand2 : bits(32) = if m_swap then ROR(R_read(m), 16) else R_read(m);
    let 'product1 = SInt(R_read(n)[15 .. 0]) * SInt(operand2[15 .. 0]);
    let 'product2 = SInt(R_read(n)[31 .. 16]) * SInt(operand2[31 .. 16]);
    let 'result = product1 - product2 + SInt(R_read(dHi) @ R_read(dLo));
    R_set(dHi) = result[63 .. 32];
    R_set(dLo) = result[31 .. 0]
}

val decode_aarch32_instrs_SMLSLD_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLSLD_A1enc_A_txt (cond, RdHi, RdLo, Rm, M, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let m_swap : bool = M == 0b1;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLSLD_Op_A_txt(dHi, dLo, m, m_swap, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2443) = {
    SEE = 2443;
    let cond = Slice(__opcode, 28, 4);
    let RdHi = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 5, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLSLD_A1enc_A_txt(cond, RdHi, RdLo, Rm, M, Rn)
}

val decode_aarch32_instrs_SMLSLD_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMLSLD_T1enc_A_txt (Rn, RdLo, RdHi, M, Rm) = {
    if ConditionPassed() then {
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let m_swap : bool = M == 0b1;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMLSLD_Op_A_txt(dHi, dLo, m, m_swap, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2444) = {
    SEE = 2444;
    let Rn = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let RdHi = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMLSLD_T1enc_A_txt(Rn, RdLo, RdHi, M, Rm)
}

val execute_aarch32_instrs_SMMLA_Op_A_txt : forall 'a 'd 'm 'n ('round : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15 & 0 <= 'a & 'a <= 15).
  (int('a), int('d), int('m), int('n), bool('round)) -> unit

function execute_aarch32_instrs_SMMLA_Op_A_txt (a, d, m, n, round) = {
    result : int = (SInt(R_read(a)) << 32) + SInt(R_read(n)) * SInt(R_read(m));
    if round then {
        result = result + UInt(0x80000000)
    };
    let 'result = result;
    R_set(d) = result[63 .. 32]
}

val decode_aarch32_instrs_SMMLA_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMMLA_A1enc_A_txt (cond, Rd, Ra, Rm, R, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Ra == 0b1111 then {
            throw(Error_See("SMMUL"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let round : bool = R == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMMLA_Op_A_txt(a, d, m, n, round)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2445) = {
    SEE = 2445;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let R = Slice(__opcode, 5, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMMLA_A1enc_A_txt(cond, Rd, Ra, Rm, R, Rn)
}

val decode_aarch32_instrs_SMMLA_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMMLA_T1enc_A_txt (Rn, Ra, Rd, R, Rm) = {
    if ConditionPassed() then {
        if Ra == 0b1111 then {
            throw(Error_See("SMMUL"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let round : bool = R == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMMLA_Op_A_txt(a, d, m, n, round)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2446) = {
    SEE = 2446;
    let Rn = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 8, 4);
    let R = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMMLA_T1enc_A_txt(Rn, Ra, Rd, R, Rm)
}

val execute_aarch32_instrs_SMMLS_Op_A_txt : forall 'a 'd 'm 'n ('round : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15 & 0 <= 'a & 'a <= 15).
  (int('a), int('d), int('m), int('n), bool('round)) -> unit

function execute_aarch32_instrs_SMMLS_Op_A_txt (a, d, m, n, round) = {
    result : int = (SInt(R_read(a)) << 32) - SInt(R_read(n)) * SInt(R_read(m));
    if round then {
        result = result + UInt(0x80000000)
    };
    let 'result = result;
    R_set(d) = result[63 .. 32]
}

val decode_aarch32_instrs_SMMLS_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMMLS_A1enc_A_txt (cond, Rd, Ra, Rm, R, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let round : bool = R == 0b1;
        if ((d == 15 | n == 15) | m == 15) | a == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMMLS_Op_A_txt(a, d, m, n, round)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2447) = {
    SEE = 2447;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let R = Slice(__opcode, 5, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMMLS_A1enc_A_txt(cond, Rd, Ra, Rm, R, Rn)
}

val decode_aarch32_instrs_SMMLS_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMMLS_T1enc_A_txt (Rn, Ra, Rd, R, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        let round : bool = R == 0b1;
        if ((d == 15 | n == 15) | m == 15) | a == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMMLS_Op_A_txt(a, d, m, n, round)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2448) = {
    SEE = 2448;
    let Rn = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 8, 4);
    let R = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMMLS_T1enc_A_txt(Rn, Ra, Rd, R, Rm)
}

val execute_aarch32_instrs_SMMUL_Op_A_txt : forall 'd 'm 'n ('round : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('round)) -> unit

function execute_aarch32_instrs_SMMUL_Op_A_txt (d, m, n, round) = {
    result : int = SInt(R_read(n)) * SInt(R_read(m));
    if round then {
        result = result + UInt(0x80000000)
    };
    let 'result = result;
    R_set(d) = result[63 .. 32]
}

val decode_aarch32_instrs_SMMUL_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMMUL_A1enc_A_txt (cond, Rd, Rm, R, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let round : bool = R == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMMUL_Op_A_txt(d, m, n, round)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2449) = {
    SEE = 2449;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Rm = Slice(__opcode, 8, 4);
    let R = Slice(__opcode, 5, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMMUL_A1enc_A_txt(cond, Rd, Rm, R, Rn)
}

val decode_aarch32_instrs_SMMUL_T1enc_A_txt : (bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMMUL_T1enc_A_txt (Rn, Rd, R, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let round : bool = R == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMMUL_Op_A_txt(d, m, n, round)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2450) = {
    SEE = 2450;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let R = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMMUL_T1enc_A_txt(Rn, Rd, R, Rm)
}

val execute_aarch32_instrs_SMUAD_Op_A_txt : forall 'd 'm ('m_swap : Bool) 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), bool('m_swap), int('n)) -> unit

function execute_aarch32_instrs_SMUAD_Op_A_txt (d, m, m_swap, n) = {
    let operand2 : bits(32) = if m_swap then ROR(R_read(m), 16) else R_read(m);
    let 'product1 = SInt(R_read(n)[15 .. 0]) * SInt(operand2[15 .. 0]);
    let 'product2 = SInt(R_read(n)[31 .. 16]) * SInt(operand2[31 .. 16]);
    let 'result = product1 + product2;
    R_set(d) = result[31 .. 0];
    if result != SInt(result[31 .. 0]) then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_SMUAD_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMUAD_A1enc_A_txt (cond, Rd, Rm, M, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let m_swap : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMUAD_Op_A_txt(d, m, m_swap, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2451) = {
    SEE = 2451;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Rm = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 5, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMUAD_A1enc_A_txt(cond, Rd, Rm, M, Rn)
}

val decode_aarch32_instrs_SMUAD_T1enc_A_txt : (bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMUAD_T1enc_A_txt (Rn, Rd, M, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let m_swap : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMUAD_Op_A_txt(d, m, m_swap, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2452) = {
    SEE = 2452;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMUAD_T1enc_A_txt(Rn, Rd, M, Rm)
}

val execute_aarch32_instrs_SMULBB_Op_A_txt : forall 'd 'm ('m_high : Bool) 'n ('n_high : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), bool('m_high), int('n), bool('n_high)) -> unit

function execute_aarch32_instrs_SMULBB_Op_A_txt (d, m, m_high, n, n_high) = {
    let operand1 : bits(16) = if n_high then R_read(n)[31 .. 16] else
      R_read(n)[15 .. 0];
    let operand2 : bits(16) = if m_high then R_read(m)[31 .. 16] else
      R_read(m)[15 .. 0];
    let 'result = SInt(operand1) * SInt(operand2);
    R_set(d) = result[31 .. 0]
}

val decode_aarch32_instrs_SMULBB_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMULBB_A1enc_A_txt (cond, Rd, Rm, M, N, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let n_high : bool = N == 0b1;
        let m_high : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMULBB_Op_A_txt(d, m, m_high, n, n_high)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2453) = {
    SEE = 2453;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Rm = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 6, 1);
    let N = Slice(__opcode, 5, 1);
    let Rn = Slice(__opcode, 0, 4);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SMULBB_A1enc_A_txt(cond, Rd, Rm, M, N, Rn)
    }
}

val decode_aarch32_instrs_SMULBB_T1enc_A_txt : (bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMULBB_T1enc_A_txt (Rn, Rd, N, M, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let n_high : bool = N == 0b1;
        let m_high : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMULBB_Op_A_txt(d, m, m_high, n, n_high)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2454) = {
    SEE = 2454;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let N = Slice(__opcode, 5, 1);
    let M = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMULBB_T1enc_A_txt(Rn, Rd, N, M, Rm)
}

val execute_aarch32_instrs_SMULL_Op_A_txt : forall 'dHi 'dLo 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'dLo & 'dLo <= 15 & 0 <= 'dHi & 'dHi <= 15).
  (int('dHi), int('dLo), int('m), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_SMULL_Op_A_txt (dHi, dLo, m, n, setflags) = {
    let 'result = SInt(R_read(n)) * SInt(R_read(m));
    R_set(dHi) = result[63 .. 32];
    R_set(dLo) = result[31 .. 0];
    if setflags then {
        PSTATE.N = [result[63]];
        PSTATE.Z = IsZeroBit(result[63 .. 0])
    };
    ()
}

val decode_aarch32_instrs_SMULL_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SMULL_A1enc_A_txt (cond, S, RdHi, RdLo, Rm, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMULL_Op_A_txt(dHi, dLo, m, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2455) = {
    SEE = 2455;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let RdHi = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMULL_A1enc_A_txt(cond, S, RdHi, RdLo, Rm, Rn)
}

val decode_aarch32_instrs_SMULL_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SMULL_T1enc_A_txt (Rn, RdLo, RdHi, Rm) = {
    if ConditionPassed() then {
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = false;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMULL_Op_A_txt(dHi, dLo, m, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2456) = {
    SEE = 2456;
    let Rn = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let RdHi = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMULL_T1enc_A_txt(Rn, RdLo, RdHi, Rm)
}

val execute_aarch32_instrs_SMULWB_Op_A_txt : forall 'd 'm ('m_high : Bool) 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), bool('m_high), int('n)) -> unit

function execute_aarch32_instrs_SMULWB_Op_A_txt (d, m, m_high, n) = {
    let operand2 : bits(16) = if m_high then R_read(m)[31 .. 16] else
      R_read(m)[15 .. 0];
    let 'product = SInt(R_read(n)) * SInt(operand2);
    R_set(d) = product[47 .. 16]
}

val decode_aarch32_instrs_SMULWB_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMULWB_A1enc_A_txt (cond, Rd, Rm, M, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let m_high : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMULWB_Op_A_txt(d, m, m_high, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, _, bitone, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2457) = {
    SEE = 2457;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Rm = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 6, 1);
    let Rn = Slice(__opcode, 0, 4);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SMULWB_A1enc_A_txt(cond, Rd, Rm, M, Rn)
    }
}

val decode_aarch32_instrs_SMULWB_T1enc_A_txt : (bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMULWB_T1enc_A_txt (Rn, Rd, M, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let m_high : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMULWB_Op_A_txt(d, m, m_high, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2458) = {
    SEE = 2458;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMULWB_T1enc_A_txt(Rn, Rd, M, Rm)
}

val execute_aarch32_instrs_SMUSD_Op_A_txt : forall 'd 'm ('m_swap : Bool) 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), bool('m_swap), int('n)) -> unit

function execute_aarch32_instrs_SMUSD_Op_A_txt (d, m, m_swap, n) = {
    let operand2 : bits(32) = if m_swap then ROR(R_read(m), 16) else R_read(m);
    let 'product1 = SInt(R_read(n)[15 .. 0]) * SInt(operand2[15 .. 0]);
    let 'product2 = SInt(R_read(n)[31 .. 16]) * SInt(operand2[31 .. 16]);
    let 'result = product1 - product2;
    R_set(d) = result[31 .. 0]
}

val decode_aarch32_instrs_SMUSD_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMUSD_A1enc_A_txt (cond, Rd, Rm, M, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let m_swap : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMUSD_Op_A_txt(d, m, m_swap, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2459) = {
    SEE = 2459;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Rm = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 5, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMUSD_A1enc_A_txt(cond, Rd, Rm, M, Rn)
}

val decode_aarch32_instrs_SMUSD_T1enc_A_txt : (bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SMUSD_T1enc_A_txt (Rn, Rd, M, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let m_swap : bool = M == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMUSD_Op_A_txt(d, m, m_swap, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2460) = {
    SEE = 2460;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SMUSD_T1enc_A_txt(Rn, Rd, M, Rm)
}

val execute_aarch32_instrs_SSAT16_Op_A_txt : forall 'd 'n 'saturate_to,
  (1 <= 'saturate_to & 'saturate_to <= 16 & 0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('n), int('saturate_to)) -> unit

function execute_aarch32_instrs_SSAT16_Op_A_txt (d, n, saturate_to) = {
    result1 : bits('saturate_to) = undefined;
    result2 : bits('saturate_to) = undefined;
    sat1 : bool = undefined;
    sat2 : bool = undefined;
    (result1, sat1) = SignedSatQ(SInt(R_read(n)[15 .. 0]), saturate_to);
    (result2, sat2) = SignedSatQ(SInt(R_read(n)[31 .. 16]), saturate_to);
    R_set(d) = [R_read(d) with 15 .. 0 = SignExtend(result1, 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = SignExtend(result2, 16)];
    if sat1 | sat2 then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_SSAT16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SSAT16_A1enc_A_txt (cond, sat_imm, Rd, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'saturate_to = UInt(sat_imm) + 1;
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SSAT16_Op_A_txt(d, n, saturate_to)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2461) = {
    SEE = 2461;
    let cond = Slice(__opcode, 28, 4);
    let sat_imm = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rn = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SSAT16_A1enc_A_txt(cond, sat_imm, Rd, Rn)
    }
}

val decode_aarch32_instrs_SSAT16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SSAT16_T1enc_A_txt (Rn, Rd, sat_imm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'saturate_to = UInt(sat_imm) + 1;
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SSAT16_Op_A_txt(d, n, saturate_to)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2462) = {
    SEE = 2462;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let sat_imm = Slice(__opcode, 0, 4);
    if ([__opcode[26]] != 0b0 | [__opcode[4]] != 0b0) | [__opcode[5]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SSAT16_T1enc_A_txt(Rn, Rd, sat_imm)
    }
}

val execute_aarch32_instrs_SSAT_Op_A_txt : forall 'd 'n 'saturate_to 'shift_n,
  (1 <= 'saturate_to & 'saturate_to <= 32 & 0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('n), int('saturate_to), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_SSAT_Op_A_txt (d, n, saturate_to, shift_n, shift_t) = {
    result : bits('saturate_to) = undefined;
    sat : bool = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let operand : bits(32) = Shift(R_read(n), shift_t, shift_n, PSTATE.C);
    (result, sat) = SignedSatQ(SInt(operand), saturate_to);
    R_set(d) = SignExtend(result, 32);
    if sat then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_SSAT_A1enc_A_txt : (bits(4), bits(5), bits(4), bits(5), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SSAT_A1enc_A_txt (cond, sat_imm, Rd, imm5, sh, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'saturate_to = UInt(sat_imm) + 1;
        (shift_t, shift_n) = DecodeImmShift(sh @ 0b0, imm5);
        let 'shift_n = shift_n;
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_SSAT_Op_A_txt(d, n, saturate_to, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2463) = {
    SEE = 2463;
    let cond = Slice(__opcode, 28, 4);
    let sat_imm = Slice(__opcode, 16, 5);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let sh = Slice(__opcode, 6, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SSAT_A1enc_A_txt(cond, sat_imm, Rd, imm5, sh, Rn)
}

val decode_aarch32_instrs_SSAT_T1enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(5)) -> unit

function decode_aarch32_instrs_SSAT_T1enc_A_txt (sh, Rn, imm3, Rd, imm2, sat_imm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if sh == 0b1 & (imm3 @ imm2) == 0b00000 then {
            throw(Error_See("SSAT16"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'saturate_to = UInt(sat_imm) + 1;
        (shift_t, shift_n) = DecodeImmShift(sh @ 0b0, imm3 @ imm2);
        let 'shift_n = shift_n;
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SSAT_Op_A_txt(d, n, saturate_to, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2464) = {
    SEE = 2464;
    let sh = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let sat_imm = Slice(__opcode, 0, 5);
    if [__opcode[26]] != 0b0 | [__opcode[5]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SSAT_T1enc_A_txt(sh, Rn, imm3, Rd, imm2, sat_imm)
    }
}

val execute_aarch32_instrs_SSAX_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SSAX_Op_A_txt (d, m, n) = {
    let 'sum = SInt(R_read(n)[15 .. 0]) + SInt(R_read(m)[31 .. 16]);
    let 'diff = SInt(R_read(n)[31 .. 16]) - SInt(R_read(m)[15 .. 0]);
    R_set(d) = [R_read(d) with 15 .. 0 = sum[15 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 16 = diff[15 .. 0]];
    PSTATE.GE[1 .. 0] = if sum >= 0 then 0b11 else 0b00;
    PSTATE.GE[3 .. 2] = if diff >= 0 then 0b11 else 0b00
}

val decode_aarch32_instrs_SSAX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SSAX_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SSAX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2465) = {
    SEE = 2465;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SSAX_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SSAX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SSAX_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SSAX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2466) = {
    SEE = 2466;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SSAX_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_SSUB16_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SSUB16_Op_A_txt (d, m, n) = {
    let 'diff1 = SInt(R_read(n)[15 .. 0]) - SInt(R_read(m)[15 .. 0]);
    let 'diff2 = SInt(R_read(n)[31 .. 16]) - SInt(R_read(m)[31 .. 16]);
    R_set(d) = [R_read(d) with 15 .. 0 = diff1[15 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 16 = diff2[15 .. 0]];
    PSTATE.GE[1 .. 0] = if diff1 >= 0 then 0b11 else 0b00;
    PSTATE.GE[3 .. 2] = if diff2 >= 0 then 0b11 else 0b00
}

val decode_aarch32_instrs_SSUB16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SSUB16_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SSUB16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2467) = {
    SEE = 2467;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SSUB16_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SSUB16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SSUB16_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SSUB16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2468) = {
    SEE = 2468;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SSUB16_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_SSUB8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SSUB8_Op_A_txt (d, m, n) = {
    let 'diff1 = SInt(R_read(n)[7 .. 0]) - SInt(R_read(m)[7 .. 0]);
    let 'diff2 = SInt(R_read(n)[15 .. 8]) - SInt(R_read(m)[15 .. 8]);
    let 'diff3 = SInt(R_read(n)[23 .. 16]) - SInt(R_read(m)[23 .. 16]);
    let 'diff4 = SInt(R_read(n)[31 .. 24]) - SInt(R_read(m)[31 .. 24]);
    R_set(d) = [R_read(d) with 7 .. 0 = diff1[7 .. 0]];
    R_set(d) = [R_read(d) with 15 .. 8 = diff2[7 .. 0]];
    R_set(d) = [R_read(d) with 23 .. 16 = diff3[7 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 24 = diff4[7 .. 0]];
    PSTATE.GE[0] = Bit(if diff1 >= 0 then 0b1 else 0b0);
    PSTATE.GE[1] = Bit(if diff2 >= 0 then 0b1 else 0b0);
    PSTATE.GE[2] = Bit(if diff3 >= 0 then 0b1 else 0b0);
    PSTATE.GE[3] = Bit(if diff4 >= 0 then 0b1 else 0b0)
}

val decode_aarch32_instrs_SSUB8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SSUB8_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SSUB8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2469) = {
    SEE = 2469;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SSUB8_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_SSUB8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SSUB8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SSUB8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2470) = {
    SEE = 2470;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SSUB8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_STC_Op_A_txt : forall ('add : Bool) ('index : Bool) 'n ('wback : Bool),
  (0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), bool('wback)) -> unit

function execute_aarch32_instrs_STC_Op_A_txt (add, imm32, index, n, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if Halted() then {
        MemA_set(address, 4) = DBGDTR_EL0_read(8 * 4)
    } else if PSTATE.EL == EL0 then {
        if not_bool(ELUsingAArch32(EL1)) & MDSCR_EL1[TDCC] == 0b1 then {
            if (EL2Enabled() & not_bool(ELUsingAArch32(EL2))) & HCR_EL2[TGE] == 0b1 then {
                AArch64_AArch32SystemAccessTrap(EL2, UInt(0x06))
            } else {
                AArch64_AArch32SystemAccessTrap(EL1, UInt(0x06))
            }
        } else if ELUsingAArch32(EL1) & DBGDSCRext_read()[UDCCdis] == 0b1 then {
            if (EL2Enabled() & not_bool(ELUsingAArch32(EL2))) & HCR_EL2[TGE] == 0b1 then {
                AArch64_AArch32SystemAccessTrap(EL2, UInt(0x06))
            } else if (EL2Enabled() & ELUsingAArch32(EL2)) & HCR_read()[TGE] == 0b1 then {
                AArch32_TakeHypTrapException(UInt(0x00))
            } else {
                throw(Error_Undefined())
            }
        } else if (EL2Enabled() & not_bool(ELUsingAArch32(EL2))) & MDCR_EL2[TDCC] == 0b1 then {
            AArch64_AArch32SystemAccessTrap(EL2, UInt(0x06))
        } else if (EL2Enabled() & ELUsingAArch32(EL2)) & HDCR_read()[TDCC] == 0b1 then {
            AArch32_TakeHypTrapException(UInt(0x06))
        } else if (EL2Enabled() & not_bool(ELUsingAArch32(EL2))) & (HCR_EL2[TGE] == 0b1 | (MDCR_EL2[TDE] @ MDCR_EL2[TDA]) != 0b00) then {
            AArch64_AArch32SystemAccessTrap(EL2, UInt(0x06))
        } else if (EL2Enabled() & ELUsingAArch32(EL2)) & (HCR_read()[TGE] == 0b1 | (HDCR_read()[TDE] @ HDCR_read()[TDA]) != 0b00) then {
            AArch32_TakeHypTrapException(UInt(0x06))
        } else if (HaveEL(EL3) & not_bool(ELUsingAArch32(EL3))) & MDCR_EL3[TDCC] == 0b1 then {
            AArch64_AArch32SystemAccessTrap(EL3, UInt(0x06))
        } else if (HaveEL(EL3) & ELUsingAArch32(EL3)) & SDCR[TDCC] == 0b1 then {
            AArch32_TakeMonitorTrapException()
        } else if (HaveEL(EL3) & not_bool(ELUsingAArch32(EL3))) & MDCR_EL3[TDA] == 0b1 then {
            AArch64_AArch32SystemAccessTrap(EL3, UInt(0x06))
        } else {
            MemA_set(address, 4) = DBGDTR_EL0_read(8 * 4)
        }
    } else if PSTATE.EL == EL1 then {
        if (EL2Enabled() & not_bool(ELUsingAArch32(EL2))) & MDCR_EL2[TDCC] == 0b1 then {
            AArch64_AArch32SystemAccessTrap(EL2, UInt(0x06))
        } else if (EL2Enabled() & ELUsingAArch32(EL2)) & HDCR_read()[TDCC] == 0b1 then {
            AArch32_TakeHypTrapException(UInt(0x06))
        } else if (EL2Enabled() & not_bool(ELUsingAArch32(EL2))) & (MDCR_EL2[TDE] @ MDCR_EL2[TDA]) != 0b00 then {
            AArch64_AArch32SystemAccessTrap(EL2, UInt(0x06))
        } else if (EL2Enabled() & ELUsingAArch32(EL2)) & (HDCR_read()[TDE] @ HDCR_read()[TDA]) != 0b00 then {
            AArch32_TakeHypTrapException(UInt(0x06))
        } else if (HaveEL(EL3) & not_bool(ELUsingAArch32(EL3))) & MDCR_EL3[TDCC] == 0b1 then {
            AArch64_AArch32SystemAccessTrap(EL3, UInt(0x06))
        } else if (HaveEL(EL3) & ELUsingAArch32(EL3)) & SDCR[TDCC] == 0b1 then {
            AArch32_TakeMonitorTrapException()
        } else if (HaveEL(EL3) & not_bool(ELUsingAArch32(EL3))) & MDCR_EL3[TDA] == 0b1 then {
            AArch64_AArch32SystemAccessTrap(EL3, UInt(0x06))
        } else {
            MemA_set(address, 4) = DBGDTR_EL0_read(8 * 4)
        }
    } else if PSTATE.EL == EL2 then {
        if (HaveEL(EL3) & not_bool(ELUsingAArch32(EL3))) & MDCR_EL3[TDCC] == 0b1 then {
            AArch64_AArch32SystemAccessTrap(EL3, UInt(0x06))
        } else if (HaveEL(EL3) & ELUsingAArch32(EL3)) & SDCR[TDCC] == 0b1 then {
            AArch32_TakeMonitorTrapException()
        } else if (HaveEL(EL3) & not_bool(ELUsingAArch32(EL3))) & MDCR_EL3[TDA] == 0b1 then {
            AArch64_AArch32SystemAccessTrap(EL3, UInt(0x06))
        } else {
            MemA_set(address, 4) = DBGDTR_EL0_read(8 * 4)
        }
    } else if PSTATE.EL == EL3 then {
        if PSTATE.M != M32_Monitor & SDCR[TDCC] == 0b1 then {
            AArch32_TakeMonitorTrapException()
        } else {
            MemA_set(address, 4) = DBGDTR_EL0_read(8 * 4)
        }
    } else ();
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STC_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_STC_A1enc_A_txt (cond, P, U, W, Rn, imm8) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_Undefined())
        };
        let 'n = UInt(Rn);
        let 'cp = 14;
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        if n == 15 & (wback | CurrentInstrSet() != InstrSet_A32) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STC_Op_A_txt(add, imm32, index, n, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, _, _, bitzero, _, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2471) = {
    SEE = 2471;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_STC_A1enc_A_txt(cond, P, U, W, Rn, imm8)
}

val decode_aarch32_instrs_STC_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_STC_T1enc_A_txt (P, U, W, Rn, imm8) = {
    if ConditionPassed() then {
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_Undefined())
        };
        let 'n = UInt(Rn);
        let 'cp = 14;
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        if n == 15 & (wback | CurrentInstrSet() != InstrSet_A32) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STC_Op_A_txt(add, imm32, index, n, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, bitzero, _, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2472) = {
    SEE = 2472;
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_STC_T1enc_A_txt(P, U, W, Rn, imm8)
}

val execute_aarch32_instrs_STM_Op_A_txt : forall 'n ('wback : Bool), (0 <= 'n & 'n <= 15).
  (int('n), bits(16), bool('wback)) -> unit

function execute_aarch32_instrs_STM_Op_A_txt (n, registers, wback) = {
    address : bits(32) = R_read(n);
    foreach (i from 0 to 14 by 1 in inc) {
        if [registers[i]] == 0b1 then {
            if (i == n & wback) & i != LowestSetBit(registers) then {
                MemS_set(address, 4) = __UNKNOWN_bits(32)
            } else {
                MemS_set(address, 4) = R_read(i)
            };
            address = address + 4
        };
        ()
    };
    if [registers[15]] == 0b1 then {
        MemS_set(address, 4) = PCStoreValue()
    };
    if wback then {
        R_set(n) = R_read(n) + 4 * BitCount(registers)
    };
    ()
}

val decode_aarch32_instrs_STM_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(16)) -> unit

function decode_aarch32_instrs_STM_A1enc_A_txt (cond, W, Rn, register_list) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let registers : bits(16) = register_list;
        let wback : bool = W == 0b1;
        if n == 15 | BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STM_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2473) = {
    SEE = 2473;
    let cond = Slice(__opcode, 28, 4);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let register_list = Slice(__opcode, 0, 16);
    decode_aarch32_instrs_STM_A1enc_A_txt(cond, W, Rn, register_list)
}

val decode_aarch32_instrs_STM_T1enc_A_txt : (bits(3), bits(8)) -> unit

function decode_aarch32_instrs_STM_T1enc_A_txt (Rn, register_list) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let registers : bits(16) = 0b00000000 @ register_list;
        let wback : bool = true;
        if BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STM_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2474) = {
    SEE = 2474;
    let Rn = Slice(__opcode, 8, 3);
    let register_list = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_STM_T1enc_A_txt(Rn, register_list)
}

val decode_aarch32_instrs_STM_T2enc_A_txt : (bits(1), bits(4), bits(1), bits(1), bits(14)) -> unit

function decode_aarch32_instrs_STM_T2enc_A_txt (W, Rn, P, M, register_list) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let registers : bits(16) = (P @ M) @ register_list;
        let wback : bool = W == 0b1;
        if n == 15 | BitCount(registers) < 2 then {
            throw(Error_Unpredictable())
        };
        if wback & [registers[n]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        if [registers[13]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        if [registers[15]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STM_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2475) = {
    SEE = 2475;
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let P = Slice(__opcode, 15, 1);
    let M = Slice(__opcode, 14, 1);
    let register_list = Slice(__opcode, 0, 14);
    decode_aarch32_instrs_STM_T2enc_A_txt(W, Rn, P, M, register_list)
}

val execute_aarch32_instrs_STMDA_Op_A_txt : forall 'n ('wback : Bool), (0 <= 'n & 'n <= 15).
  (int('n), bits(16), bool('wback)) -> unit

function execute_aarch32_instrs_STMDA_Op_A_txt (n, registers, wback) = {
    address : bits(32) = R_read(n) - 4 * BitCount(registers) + 4;
    foreach (i from 0 to 14 by 1 in inc) {
        if [registers[i]] == 0b1 then {
            if (i == n & wback) & i != LowestSetBit(registers) then {
                MemS_set(address, 4) = __UNKNOWN_bits(32)
            } else {
                MemS_set(address, 4) = R_read(i)
            };
            address = address + 4
        };
        ()
    };
    if [registers[15]] == 0b1 then {
        MemS_set(address, 4) = PCStoreValue()
    };
    if wback then {
        R_set(n) = R_read(n) - 4 * BitCount(registers)
    };
    ()
}

val decode_aarch32_instrs_STMDA_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(16)) -> unit

function decode_aarch32_instrs_STMDA_A1enc_A_txt (cond, W, Rn, register_list) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let registers : bits(16) = register_list;
        let wback : bool = W == 0b1;
        if n == 15 | BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STMDA_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2476) = {
    SEE = 2476;
    let cond = Slice(__opcode, 28, 4);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let register_list = Slice(__opcode, 0, 16);
    decode_aarch32_instrs_STMDA_A1enc_A_txt(cond, W, Rn, register_list)
}

val execute_aarch32_instrs_STMDB_Op_A_txt : forall 'n ('wback : Bool), (0 <= 'n & 'n <= 15).
  (int('n), bits(16), bool('wback)) -> unit

function execute_aarch32_instrs_STMDB_Op_A_txt (n, registers, wback) = {
    address : bits(32) = R_read(n) - 4 * BitCount(registers);
    foreach (i from 0 to 14 by 1 in inc) {
        if [registers[i]] == 0b1 then {
            if (i == n & wback) & i != LowestSetBit(registers) then {
                MemS_set(address, 4) = __UNKNOWN_bits(32)
            } else {
                MemS_set(address, 4) = R_read(i)
            };
            address = address + 4
        };
        ()
    };
    if [registers[15]] == 0b1 then {
        MemS_set(address, 4) = PCStoreValue()
    };
    if wback then {
        R_set(n) = R_read(n) - 4 * BitCount(registers)
    };
    ()
}

val decode_aarch32_instrs_STMDB_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(16)) -> unit

function decode_aarch32_instrs_STMDB_A1enc_A_txt (cond, W, Rn, register_list) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let registers : bits(16) = register_list;
        let wback : bool = W == 0b1;
        if n == 15 | BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STMDB_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2477) = {
    SEE = 2477;
    let cond = Slice(__opcode, 28, 4);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let register_list = Slice(__opcode, 0, 16);
    decode_aarch32_instrs_STMDB_A1enc_A_txt(cond, W, Rn, register_list)
}

val decode_aarch32_instrs_STMDB_T1enc_A_txt : (bits(1), bits(4), bits(1), bits(1), bits(14)) -> unit

function decode_aarch32_instrs_STMDB_T1enc_A_txt (W, Rn, P, M, register_list) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let registers : bits(16) = (P @ M) @ register_list;
        let wback : bool = W == 0b1;
        if n == 15 | BitCount(registers) < 2 then {
            throw(Error_Unpredictable())
        };
        if wback & [registers[n]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        if [registers[13]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        if [registers[15]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STMDB_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2478) = {
    SEE = 2478;
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let P = Slice(__opcode, 15, 1);
    let M = Slice(__opcode, 14, 1);
    let register_list = Slice(__opcode, 0, 14);
    decode_aarch32_instrs_STMDB_T1enc_A_txt(W, Rn, P, M, register_list)
}

val execute_aarch32_instrs_STMIB_Op_A_txt : forall 'n ('wback : Bool), (0 <= 'n & 'n <= 15).
  (int('n), bits(16), bool('wback)) -> unit

function execute_aarch32_instrs_STMIB_Op_A_txt (n, registers, wback) = {
    address : bits(32) = R_read(n) + 4;
    foreach (i from 0 to 14 by 1 in inc) {
        if [registers[i]] == 0b1 then {
            if (i == n & wback) & i != LowestSetBit(registers) then {
                MemS_set(address, 4) = __UNKNOWN_bits(32)
            } else {
                MemS_set(address, 4) = R_read(i)
            };
            address = address + 4
        };
        ()
    };
    if [registers[15]] == 0b1 then {
        MemS_set(address, 4) = PCStoreValue()
    };
    if wback then {
        R_set(n) = R_read(n) + 4 * BitCount(registers)
    };
    ()
}

val decode_aarch32_instrs_STMIB_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(16)) -> unit

function decode_aarch32_instrs_STMIB_A1enc_A_txt (cond, W, Rn, register_list) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let registers : bits(16) = register_list;
        let wback : bool = W == 0b1;
        if n == 15 | BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STMIB_Op_A_txt(n, registers, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2479) = {
    SEE = 2479;
    let cond = Slice(__opcode, 28, 4);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let register_list = Slice(__opcode, 0, 16);
    decode_aarch32_instrs_STMIB_A1enc_A_txt(cond, W, Rn, register_list)
}

val execute_aarch32_instrs_STRB_i_OpA_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_STRB_i_OpA_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(1, false, t, false)
    };
    MemU_set(address, 1) = R_read(t)[7 .. 0];
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STRB_i_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_STRB_i_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("STRBT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        if wback & (n == 15 | n == t) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRB_i_OpA_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitzero, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2480) = {
    SEE = 2480;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_STRB_i_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm12)
}

val execute_aarch32_instrs_STRB_i_OpT_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_STRB_i_OpT_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(1, false, t, false)
    };
    MemU_set(address, 1) = R_read(t)[7 .. 0];
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STRB_i_T1enc_A_txt : (bits(5), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_STRB_i_T1enc_A_txt (imm5, Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm5, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        execute_aarch32_instrs_STRB_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2481) = {
    SEE = 2481;
    let imm5 = Slice(__opcode, 6, 5);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_STRB_i_T1enc_A_txt(imm5, Rn, Rt)
}

val decode_aarch32_instrs_STRB_i_T2enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_STRB_i_T2enc_A_txt (Rn, Rt, imm12) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRB_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2482) = {
    SEE = 2482;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_STRB_i_T2enc_A_txt(Rn, Rt, imm12)
}

val decode_aarch32_instrs_STRB_i_T3enc_A_txt : (bits(4), bits(4), bits(1), bits(1), bits(1), bits(8)) -> unit

function decode_aarch32_instrs_STRB_i_T3enc_A_txt (Rn, Rt, P, U, W, imm8) = {
    if ConditionPassed() then {
        if (P == 0b1 & U == 0b1) & W == 0b0 then {
            throw(Error_See("STRBT"))
        };
        if Rn == 0b1111 | P == 0b0 & W == 0b0 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        if t == 15 | wback & n == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRB_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2483) = {
    SEE = 2483;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let P = Slice(__opcode, 10, 1);
    let U = Slice(__opcode, 9, 1);
    let W = Slice(__opcode, 8, 1);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_STRB_i_T3enc_A_txt(Rn, Rt, P, U, W, imm8)
}

val execute_aarch32_instrs_STRB_r_Op_A_txt : forall ('add : Bool) ('index : Bool) 'm 'n 'shift_n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('add), bool('index), int('m), int('n), int('shift_n), SRType, int('t), bool('wback)) -> unit

function execute_aarch32_instrs_STRB_r_Op_A_txt (add, index, m, n, shift_n, shift_t, t, wback) = {
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(1, false, t, false)
    };
    MemU_set(address, 1) = R_read(t)[7 .. 0];
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STRB_r_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_STRB_r_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("STRBT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        if t == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        if wback & (n == 15 | n == t) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRB_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2484) = {
    SEE = 2484;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_STRB_r_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm5, stype, Rm)
}

val decode_aarch32_instrs_STRB_r_T1enc_A_txt : (bits(3), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_STRB_r_T1enc_A_txt (Rm, Rn, Rt) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_STRB_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2485) = {
    SEE = 2485;
    let Rm = Slice(__opcode, 6, 3);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_STRB_r_T1enc_A_txt(Rm, Rn, Rt)
}

val decode_aarch32_instrs_STRB_r_T2enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_STRB_r_T2enc_A_txt (Rn, Rt, imm2, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, UInt(imm2));
        let 'shift_n = shift_n;
        if t == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRB_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2486) = {
    SEE = 2486;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm2 = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_STRB_r_T2enc_A_txt(Rn, Rt, imm2, Rm)
}

val execute_aarch32_instrs_STRBT_Op_A_txt : forall ('add : Bool) 'm 'n ('postindex : Bool) ('register_form : Bool) 'shift_n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), int('m), int('n), bool('postindex), bool('register_form), int('shift_n), SRType, int('t)) -> unit

function execute_aarch32_instrs_STRBT_Op_A_txt (add, imm32, m, n, postindex, register_form, shift_n, shift_t, t) = {
    if PSTATE.EL == EL2 then {
        throw(Error_Unpredictable())
    };
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = if register_form then
      Shift(R_read(m), shift_t, shift_n, PSTATE.C)
    else
      imm32;
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if postindex then R_read(n) else offset_addr;
    if (not_bool(postindex) & t != 15) & PSTATE.T == 0b1 then {
        AArch32_SetLSInstructionSyndrome(1, false, t, false)
    };
    MemU_unpriv_set(address, 1) = R_read(t)[7 .. 0];
    if postindex then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STRBT_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_STRBT_A1enc_A_txt (cond, U, Rn, Rt, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        if (t == 15 | n == 15) | n == t then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        execute_aarch32_instrs_STRBT_Op_A_txt(add, imm32, m, n, postindex, register_form, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitzero, bitzero, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2487) = {
    SEE = 2487;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_STRBT_A1enc_A_txt(cond, U, Rn, Rt, imm12)
}

val decode_aarch32_instrs_STRBT_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_STRBT_A2enc_A_txt (cond, U, Rn, Rt, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        imm32 : bits(32) = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = true;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        if ((t == 15 | n == 15) | n == t) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_STRBT_Op_A_txt(add, imm32, m, n, postindex, register_form, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2488) = {
    SEE = 2488;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_STRBT_A2enc_A_txt(cond, U, Rn, Rt, imm5, stype, Rm)
}

val decode_aarch32_instrs_STRBT_T1enc_A_txt : (bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_STRBT_T1enc_A_txt (Rn, Rt, imm8) = {
    if ConditionPassed() then {
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_Undefined())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = false;
        let add : bool = true;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRBT_Op_A_txt(add, imm32, m, n, postindex, register_form, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2489) = {
    SEE = 2489;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_STRBT_T1enc_A_txt(Rn, Rt, imm8)
}

val execute_aarch32_instrs_STRD_i_Op_A_txt : forall ('add : Bool) ('index : Bool) 'n 't 't2 ('wback : Bool),
  (0 <= 't2 & 't2 <= 16 & 0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), int('t2), bool('wback)) -> unit

function execute_aarch32_instrs_STRD_i_Op_A_txt (add, imm32, index, n, t, t2, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if address == Align(address, 8) then {
        data : bits(64) = undefined;
        if BigEndian(AccType_ATOMIC) then {
            data[63 .. 32] = R_read(t);
            data[31 .. 0] = R_read(t2)
        } else {
            data[31 .. 0] = R_read(t);
            data[63 .. 32] = R_read(t2)
        };
        MemA_set(address, 8) = data
    } else {
        MemA_set(address, 4) = R_read(t);
        MemA_set(address + 4, 4) = R_read(t2)
    };
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STRD_i_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STRD_i_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if [Rt[0]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        let 't = UInt(Rt);
        let 't2 = t + 1;
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if P == 0b0 & W == 0b1 then {
            throw(Error_Unpredictable())
        };
        if wback & ((n == 15 | n == t) | n == t2) then {
            throw(Error_Unpredictable())
        };
        if t2 == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRD_i_Op_A_txt(add, imm32, index, n, t, t2, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2490) = {
    SEE = 2490;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_STRD_i_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm4H, imm4L)
}

val decode_aarch32_instrs_STRD_i_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_STRD_i_T1enc_A_txt (P, U, W, Rn, Rt, Rt2, imm8) = {
    if ConditionPassed() then {
        if P == 0b0 & W == 0b0 then {
            throw(Error_See("Related encodings"))
        };
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        if wback & (n == t | n == t2) then {
            throw(Error_Unpredictable())
        };
        if (n == 15 | t == 15) | t2 == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRD_i_Op_A_txt(add, imm32, index, n, t, t2, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2491) = {
    SEE = 2491;
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rt2 = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_STRD_i_T1enc_A_txt(P, U, W, Rn, Rt, Rt2, imm8)
}

val execute_aarch32_instrs_STRD_r_Op_A_txt : forall ('add : Bool) ('index : Bool) 'm 'n 't 't2 ('wback : Bool),
  (1 <= 't2 & 't2 <= 16 & 0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('add), bool('index), int('m), int('n), int('t), int('t2), bool('wback)) -> unit

function execute_aarch32_instrs_STRD_r_Op_A_txt (add, index, m, n, t, t2, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + R_read(m) else
      R_read(n) - R_read(m);
    let address : bits(32) = if index then offset_addr else R_read(n);
    if address == Align(address, 8) then {
        data : bits(64) = undefined;
        if BigEndian(AccType_ATOMIC) then {
            data[63 .. 32] = R_read(t);
            data[31 .. 0] = R_read(t2)
        } else {
            data[31 .. 0] = R_read(t);
            data[63 .. 32] = R_read(t2)
        };
        MemA_set(address, 8) = data
    } else {
        MemA_set(address, 4) = R_read(t);
        MemA_set(address + 4, 4) = R_read(t2)
    };
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STRD_r_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STRD_r_A1enc_A_txt (cond, P, U, W, Rn, Rt, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if [Rt[0]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        let 't = UInt(Rt);
        let 't2 = t + 1;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if P == 0b0 & W == 0b1 then {
            throw(Error_Unpredictable())
        };
        if t2 == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        if wback & ((n == 15 | n == t) | n == t2) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRD_r_Op_A_txt(add, index, m, n, t, t2, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitzero, _, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2492) = {
    SEE = 2492;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STRD_r_A1enc_A_txt(cond, P, U, W, Rn, Rt, Rm)
    }
}

val execute_aarch32_instrs_STREX_Op_A_txt : forall 'd 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), bits(32), int('n), int('t)) -> unit

function execute_aarch32_instrs_STREX_Op_A_txt (d, imm32, n, t) = {
    let address : bits(32) = R_read(n) + imm32;
    if AArch32_ExclusiveMonitorsPass(address, 4) then {
        MemA_set(address, 4) = R_read(t);
        R_set(d) = ZeroExtend(0b0)
    } else {
        R_set(d) = ZeroExtend(0b1)
    }
}

val decode_aarch32_instrs_STREX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STREX_A1enc_A_txt (cond, Rn, Rd, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = Zeros(32);
        if (d == 15 | t == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if d == n | d == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STREX_Op_A_txt(d, imm32, n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2493) = {
    SEE = 2493;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rt = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b1 | [__opcode[9]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STREX_A1enc_A_txt(cond, Rn, Rd, Rt)
    }
}

val decode_aarch32_instrs_STREX_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_STREX_T1enc_A_txt (Rn, Rt, Rd, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        if (d == 15 | t == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if d == n | d == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STREX_Op_A_txt(d, imm32, n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2494) = {
    SEE = 2494;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_STREX_T1enc_A_txt(Rn, Rt, Rd, imm8)
}

val execute_aarch32_instrs_STREXB_Op_A_txt : forall 'd 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('n), int('t)) -> unit

function execute_aarch32_instrs_STREXB_Op_A_txt (d, n, t) = {
    let address : bits(32) = R_read(n);
    if AArch32_ExclusiveMonitorsPass(address, 1) then {
        MemA_set(address, 1) = R_read(t)[7 .. 0];
        R_set(d) = ZeroExtend(0b0)
    } else {
        R_set(d) = ZeroExtend(0b1)
    }
}

val decode_aarch32_instrs_STREXB_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STREXB_A1enc_A_txt (cond, Rn, Rd, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if (d == 15 | t == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if d == n | d == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STREXB_Op_A_txt(d, n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2495) = {
    SEE = 2495;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rt = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b1 | [__opcode[9]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STREXB_A1enc_A_txt(cond, Rn, Rd, Rt)
    }
}

val decode_aarch32_instrs_STREXB_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STREXB_T1enc_A_txt (Rn, Rt, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if (d == 15 | t == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if d == n | d == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STREXB_Op_A_txt(d, n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2496) = {
    SEE = 2496;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STREXB_T1enc_A_txt(Rn, Rt, Rd)
    }
}

val execute_aarch32_instrs_STREXD_Op_A_txt : forall 'd 'n 't 't2,
  (0 <= 't2 & 't2 <= 16 & 0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('n), int('t), int('t2)) -> unit

function execute_aarch32_instrs_STREXD_Op_A_txt (d, n, t, t2) = {
    let address : bits(32) = R_read(n);
    let value_name : bits(64) = if BigEndian(AccType_ATOMIC) then
      R_read(t) @ R_read(t2)
    else
      R_read(t2) @ R_read(t);
    if AArch32_ExclusiveMonitorsPass(address, 8) then {
        MemA_set(address, 8) = value_name;
        R_set(d) = ZeroExtend(0b0)
    } else {
        R_set(d) = ZeroExtend(0b1)
    }
}

val decode_aarch32_instrs_STREXD_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STREXD_A1enc_A_txt (cond, Rn, Rd, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 't2 = t + 1;
        let 'n = UInt(Rn);
        if ((d == 15 | [Rt[0]] == 0b1) | t2 == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if (d == n | d == t) | d == t2 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STREXD_Op_A_txt(d, n, t, t2)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2497) = {
    SEE = 2497;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rt = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b1 | [__opcode[9]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STREXD_A1enc_A_txt(cond, Rn, Rd, Rt)
    }
}

val decode_aarch32_instrs_STREXD_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STREXD_T1enc_A_txt (Rn, Rt, Rt2, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'n = UInt(Rn);
        if ((d == 15 | t == 15) | t2 == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if (d == n | d == t) | d == t2 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STREXD_Op_A_txt(d, n, t, t2)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2498) = {
    SEE = 2498;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rt2 = Slice(__opcode, 8, 4);
    let Rd = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_STREXD_T1enc_A_txt(Rn, Rt, Rt2, Rd)
}

val execute_aarch32_instrs_STREXH_Op_A_txt : forall 'd 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('n), int('t)) -> unit

function execute_aarch32_instrs_STREXH_Op_A_txt (d, n, t) = {
    let address : bits(32) = R_read(n);
    if AArch32_ExclusiveMonitorsPass(address, 2) then {
        MemA_set(address, 2) = R_read(t)[15 .. 0];
        R_set(d) = ZeroExtend(0b0)
    } else {
        R_set(d) = ZeroExtend(0b1)
    }
}

val decode_aarch32_instrs_STREXH_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STREXH_A1enc_A_txt (cond, Rn, Rd, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if (d == 15 | t == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if d == n | d == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STREXH_Op_A_txt(d, n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2499) = {
    SEE = 2499;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rt = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b1 | [__opcode[9]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STREXH_A1enc_A_txt(cond, Rn, Rd, Rt)
    }
}

val decode_aarch32_instrs_STREXH_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STREXH_T1enc_A_txt (Rn, Rt, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if (d == 15 | t == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if d == n | d == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STREXH_Op_A_txt(d, n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2500) = {
    SEE = 2500;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STREXH_T1enc_A_txt(Rn, Rt, Rd)
    }
}

val execute_aarch32_instrs_STRH_i_OpA_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_STRH_i_OpA_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(2, false, t, false)
    };
    MemU_set(address, 2) = R_read(t)[15 .. 0];
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STRH_i_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STRH_i_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("STRHT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        if wback & (n == 15 | n == t) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRH_i_OpA_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2501) = {
    SEE = 2501;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_STRH_i_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm4H, imm4L)
}

val execute_aarch32_instrs_STRH_i_OpT_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_STRH_i_OpT_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(2, false, t, false)
    };
    MemU_set(address, 2) = R_read(t)[15 .. 0];
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STRH_i_T1enc_A_txt : (bits(5), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_STRH_i_T1enc_A_txt (imm5, Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm5 @ 0b0, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        execute_aarch32_instrs_STRH_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2502) = {
    SEE = 2502;
    let imm5 = Slice(__opcode, 6, 5);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_STRH_i_T1enc_A_txt(imm5, Rn, Rt)
}

val decode_aarch32_instrs_STRH_i_T2enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_STRH_i_T2enc_A_txt (Rn, Rt, imm12) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRH_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2503) = {
    SEE = 2503;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_STRH_i_T2enc_A_txt(Rn, Rt, imm12)
}

val decode_aarch32_instrs_STRH_i_T3enc_A_txt : (bits(4), bits(4), bits(1), bits(1), bits(1), bits(8)) -> unit

function decode_aarch32_instrs_STRH_i_T3enc_A_txt (Rn, Rt, P, U, W, imm8) = {
    if ConditionPassed() then {
        if (P == 0b1 & U == 0b1) & W == 0b0 then {
            throw(Error_See("STRHT"))
        };
        if Rn == 0b1111 | P == 0b0 & W == 0b0 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        if t == 15 | wback & n == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRH_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2504) = {
    SEE = 2504;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let P = Slice(__opcode, 10, 1);
    let U = Slice(__opcode, 9, 1);
    let W = Slice(__opcode, 8, 1);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_STRH_i_T3enc_A_txt(Rn, Rt, P, U, W, imm8)
}

val execute_aarch32_instrs_STRH_r_Op_A_txt : forall ('add : Bool) ('index : Bool) 'm 'n 'shift_n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('add), bool('index), int('m), int('n), int('shift_n), SRType, int('t), bool('wback)) -> unit

function execute_aarch32_instrs_STRH_r_Op_A_txt (add, index, m, n, shift_n, shift_t, t, wback) = {
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(2, false, t, false)
    };
    MemU_set(address, 2) = R_read(t)[15 .. 0];
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STRH_r_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STRH_r_A1enc_A_txt (cond, P, U, W, Rn, Rt, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("STRHT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        if t == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        if wback & (n == 15 | n == t) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRH_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, _, _, bitzero, _, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2505) = {
    SEE = 2505;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STRH_r_A1enc_A_txt(cond, P, U, W, Rn, Rt, Rm)
    }
}

val decode_aarch32_instrs_STRH_r_T1enc_A_txt : (bits(3), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_STRH_r_T1enc_A_txt (Rm, Rn, Rt) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_STRH_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2506) = {
    SEE = 2506;
    let Rm = Slice(__opcode, 6, 3);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_STRH_r_T1enc_A_txt(Rm, Rn, Rt)
}

val decode_aarch32_instrs_STRH_r_T2enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_STRH_r_T2enc_A_txt (Rn, Rt, imm2, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, UInt(imm2));
        let 'shift_n = shift_n;
        if t == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRH_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2507) = {
    SEE = 2507;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm2 = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_STRH_r_T2enc_A_txt(Rn, Rt, imm2, Rm)
}

val execute_aarch32_instrs_STRHT_Op_A_txt : forall ('add : Bool) 'm 'n ('postindex : Bool) ('register_form : Bool) 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), int('m), int('n), bool('postindex), bool('register_form), int('t)) -> unit

function execute_aarch32_instrs_STRHT_Op_A_txt (add, imm32, m, n, postindex, register_form, t) = {
    if PSTATE.EL == EL2 then {
        throw(Error_Unpredictable())
    };
    let offset : bits(32) = if register_form then R_read(m) else imm32;
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if postindex then R_read(n) else offset_addr;
    if t != 15 & PSTATE.T == 0b1 then {
        AArch32_SetLSInstructionSyndrome(2, false, t, false)
    };
    MemU_unpriv_set(address, 2) = R_read(t)[15 .. 0];
    if postindex then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STRHT_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STRHT_A1enc_A_txt (cond, U, Rn, Rt, imm4H, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm4H @ imm4L, 32);
        if (t == 15 | n == 15) | n == t then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        execute_aarch32_instrs_STRHT_Op_A_txt(add, imm32, m, n, postindex, register_form, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2508) = {
    SEE = 2508;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm4H = Slice(__opcode, 8, 4);
    let imm4L = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_STRHT_A1enc_A_txt(cond, U, Rn, Rt, imm4H, imm4L)
}

val decode_aarch32_instrs_STRHT_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STRHT_A2enc_A_txt (cond, U, Rn, Rt, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        imm32 : bits(32) = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = true;
        if ((t == 15 | n == 15) | n == t) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        execute_aarch32_instrs_STRHT_Op_A_txt(add, imm32, m, n, postindex, register_form, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2509) = {
    SEE = 2509;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STRHT_A2enc_A_txt(cond, U, Rn, Rt, Rm)
    }
}

val decode_aarch32_instrs_STRHT_T1enc_A_txt : (bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_STRHT_T1enc_A_txt (Rn, Rt, imm8) = {
    if ConditionPassed() then {
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_Undefined())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = false;
        let add : bool = true;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRHT_Op_A_txt(add, imm32, m, n, postindex, register_form, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2510) = {
    SEE = 2510;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_STRHT_T1enc_A_txt(Rn, Rt, imm8)
}

val execute_aarch32_instrs_STR_i_OpA_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_STR_i_OpA_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(4, false, t, false)
    };
    MemU_set(address, 4) = if t == 15 then PCStoreValue() else R_read(t);
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STR_i_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_STR_i_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("STRT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        if wback & (n == 15 | n == t) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STR_i_OpA_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2511) = {
    SEE = 2511;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_STR_i_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm12)
}

val execute_aarch32_instrs_STR_i_OpT_A_txt : forall ('add : Bool) ('index : Bool) 'n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), bool('index), int('n), int('t), bool('wback)) -> unit

function execute_aarch32_instrs_STR_i_OpT_A_txt (add, imm32, index, n, t, wback) = {
    let offset_addr : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    let address : bits(32) = if index then offset_addr else R_read(n);
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(4, false, t, false)
    };
    MemU_set(address, 4) = R_read(t);
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STR_i_T1enc_A_txt : (bits(5), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_STR_i_T1enc_A_txt (imm5, Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm5 @ 0b00, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        execute_aarch32_instrs_STR_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2512) = {
    SEE = 2512;
    let imm5 = Slice(__opcode, 6, 5);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_STR_i_T1enc_A_txt(imm5, Rn, Rt)
}

val decode_aarch32_instrs_STR_i_T2enc_A_txt : (bits(3), bits(8)) -> unit

function decode_aarch32_instrs_STR_i_T2enc_A_txt (Rt, imm8) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = 13;
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        execute_aarch32_instrs_STR_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2513) = {
    SEE = 2513;
    let Rt = Slice(__opcode, 8, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_STR_i_T2enc_A_txt(Rt, imm8)
}

val decode_aarch32_instrs_STR_i_T3enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_STR_i_T3enc_A_txt (Rn, Rt, imm12) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STR_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2514) = {
    SEE = 2514;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_STR_i_T3enc_A_txt(Rn, Rt, imm12)
}

val decode_aarch32_instrs_STR_i_T4enc_A_txt : (bits(4), bits(4), bits(1), bits(1), bits(1), bits(8)) -> unit

function decode_aarch32_instrs_STR_i_T4enc_A_txt (Rn, Rt, P, U, W, imm8) = {
    if ConditionPassed() then {
        if (P == 0b1 & U == 0b1) & W == 0b0 then {
            throw(Error_See("STRT"))
        };
        if Rn == 0b1111 | P == 0b0 & W == 0b0 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        if t == 15 | wback & n == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STR_i_OpT_A_txt(add, imm32, index, n, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2515) = {
    SEE = 2515;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let P = Slice(__opcode, 10, 1);
    let U = Slice(__opcode, 9, 1);
    let W = Slice(__opcode, 8, 1);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_STR_i_T4enc_A_txt(Rn, Rt, P, U, W, imm8)
}

val execute_aarch32_instrs_STR_r_Op_A_txt : forall ('add : Bool) ('index : Bool) 'm 'n 'shift_n 't ('wback : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('add), bool('index), int('m), int('n), int('shift_n), SRType, int('t), bool('wback)) -> unit

function execute_aarch32_instrs_STR_r_Op_A_txt (add, index, m, n, shift_n, shift_t, t, wback) = {
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if index then offset_addr else R_read(n);
    data : bits(32) = undefined;
    if t == 15 then {
        data = PCStoreValue()
    } else {
        data = R_read(t)
    };
    if not_bool(wback) & t != 15 then {
        AArch32_SetLSInstructionSyndrome(4, false, t, false)
    };
    MemU_set(address, 4) = data;
    if wback then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STR_r_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_STR_r_A1enc_A_txt (cond, P, U, W, Rn, Rt, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if P == 0b0 & W == 0b1 then {
            throw(Error_See("STRT"))
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = P == 0b1;
        let add : bool = U == 0b1;
        let wback : bool = P == 0b0 | W == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        if wback & (n == 15 | n == t) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STR_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, _, _, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2516) = {
    SEE = 2516;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_STR_r_A1enc_A_txt(cond, P, U, W, Rn, Rt, imm5, stype, Rm)
}

val decode_aarch32_instrs_STR_r_T1enc_A_txt : (bits(3), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_STR_r_T1enc_A_txt (Rm, Rn, Rt) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_STR_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2517) = {
    SEE = 2517;
    let Rm = Slice(__opcode, 6, 3);
    let Rn = Slice(__opcode, 3, 3);
    let Rt = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_STR_r_T1enc_A_txt(Rm, Rn, Rt)
}

val decode_aarch32_instrs_STR_r_T2enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_STR_r_T2enc_A_txt (Rn, Rt, imm2, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_Undefined())
        };
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let index : bool = true;
        let add : bool = true;
        let wback : bool = false;
        (shift_t, shift_n) = (SRType_LSL, UInt(imm2));
        let 'shift_n = shift_n;
        if t == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STR_r_Op_A_txt(add, index, m, n, shift_n, shift_t, t, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2518) = {
    SEE = 2518;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm2 = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_STR_r_T2enc_A_txt(Rn, Rt, imm2, Rm)
}

val execute_aarch32_instrs_STRT_Op_A_txt : forall ('add : Bool) 'm 'n ('postindex : Bool) ('register_form : Bool) 'shift_n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (bool('add), bits(32), int('m), int('n), bool('postindex), bool('register_form), int('shift_n), SRType, int('t)) -> unit

function execute_aarch32_instrs_STRT_Op_A_txt (add, imm32, m, n, postindex, register_form, shift_n, shift_t, t) = {
    if PSTATE.EL == EL2 then {
        throw(Error_Unpredictable())
    };
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let offset : bits(32) = if register_form then
      Shift(R_read(m), shift_t, shift_n, PSTATE.C)
    else
      imm32;
    let offset_addr : bits(32) = if add then R_read(n) + offset else
      R_read(n) - offset;
    let address : bits(32) = if postindex then R_read(n) else offset_addr;
    data : bits(32) = undefined;
    if t == 15 then {
        data = PCStoreValue()
    } else {
        data = R_read(t)
    };
    if (not_bool(postindex) & t != 15) & PSTATE.T == 0b1 then {
        AArch32_SetLSInstructionSyndrome(4, false, t, false)
    };
    MemU_unpriv_set(address, 4) = data;
    if postindex then {
        R_set(n) = offset_addr
    };
    ()
}

val decode_aarch32_instrs_STRT_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_STRT_A1enc_A_txt (cond, U, Rn, Rt, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm12, 32);
        if n == 15 | n == t then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        execute_aarch32_instrs_STRT_Op_A_txt(add, imm32, m, n, postindex, register_form, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitzero, bitzero, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2519) = {
    SEE = 2519;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_STRT_A1enc_A_txt(cond, U, Rn, Rt, imm12)
}

val decode_aarch32_instrs_STRT_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_STRT_A2enc_A_txt (cond, U, Rn, Rt, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        imm32 : bits(32) = undefined;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let postindex : bool = true;
        let add : bool = U == 0b1;
        let register_form : bool = true;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        if (n == 15 | n == t) | m == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_STRT_Op_A_txt(add, imm32, m, n, postindex, register_form, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2520) = {
    SEE = 2520;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_STRT_A2enc_A_txt(cond, U, Rn, Rt, imm5, stype, Rm)
}

val decode_aarch32_instrs_STRT_T1enc_A_txt : (bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_STRT_T1enc_A_txt (Rn, Rt, imm8) = {
    if ConditionPassed() then {
        m : int = undefined;
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1111 then {
            throw(Error_Undefined())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        let m = m;
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        let postindex : bool = false;
        let add : bool = true;
        let register_form : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STRT_Op_A_txt(add, imm32, m, n, postindex, register_form, shift_n, shift_t, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2521) = {
    SEE = 2521;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_STRT_T1enc_A_txt(Rn, Rt, imm8)
}

val execute_aarch32_instrs_SUB_i_Op_A_txt : forall 'd 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), bits(32), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_SUB_i_Op_A_txt (d, imm32, n, setflags) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    (result, nzcv) = AddWithCarry(R_read(n), not_vec(imm32), 0b1);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_SUB_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_SUB_i_A1enc_A_txt (cond, S, Rn, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 & S == 0b0 then {
            throw(Error_See("ADR"))
        };
        if Rn == 0b1101 then {
            throw(Error_See("SUB (SP minus immediate)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = A32ExpandImm(imm12);
        execute_aarch32_instrs_SUB_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2522) = {
    SEE = 2522;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_SUB_i_A1enc_A_txt(cond, S, Rn, Rd, imm12)
}

val decode_aarch32_instrs_SUB_i_T1enc_A_txt : (bits(3), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_SUB_i_T1enc_A_txt (imm3, Rn, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = not_bool(InITBlock());
        let imm32 : bits(32) = ZeroExtend(imm3, 32);
        execute_aarch32_instrs_SUB_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2523) = {
    SEE = 2523;
    let imm3 = Slice(__opcode, 6, 3);
    let Rn = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_SUB_i_T1enc_A_txt(imm3, Rn, Rd)
}

val decode_aarch32_instrs_SUB_i_T2enc_A_txt : (bits(3), bits(8)) -> unit

function decode_aarch32_instrs_SUB_i_T2enc_A_txt (Rdn, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rdn);
        let 'n = UInt(Rdn);
        let setflags : bool = not_bool(InITBlock());
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        execute_aarch32_instrs_SUB_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2524) = {
    SEE = 2524;
    let Rdn = Slice(__opcode, 8, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_SUB_i_T2enc_A_txt(Rdn, imm8)
}

val decode_aarch32_instrs_SUB_i_T3enc_A_txt : (bits(1), bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_SUB_i_T3enc_A_txt (i, S, Rn, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        if Rd == 0b1111 & S == 0b1 then {
            throw(Error_See("CMP (immediate)"))
        };
        if Rn == 0b1101 then {
            throw(Error_See("SUB (SP minus immediate)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = T32ExpandImm((i @ imm3) @ imm8);
        if d == 15 & not_bool(setflags) | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SUB_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2525) = {
    SEE = 2525;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_SUB_i_T3enc_A_txt(i, S, Rn, imm3, Rd, imm8)
}

val decode_aarch32_instrs_SUB_i_T4enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_SUB_i_T4enc_A_txt (i, Rn, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("ADR"))
        };
        if Rn == 0b1101 then {
            throw(Error_See("SUB (SP minus immediate)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let setflags : bool = false;
        let imm32 : bits(32) = ZeroExtend((i @ imm3) @ imm8, 32);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SUB_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2526) = {
    SEE = 2526;
    let i = Slice(__opcode, 26, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_SUB_i_T4enc_A_txt(i, Rn, imm3, Rd, imm8)
}

val decode_aarch32_instrs_SUB_i_T5enc_A_txt : (bits(4), bits(8)) -> unit

function decode_aarch32_instrs_SUB_i_T5enc_A_txt (Rn, imm8) = {
    if ConditionPassed() then {
        if Rn == 0b1110 & IsZero(imm8) then {
            throw(Error_See("ERET"))
        };
        let 'd = 15;
        let 'n = UInt(Rn);
        let setflags : bool = true;
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        if n != 14 then {
            throw(Error_Unpredictable())
        };
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SUB_i_Op_A_txt(d, imm32, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2527) = {
    SEE = 2527;
    let Rn = Slice(__opcode, 16, 4);
    let imm8 = Slice(__opcode, 0, 8);
    if ((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b0) | [__opcode[13]] != 0b0) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SUB_i_T5enc_A_txt(Rn, imm8)
    }
}

val execute_aarch32_instrs_SUB_r_Op_A_txt : forall 'd 'm 'n ('setflags : Bool) 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_SUB_r_Op_A_txt (d, m, n, setflags, shift_n, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(R_read(n), not_vec(shifted), 0b1);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_SUB_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SUB_r_A1enc_A_txt (cond, S, Rn, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rn == 0b1101 then {
            throw(Error_See("SUB (SP minus register)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_SUB_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2528) = {
    SEE = 2528;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SUB_r_A1enc_A_txt(cond, S, Rn, Rd, imm5, stype, Rm)
}

val decode_aarch32_instrs_SUB_r_T1enc_A_txt : (bits(3), bits(3), bits(3)) -> unit

function decode_aarch32_instrs_SUB_r_T1enc_A_txt (Rm, Rn, Rd) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = not_bool(InITBlock());
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_SUB_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2529) = {
    SEE = 2529;
    let Rm = Slice(__opcode, 6, 3);
    let Rn = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_SUB_r_T1enc_A_txt(Rm, Rn, Rd)
}

val decode_aarch32_instrs_SUB_r_T2enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SUB_r_T2enc_A_txt (S, Rn, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rd == 0b1111 & S == 0b1 then {
            throw(Error_See("CMP (register)"))
        };
        if Rn == 0b1101 then {
            throw(Error_See("SUB (SP minus register)"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if (d == 15 & not_bool(setflags) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SUB_r_Op_A_txt(d, m, n, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2530) = {
    SEE = 2530;
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SUB_r_T2enc_A_txt(S, Rn, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_SUB_rr_Op_A_txt : forall 'd 'm 'n 's ('setflags : Bool),
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('s), bool('setflags), SRType) -> unit

function execute_aarch32_instrs_SUB_rr_Op_A_txt (d, m, n, s, setflags, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(R_read(n), not_vec(shifted), 0b1);
    R_set(d) = result;
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
    };
    ()
}

val decode_aarch32_instrs_SUB_rr_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SUB_rr_A1enc_A_txt (cond, S, Rn, Rd, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let setflags : bool = S == 0b1;
        let shift_t : SRType = DecodeRegShift(stype);
        if ((d == 15 | n == 15) | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SUB_rr_Op_A_txt(d, m, n, s, setflags, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2531) = {
    SEE = 2531;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SUB_rr_A1enc_A_txt(cond, S, Rn, Rd, Rs, stype, Rm)
}

val execute_aarch32_instrs_SUB_SP_i_Op_A_txt : forall 'd ('setflags : Bool), (0 <= 'd & 'd <= 15).
  (int('d), bits(32), bool('setflags)) -> unit

function execute_aarch32_instrs_SUB_SP_i_Op_A_txt (d, imm32, setflags) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    (result, nzcv) = AddWithCarry(SP_read__1(), not_vec(imm32), 0b1);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_SUB_SP_i_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_SUB_SP_i_A1enc_A_txt (cond, S, Rd, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = A32ExpandImm(imm12);
        execute_aarch32_instrs_SUB_SP_i_Op_A_txt(d, imm32, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2532) = {
    SEE = 2532;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 12, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_SUB_SP_i_A1enc_A_txt(cond, S, Rd, imm12)
}

val decode_aarch32_instrs_SUB_SP_i_T1enc_A_txt : bits(7) -> unit

function decode_aarch32_instrs_SUB_SP_i_T1enc_A_txt imm7 = {
    if ConditionPassed() then {
        let 'd = 13;
        let setflags : bool = false;
        let imm32 : bits(32) = ZeroExtend(imm7 @ 0b00, 32);
        execute_aarch32_instrs_SUB_SP_i_Op_A_txt(d, imm32, setflags)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _] as __opcode)) if SEE < 2533) = {
    SEE = 2533;
    let imm7 = Slice(__opcode, 0, 7);
    decode_aarch32_instrs_SUB_SP_i_T1enc_A_txt(imm7)
}

val decode_aarch32_instrs_SUB_SP_i_T2enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_SUB_SP_i_T2enc_A_txt (i, S, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        if Rd == 0b1111 & S == 0b1 then {
            throw(Error_See("CMP (immediate)"))
        };
        let 'd = UInt(Rd);
        let setflags : bool = S == 0b1;
        let imm32 : bits(32) = T32ExpandImm((i @ imm3) @ imm8);
        if d == 15 & not_bool(setflags) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SUB_SP_i_Op_A_txt(d, imm32, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2534) = {
    SEE = 2534;
    let i = Slice(__opcode, 26, 1);
    let S = Slice(__opcode, 20, 1);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_SUB_SP_i_T2enc_A_txt(i, S, imm3, Rd, imm8)
}

val decode_aarch32_instrs_SUB_SP_i_T3enc_A_txt : (bits(1), bits(3), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_SUB_SP_i_T3enc_A_txt (i, imm3, Rd, imm8) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let setflags : bool = false;
        let imm32 : bits(32) = ZeroExtend((i @ imm3) @ imm8, 32);
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SUB_SP_i_Op_A_txt(d, imm32, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2535) = {
    SEE = 2535;
    let i = Slice(__opcode, 26, 1);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_SUB_SP_i_T3enc_A_txt(i, imm3, Rd, imm8)
}

val execute_aarch32_instrs_SUB_SP_r_Op_A_txt : forall 'd 'm ('setflags : Bool) 'shift_n,
  (0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), bool('setflags), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_SUB_SP_r_Op_A_txt (d, m, setflags, shift_n, shift_t) = {
    nzcv : bits(4) = undefined;
    result : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let shifted : bits(32) = Shift(R_read(m), shift_t, shift_n, PSTATE.C);
    (result, nzcv) = AddWithCarry(SP_read__1(), not_vec(shifted), 0b1);
    if d == 15 then {
        if setflags then {
            ALUExceptionReturn(result)
        } else {
            ALUWritePC(result)
        }
    } else {
        R_set(d) = result;
        if setflags then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = nzcv
        };
        ()
    }
}

val decode_aarch32_instrs_SUB_SP_r_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SUB_SP_r_A1enc_A_txt (cond, S, Rd, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_SUB_SP_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2536) = {
    SEE = 2536;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SUB_SP_r_A1enc_A_txt(cond, S, Rd, imm5, stype, Rm)
}

val decode_aarch32_instrs_SUB_SP_r_T1enc_A_txt : (bits(1), bits(3), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SUB_SP_r_T1enc_A_txt (S, imm3, Rd, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if Rd == 0b1111 & S == 0b1 then {
            throw(Error_See("CMP (register)"))
        };
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if d == 15 & not_bool(setflags) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SUB_SP_r_Op_A_txt(d, m, setflags, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2537) = {
    SEE = 2537;
    let S = Slice(__opcode, 20, 1);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SUB_SP_r_T1enc_A_txt(S, imm3, Rd, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_SVC_Op_A_txt : bits(32) -> unit

function execute_aarch32_instrs_SVC_Op_A_txt imm32 = {
    AArch32_CheckForSVCTrap(imm32[15 .. 0]);
    AArch32_CallSupervisor(imm32[15 .. 0])
}

val decode_aarch32_instrs_SVC_A1enc_A_txt : (bits(4), bits(24)) -> unit

function decode_aarch32_instrs_SVC_A1enc_A_txt (cond, imm24) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let imm32 : bits(32) = ZeroExtend(imm24, 32);
        execute_aarch32_instrs_SVC_Op_A_txt(imm32)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2538) = {
    SEE = 2538;
    let cond = Slice(__opcode, 28, 4);
    let imm24 = Slice(__opcode, 0, 24);
    decode_aarch32_instrs_SVC_A1enc_A_txt(cond, imm24)
}

val decode_aarch32_instrs_SVC_T1enc_A_txt : bits(8) -> unit

function decode_aarch32_instrs_SVC_T1enc_A_txt imm8 = {
    if ConditionPassed() then {
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        execute_aarch32_instrs_SVC_Op_A_txt(imm32)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2539) = {
    SEE = 2539;
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_SVC_T1enc_A_txt(imm8)
}

val execute_aarch32_instrs_SXTAB16_Op_A_txt : forall 'd 'm 'n 'rotation,
  (0 <= 'rotation & 'rotation <= 31 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('rotation)) -> unit

function execute_aarch32_instrs_SXTAB16_Op_A_txt (d, m, n, rotation) = {
    let rotated : bits(32) = ROR(R_read(m), rotation);
    R_set(d) = [R_read(d) with 15 .. 0 = R_read(n)[15 .. 0] + SignExtend(rotated[7 .. 0], 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = R_read(n)[31 .. 16] + SignExtend(rotated[23 .. 16], 16)]
}

val decode_aarch32_instrs_SXTAB16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SXTAB16_A1enc_A_txt (cond, Rn, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("SXTB16"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SXTAB16_Op_A_txt(d, m, n, rotation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2540) = {
    SEE = 2540;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let rotate = Slice(__opcode, 10, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b0 | [__opcode[9]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SXTAB16_A1enc_A_txt(cond, Rn, Rd, rotate, Rm)
    }
}

val decode_aarch32_instrs_SXTAB16_T1enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SXTAB16_T1enc_A_txt (Rn, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("SXTB16"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SXTAB16_Op_A_txt(d, m, n, rotation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2541) = {
    SEE = 2541;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let rotate = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[6]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SXTAB16_T1enc_A_txt(Rn, Rd, rotate, Rm)
    }
}

val execute_aarch32_instrs_SXTAB_Op_A_txt : forall 'd 'm 'n 'rotation,
  (0 <= 'rotation & 'rotation <= 31 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('rotation)) -> unit

function execute_aarch32_instrs_SXTAB_Op_A_txt (d, m, n, rotation) = {
    let rotated : bits(32) = ROR(R_read(m), rotation);
    R_set(d) = R_read(n) + SignExtend(rotated[7 .. 0], 32)
}

val decode_aarch32_instrs_SXTAB_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SXTAB_A1enc_A_txt (cond, Rn, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("SXTB"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SXTAB_Op_A_txt(d, m, n, rotation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2542) = {
    SEE = 2542;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let rotate = Slice(__opcode, 10, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b0 | [__opcode[9]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SXTAB_A1enc_A_txt(cond, Rn, Rd, rotate, Rm)
    }
}

val decode_aarch32_instrs_SXTAB_T1enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SXTAB_T1enc_A_txt (Rn, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("SXTB"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SXTAB_Op_A_txt(d, m, n, rotation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2543) = {
    SEE = 2543;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let rotate = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[6]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SXTAB_T1enc_A_txt(Rn, Rd, rotate, Rm)
    }
}

val execute_aarch32_instrs_SXTAH_Op_A_txt : forall 'd 'm 'n 'rotation,
  (0 <= 'rotation & 'rotation <= 31 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('rotation)) -> unit

function execute_aarch32_instrs_SXTAH_Op_A_txt (d, m, n, rotation) = {
    let rotated : bits(32) = ROR(R_read(m), rotation);
    R_set(d) = R_read(n) + SignExtend(rotated[15 .. 0], 32)
}

val decode_aarch32_instrs_SXTAH_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SXTAH_A1enc_A_txt (cond, Rn, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("SXTH"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SXTAH_Op_A_txt(d, m, n, rotation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2544) = {
    SEE = 2544;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let rotate = Slice(__opcode, 10, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b0 | [__opcode[9]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SXTAH_A1enc_A_txt(cond, Rn, Rd, rotate, Rm)
    }
}

val decode_aarch32_instrs_SXTAH_T1enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SXTAH_T1enc_A_txt (Rn, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("SXTH"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SXTAH_Op_A_txt(d, m, n, rotation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2545) = {
    SEE = 2545;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let rotate = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[6]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SXTAH_T1enc_A_txt(Rn, Rd, rotate, Rm)
    }
}

val execute_aarch32_instrs_SXTB16_Op_A_txt : forall 'd 'm 'rotation,
  (0 <= 'rotation & 'rotation <= 31 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('rotation)) -> unit

function execute_aarch32_instrs_SXTB16_Op_A_txt (d, m, rotation) = {
    let rotated : bits(32) = ROR(R_read(m), rotation);
    R_set(d) = [R_read(d) with 15 .. 0 = SignExtend(rotated[7 .. 0], 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = SignExtend(rotated[23 .. 16], 16)]
}

val decode_aarch32_instrs_SXTB16_A1enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SXTB16_A1enc_A_txt (cond, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SXTB16_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2546) = {
    SEE = 2546;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let rotate = Slice(__opcode, 10, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b0 | [__opcode[9]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SXTB16_A1enc_A_txt(cond, Rd, rotate, Rm)
    }
}

val decode_aarch32_instrs_SXTB16_T1enc_A_txt : (bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SXTB16_T1enc_A_txt (Rd, rotate, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SXTB16_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2547) = {
    SEE = 2547;
    let Rd = Slice(__opcode, 8, 4);
    let rotate = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[6]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SXTB16_T1enc_A_txt(Rd, rotate, Rm)
    }
}

val execute_aarch32_instrs_SXTB_Op_A_txt : forall 'd 'm 'rotation,
  (0 <= 'rotation & 'rotation <= 31 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('rotation)) -> unit

function execute_aarch32_instrs_SXTB_Op_A_txt (d, m, rotation) = {
    let rotated : bits(32) = ROR(R_read(m), rotation);
    R_set(d) = SignExtend(rotated[7 .. 0], 32)
}

val decode_aarch32_instrs_SXTB_A1enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SXTB_A1enc_A_txt (cond, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SXTB_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2548) = {
    SEE = 2548;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let rotate = Slice(__opcode, 10, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b0 | [__opcode[9]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SXTB_A1enc_A_txt(cond, Rd, rotate, Rm)
    }
}

val decode_aarch32_instrs_SXTB_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_SXTB_T1enc_A_txt (Rm, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = 0;
        execute_aarch32_instrs_SXTB_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 2549) = {
    SEE = 2549;
    let Rm = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_SXTB_T1enc_A_txt(Rm, Rd)
}

val decode_aarch32_instrs_SXTB_T2enc_A_txt : (bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SXTB_T2enc_A_txt (Rd, rotate, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SXTB_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2550) = {
    SEE = 2550;
    let Rd = Slice(__opcode, 8, 4);
    let rotate = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[6]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SXTB_T2enc_A_txt(Rd, rotate, Rm)
    }
}

val execute_aarch32_instrs_SXTH_Op_A_txt : forall 'd 'm 'rotation,
  (0 <= 'rotation & 'rotation <= 31 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('rotation)) -> unit

function execute_aarch32_instrs_SXTH_Op_A_txt (d, m, rotation) = {
    let rotated : bits(32) = ROR(R_read(m), rotation);
    R_set(d) = SignExtend(rotated[15 .. 0], 32)
}

val decode_aarch32_instrs_SXTH_A1enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SXTH_A1enc_A_txt (cond, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SXTH_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2551) = {
    SEE = 2551;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let rotate = Slice(__opcode, 10, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b0 | [__opcode[9]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SXTH_A1enc_A_txt(cond, Rd, rotate, Rm)
    }
}

val decode_aarch32_instrs_SXTH_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_SXTH_T1enc_A_txt (Rm, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = 0;
        execute_aarch32_instrs_SXTH_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2552) = {
    SEE = 2552;
    let Rm = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_SXTH_T1enc_A_txt(Rm, Rd)
}

val decode_aarch32_instrs_SXTH_T2enc_A_txt : (bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_SXTH_T2enc_A_txt (Rd, rotate, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SXTH_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2553) = {
    SEE = 2553;
    let Rd = Slice(__opcode, 8, 4);
    let rotate = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[6]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SXTH_T2enc_A_txt(Rd, rotate, Rm)
    }
}

val execute_aarch32_instrs_TBB_Op_A_txt : forall ('is_tbh : Bool) 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (bool('is_tbh), int('m), int('n)) -> unit

function execute_aarch32_instrs_TBB_Op_A_txt (is_tbh, m, n) = {
    halfwords : range(0, 65535) = undefined;
    if is_tbh then {
        halfwords = UInt(MemU_read(R_read(n) + LSL(R_read(m), 1), 2))
    } else {
        halfwords = UInt(MemU_read(R_read(n) + R_read(m), 1))
    };
    let 'halfwords = halfwords;
    BranchWritePC(PC_read__1() + 2 * halfwords, BranchType_INDIR)
}

val decode_aarch32_instrs_TBB_T1enc_A_txt : (bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_TBB_T1enc_A_txt (Rn, H, Rm) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let is_tbh : bool = H == 0b1;
        if m == 15 then {
            throw(Error_Unpredictable())
        };
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_TBB_Op_A_txt(is_tbh, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2554) = {
    SEE = 2554;
    let Rn = Slice(__opcode, 16, 4);
    let H = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    if (((((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_TBB_T1enc_A_txt(Rn, H, Rm)
    }
}

val execute_aarch32_instrs_TEQ_i_Op_A_txt : forall 'n, (0 <= 'n & 'n <= 15).
  (bits(1), bits(32), int('n)) -> unit

function execute_aarch32_instrs_TEQ_i_Op_A_txt (carry, imm32, n) = {
    let result : bits(32) = EOR(R_read(n), imm32);
    PSTATE.N = [result[31]];
    PSTATE.Z = IsZeroBit(result);
    PSTATE.C = carry
}

val decode_aarch32_instrs_TEQ_i_A1enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_TEQ_i_A1enc_A_txt (cond, Rn, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'n = UInt(Rn);
        (imm32, carry) = A32ExpandImm_C(imm12, PSTATE.C);
        execute_aarch32_instrs_TEQ_i_Op_A_txt(carry, imm32, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2555) = {
    SEE = 2555;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let imm12 = Slice(__opcode, 0, 12);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_TEQ_i_A1enc_A_txt(cond, Rn, imm12)
    }
}

val decode_aarch32_instrs_TEQ_i_T1enc_A_txt : (bits(1), bits(4), bits(3), bits(8)) -> unit

function decode_aarch32_instrs_TEQ_i_T1enc_A_txt (i, Rn, imm3, imm8) = {
    if ConditionPassed() then {
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'n = UInt(Rn);
        (imm32, carry) = T32ExpandImm_C((i @ imm3) @ imm8, PSTATE.C);
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        let carry = carry;
        execute_aarch32_instrs_TEQ_i_Op_A_txt(carry, imm32, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2556) = {
    SEE = 2556;
    let i = Slice(__opcode, 26, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_TEQ_i_T1enc_A_txt(i, Rn, imm3, imm8)
}

val execute_aarch32_instrs_TEQ_r_Op_A_txt : forall 'm 'n 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (int('m), int('n), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_TEQ_r_Op_A_txt (m, n, shift_n, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = EOR(R_read(n), shifted);
    PSTATE.N = [result[31]];
    PSTATE.Z = IsZeroBit(result);
    PSTATE.C = carry
}

val decode_aarch32_instrs_TEQ_r_A1enc_A_txt : (bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_TEQ_r_A1enc_A_txt (cond, Rn, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_TEQ_r_Op_A_txt(m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2557) = {
    SEE = 2557;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_TEQ_r_A1enc_A_txt(cond, Rn, imm5, stype, Rm)
    }
}

val decode_aarch32_instrs_TEQ_r_T1enc_A_txt : (bits(4), bits(3), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_TEQ_r_T1enc_A_txt (Rn, imm3, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if n == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_TEQ_r_Op_A_txt(m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2558) = {
    SEE = 2558;
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_TEQ_r_T1enc_A_txt(Rn, imm3, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_TEQ_rr_Op_A_txt : forall 'm 'n 's,
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (int('m), int('n), int('s), SRType) -> unit

function execute_aarch32_instrs_TEQ_rr_Op_A_txt (m, n, s, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = EOR(R_read(n), shifted);
    PSTATE.N = [result[31]];
    PSTATE.Z = IsZeroBit(result);
    PSTATE.C = carry
}

val decode_aarch32_instrs_TEQ_rr_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_TEQ_rr_A1enc_A_txt (cond, Rn, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let shift_t : SRType = DecodeRegShift(stype);
        if (n == 15 | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_TEQ_rr_Op_A_txt(m, n, s, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2559) = {
    SEE = 2559;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_TEQ_rr_A1enc_A_txt(cond, Rn, Rs, stype, Rm)
    }
}

val execute_aarch32_instrs_TST_i_Op_A_txt : forall 'n, (0 <= 'n & 'n <= 15).
  (bits(1), bits(32), int('n)) -> unit

function execute_aarch32_instrs_TST_i_Op_A_txt (carry, imm32, n) = {
    let result : bits(32) = R_read(n) & imm32;
    PSTATE.N = [result[31]];
    PSTATE.Z = IsZeroBit(result);
    PSTATE.C = carry
}

val decode_aarch32_instrs_TST_i_A1enc_A_txt : (bits(4), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_TST_i_A1enc_A_txt (cond, Rn, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'n = UInt(Rn);
        (imm32, carry) = A32ExpandImm_C(imm12, PSTATE.C);
        execute_aarch32_instrs_TST_i_Op_A_txt(carry, imm32, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2560) = {
    SEE = 2560;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let imm12 = Slice(__opcode, 0, 12);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_TST_i_A1enc_A_txt(cond, Rn, imm12)
    }
}

val decode_aarch32_instrs_TST_i_T1enc_A_txt : (bits(1), bits(4), bits(3), bits(8)) -> unit

function decode_aarch32_instrs_TST_i_T1enc_A_txt (i, Rn, imm3, imm8) = {
    if ConditionPassed() then {
        carry : bits(1) = undefined;
        imm32 : bits(32) = undefined;
        let 'n = UInt(Rn);
        (imm32, carry) = T32ExpandImm_C((i @ imm3) @ imm8, PSTATE.C);
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        let imm32 = imm32;
        let carry = carry;
        execute_aarch32_instrs_TST_i_Op_A_txt(carry, imm32, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2561) = {
    SEE = 2561;
    let i = Slice(__opcode, 26, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_TST_i_T1enc_A_txt(i, Rn, imm3, imm8)
}

val execute_aarch32_instrs_TST_r_Op_A_txt : forall 'm 'n 'shift_n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (int('m), int('n), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_TST_r_Op_A_txt (m, n, shift_n, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = R_read(n) & shifted;
    PSTATE.N = [result[31]];
    PSTATE.Z = IsZeroBit(result);
    PSTATE.C = carry
}

val decode_aarch32_instrs_TST_r_A1enc_A_txt : (bits(4), bits(4), bits(5), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_TST_r_A1enc_A_txt (cond, Rn, imm5, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = DecodeImmShift(stype, imm5);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_TST_r_Op_A_txt(m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2562) = {
    SEE = 2562;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_TST_r_A1enc_A_txt(cond, Rn, imm5, stype, Rm)
    }
}

val decode_aarch32_instrs_TST_r_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_TST_r_T1enc_A_txt (Rm, Rn) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = (SRType_LSL, 0);
        let 'shift_n = shift_n;
        execute_aarch32_instrs_TST_r_Op_A_txt(m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2563) = {
    SEE = 2563;
    let Rm = Slice(__opcode, 3, 3);
    let Rn = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_TST_r_T1enc_A_txt(Rm, Rn)
}

val decode_aarch32_instrs_TST_r_T2enc_A_txt : (bits(4), bits(3), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_TST_r_T2enc_A_txt (Rn, imm3, imm2, stype, Rm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        (shift_t, shift_n) = DecodeImmShift(stype, imm3 @ imm2);
        let 'shift_n = shift_n;
        if n == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_TST_r_Op_A_txt(m, n, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2564) = {
    SEE = 2564;
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let imm2 = Slice(__opcode, 6, 2);
    let stype = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_TST_r_T2enc_A_txt(Rn, imm3, imm2, stype, Rm)
    }
}

val execute_aarch32_instrs_TST_rr_Op_A_txt : forall 'm 'n 's,
  (0 <= 's & 's <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15).
  (int('m), int('n), int('s), SRType) -> unit

function execute_aarch32_instrs_TST_rr_Op_A_txt (m, n, s, shift_t) = {
    carry : bits(1) = undefined;
    shifted : bits(32) = undefined;
    let 'shift_n = UInt(R_read(s)[7 .. 0]);
    (shifted, carry) = Shift_C(R_read(m), shift_t, shift_n, PSTATE.C);
    let result : bits(32) = R_read(n) & shifted;
    PSTATE.N = [result[31]];
    PSTATE.Z = IsZeroBit(result);
    PSTATE.C = carry
}

val decode_aarch32_instrs_TST_rr_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_TST_rr_A1enc_A_txt (cond, Rn, Rs, stype, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 's = UInt(Rs);
        let shift_t : SRType = DecodeRegShift(stype);
        if (n == 15 | m == 15) | s == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_TST_rr_Op_A_txt(m, n, s, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2565) = {
    SEE = 2565;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rs = Slice(__opcode, 8, 4);
    let stype = Slice(__opcode, 5, 2);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_TST_rr_A1enc_A_txt(cond, Rn, Rs, stype, Rm)
    }
}

val execute_aarch32_instrs_UADD16_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UADD16_Op_A_txt (d, m, n) = {
    let 'sum1 = UInt(R_read(n)[15 .. 0]) + UInt(R_read(m)[15 .. 0]);
    let 'sum2 = UInt(R_read(n)[31 .. 16]) + UInt(R_read(m)[31 .. 16]);
    R_set(d) = [R_read(d) with 15 .. 0 = sum1[15 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 16 = sum2[15 .. 0]];
    PSTATE.GE[1 .. 0] = if sum1 >= UInt(0x10000) then 0b11 else 0b00;
    PSTATE.GE[3 .. 2] = if sum2 >= UInt(0x10000) then 0b11 else 0b00
}

val decode_aarch32_instrs_UADD16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UADD16_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UADD16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2566) = {
    SEE = 2566;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UADD16_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UADD16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UADD16_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UADD16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2567) = {
    SEE = 2567;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UADD16_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UADD8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UADD8_Op_A_txt (d, m, n) = {
    let 'sum1 = UInt(R_read(n)[7 .. 0]) + UInt(R_read(m)[7 .. 0]);
    let 'sum2 = UInt(R_read(n)[15 .. 8]) + UInt(R_read(m)[15 .. 8]);
    let 'sum3 = UInt(R_read(n)[23 .. 16]) + UInt(R_read(m)[23 .. 16]);
    let 'sum4 = UInt(R_read(n)[31 .. 24]) + UInt(R_read(m)[31 .. 24]);
    R_set(d) = [R_read(d) with 7 .. 0 = sum1[7 .. 0]];
    R_set(d) = [R_read(d) with 15 .. 8 = sum2[7 .. 0]];
    R_set(d) = [R_read(d) with 23 .. 16 = sum3[7 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 24 = sum4[7 .. 0]];
    PSTATE.GE[0] = Bit(if sum1 >= UInt(0x100) then 0b1 else 0b0);
    PSTATE.GE[1] = Bit(if sum2 >= UInt(0x100) then 0b1 else 0b0);
    PSTATE.GE[2] = Bit(if sum3 >= UInt(0x100) then 0b1 else 0b0);
    PSTATE.GE[3] = Bit(if sum4 >= UInt(0x100) then 0b1 else 0b0)
}

val decode_aarch32_instrs_UADD8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UADD8_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UADD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2568) = {
    SEE = 2568;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UADD8_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UADD8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UADD8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UADD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2569) = {
    SEE = 2569;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UADD8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UASX_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UASX_Op_A_txt (d, m, n) = {
    let 'diff = UInt(R_read(n)[15 .. 0]) - UInt(R_read(m)[31 .. 16]);
    let 'sum = UInt(R_read(n)[31 .. 16]) + UInt(R_read(m)[15 .. 0]);
    R_set(d) = [R_read(d) with 15 .. 0 = diff[15 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 16 = sum[15 .. 0]];
    PSTATE.GE[1 .. 0] = if diff >= 0 then 0b11 else 0b00;
    PSTATE.GE[3 .. 2] = if sum >= UInt(0x10000) then 0b11 else 0b00
}

val decode_aarch32_instrs_UASX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UASX_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UASX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2570) = {
    SEE = 2570;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UASX_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UASX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UASX_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UASX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2571) = {
    SEE = 2571;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UASX_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UBFX_Op_A_txt : forall 'd 'lsbit 'n 'widthminus1,
  (0 <= 'widthminus1 & 'widthminus1 <= 31 & 0 <= 'n & 'n <= 15 & 0 <= 'lsbit & 'lsbit <= 31 & 0 <= 'd & 'd <= 15).
  (int('d), int('lsbit), int('n), int('widthminus1)) -> unit

function execute_aarch32_instrs_UBFX_Op_A_txt (d, lsbit, n, widthminus1) = {
    let 'msbit = lsbit + widthminus1;
    if msbit <= 31 then {
        R_set(d) = ZeroExtend(R_read(n)[msbit .. lsbit], 32)
    } else {
        throw(Error_Unpredictable())
    }
}

val decode_aarch32_instrs_UBFX_A1enc_A_txt : (bits(4), bits(5), bits(4), bits(5), bits(4)) -> unit

function decode_aarch32_instrs_UBFX_A1enc_A_txt (cond, widthm1, Rd, lsb, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'lsbit = UInt(lsb);
        let 'widthminus1 = UInt(widthm1);
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UBFX_Op_A_txt(d, lsbit, n, widthminus1)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2572) = {
    SEE = 2572;
    let cond = Slice(__opcode, 28, 4);
    let widthm1 = Slice(__opcode, 16, 5);
    let Rd = Slice(__opcode, 12, 4);
    let lsb = Slice(__opcode, 7, 5);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UBFX_A1enc_A_txt(cond, widthm1, Rd, lsb, Rn)
}

val decode_aarch32_instrs_UBFX_T1enc_A_txt : (bits(4), bits(3), bits(4), bits(2), bits(5)) -> unit

function decode_aarch32_instrs_UBFX_T1enc_A_txt (Rn, imm3, Rd, imm2, widthm1) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'lsbit = UInt(imm3 @ imm2);
        let 'widthminus1 = UInt(widthm1);
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UBFX_Op_A_txt(d, lsbit, n, widthminus1)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2573) = {
    SEE = 2573;
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let widthm1 = Slice(__opcode, 0, 5);
    if [__opcode[26]] != 0b0 | [__opcode[5]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UBFX_T1enc_A_txt(Rn, imm3, Rd, imm2, widthm1)
    }
}

val execute_aarch32_instrs_UDF_Op_A_txt : unit -> unit

function execute_aarch32_instrs_UDF_Op_A_txt () = {
    throw(Error_Undefined())
}

val decode_aarch32_instrs_UDF_A1enc_A_txt : (bits(12), bits(4)) -> unit

function decode_aarch32_instrs_UDF_A1enc_A_txt (imm12, imm4) = {
    if ConditionPassed() then {
        let imm32 : bits(32) = ZeroExtend(imm12 @ imm4, 32);
        execute_aarch32_instrs_UDF_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2574) = {
    SEE = 2574;
    let imm12 = Slice(__opcode, 8, 12);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UDF_A1enc_A_txt(imm12, imm4)
}

val decode_aarch32_instrs_UDF_T1enc_A_txt : bits(8) -> unit

function decode_aarch32_instrs_UDF_T1enc_A_txt imm8 = {
    if ConditionPassed() then {
        let imm32 : bits(32) = ZeroExtend(imm8, 32);
        execute_aarch32_instrs_UDF_Op_A_txt()
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2575) = {
    SEE = 2575;
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_UDF_T1enc_A_txt(imm8)
}

val decode_aarch32_instrs_UDF_T2enc_A_txt : (bits(4), bits(12)) -> unit

function decode_aarch32_instrs_UDF_T2enc_A_txt (imm4, imm12) = {
    if ConditionPassed() then {
        let imm32 : bits(32) = ZeroExtend(imm4 @ imm12, 32);
        execute_aarch32_instrs_UDF_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2576) = {
    SEE = 2576;
    let imm4 = Slice(__opcode, 16, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_UDF_T2enc_A_txt(imm4, imm12)
}

val execute_aarch32_instrs_UDIV_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UDIV_Op_A_txt (d, m, n) = {
    result : int = undefined;
    if UInt(R_read(m)) == 0 then {
        result = 0
    } else {
        result = RoundTowardsZero(Real(UInt(R_read(n))) / Real(UInt(R_read(m))))
    };
    let 'result = result;
    R_set(d) = result[31 .. 0]
}

val decode_aarch32_instrs_UDIV_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UDIV_A1enc_A_txt (cond, Rd, Ra, Rm, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        if ((d == 15 | n == 15) | m == 15) | a != 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UDIV_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2577) = {
    SEE = 2577;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UDIV_A1enc_A_txt(cond, Rd, Ra, Rm, Rn)
}

val decode_aarch32_instrs_UDIV_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UDIV_T1enc_A_txt (Rn, Ra, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        if ((d == 15 | n == 15) | m == 15) | a != 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UDIV_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2578) = {
    SEE = 2578;
    let Rn = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UDIV_T1enc_A_txt(Rn, Ra, Rd, Rm)
}

val execute_aarch32_instrs_UHADD16_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UHADD16_Op_A_txt (d, m, n) = {
    let 'sum1 = UInt(R_read(n)[15 .. 0]) + UInt(R_read(m)[15 .. 0]);
    let 'sum2 = UInt(R_read(n)[31 .. 16]) + UInt(R_read(m)[31 .. 16]);
    R_set(d) = [R_read(d) with 15 .. 0 = sum1[16 .. 1]];
    R_set(d) = [R_read(d) with 31 .. 16 = sum2[16 .. 1]]
}

val decode_aarch32_instrs_UHADD16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UHADD16_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UHADD16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2579) = {
    SEE = 2579;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UHADD16_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UHADD16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UHADD16_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UHADD16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2580) = {
    SEE = 2580;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UHADD16_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UHADD8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UHADD8_Op_A_txt (d, m, n) = {
    let 'sum1 = UInt(R_read(n)[7 .. 0]) + UInt(R_read(m)[7 .. 0]);
    let 'sum2 = UInt(R_read(n)[15 .. 8]) + UInt(R_read(m)[15 .. 8]);
    let 'sum3 = UInt(R_read(n)[23 .. 16]) + UInt(R_read(m)[23 .. 16]);
    let 'sum4 = UInt(R_read(n)[31 .. 24]) + UInt(R_read(m)[31 .. 24]);
    R_set(d) = [R_read(d) with 7 .. 0 = sum1[8 .. 1]];
    R_set(d) = [R_read(d) with 15 .. 8 = sum2[8 .. 1]];
    R_set(d) = [R_read(d) with 23 .. 16 = sum3[8 .. 1]];
    R_set(d) = [R_read(d) with 31 .. 24 = sum4[8 .. 1]]
}

val decode_aarch32_instrs_UHADD8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UHADD8_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UHADD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2581) = {
    SEE = 2581;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UHADD8_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UHADD8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UHADD8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UHADD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2582) = {
    SEE = 2582;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UHADD8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UHASX_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UHASX_Op_A_txt (d, m, n) = {
    let 'diff = UInt(R_read(n)[15 .. 0]) - UInt(R_read(m)[31 .. 16]);
    let 'sum = UInt(R_read(n)[31 .. 16]) + UInt(R_read(m)[15 .. 0]);
    R_set(d) = [R_read(d) with 15 .. 0 = diff[16 .. 1]];
    R_set(d) = [R_read(d) with 31 .. 16 = sum[16 .. 1]]
}

val decode_aarch32_instrs_UHASX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UHASX_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UHASX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2583) = {
    SEE = 2583;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UHASX_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UHASX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UHASX_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UHASX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2584) = {
    SEE = 2584;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UHASX_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UHSAX_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UHSAX_Op_A_txt (d, m, n) = {
    let 'sum = UInt(R_read(n)[15 .. 0]) + UInt(R_read(m)[31 .. 16]);
    let 'diff = UInt(R_read(n)[31 .. 16]) - UInt(R_read(m)[15 .. 0]);
    R_set(d) = [R_read(d) with 15 .. 0 = sum[16 .. 1]];
    R_set(d) = [R_read(d) with 31 .. 16 = diff[16 .. 1]]
}

val decode_aarch32_instrs_UHSAX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UHSAX_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UHSAX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2585) = {
    SEE = 2585;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UHSAX_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UHSAX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UHSAX_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UHSAX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2586) = {
    SEE = 2586;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UHSAX_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UHSUB16_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UHSUB16_Op_A_txt (d, m, n) = {
    let 'diff1 = UInt(R_read(n)[15 .. 0]) - UInt(R_read(m)[15 .. 0]);
    let 'diff2 = UInt(R_read(n)[31 .. 16]) - UInt(R_read(m)[31 .. 16]);
    R_set(d) = [R_read(d) with 15 .. 0 = diff1[16 .. 1]];
    R_set(d) = [R_read(d) with 31 .. 16 = diff2[16 .. 1]]
}

val decode_aarch32_instrs_UHSUB16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UHSUB16_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UHSUB16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2587) = {
    SEE = 2587;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UHSUB16_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UHSUB16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UHSUB16_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UHSUB16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2588) = {
    SEE = 2588;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UHSUB16_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UHSUB8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UHSUB8_Op_A_txt (d, m, n) = {
    let 'diff1 = UInt(R_read(n)[7 .. 0]) - UInt(R_read(m)[7 .. 0]);
    let 'diff2 = UInt(R_read(n)[15 .. 8]) - UInt(R_read(m)[15 .. 8]);
    let 'diff3 = UInt(R_read(n)[23 .. 16]) - UInt(R_read(m)[23 .. 16]);
    let 'diff4 = UInt(R_read(n)[31 .. 24]) - UInt(R_read(m)[31 .. 24]);
    R_set(d) = [R_read(d) with 7 .. 0 = diff1[8 .. 1]];
    R_set(d) = [R_read(d) with 15 .. 8 = diff2[8 .. 1]];
    R_set(d) = [R_read(d) with 23 .. 16 = diff3[8 .. 1]];
    R_set(d) = [R_read(d) with 31 .. 24 = diff4[8 .. 1]]
}

val decode_aarch32_instrs_UHSUB8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UHSUB8_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UHSUB8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2589) = {
    SEE = 2589;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UHSUB8_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UHSUB8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UHSUB8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UHSUB8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2590) = {
    SEE = 2590;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UHSUB8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UMAAL_Op_A_txt : forall 'dHi 'dLo 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'dLo & 'dLo <= 15 & 0 <= 'dHi & 'dHi <= 15).
  (int('dHi), int('dLo), int('m), int('n)) -> unit

function execute_aarch32_instrs_UMAAL_Op_A_txt (dHi, dLo, m, n) = {
    let 'result = UInt(R_read(n)) * UInt(R_read(m)) + UInt(R_read(dHi)) + UInt(R_read(dLo));
    R_set(dHi) = result[63 .. 32];
    R_set(dLo) = result[31 .. 0]
}

val decode_aarch32_instrs_UMAAL_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UMAAL_A1enc_A_txt (cond, RdHi, RdLo, Rm, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UMAAL_Op_A_txt(dHi, dLo, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2591) = {
    SEE = 2591;
    let cond = Slice(__opcode, 28, 4);
    let RdHi = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UMAAL_A1enc_A_txt(cond, RdHi, RdLo, Rm, Rn)
}

val decode_aarch32_instrs_UMAAL_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UMAAL_T1enc_A_txt (Rn, RdLo, RdHi, Rm) = {
    if ConditionPassed() then {
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UMAAL_Op_A_txt(dHi, dLo, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2592) = {
    SEE = 2592;
    let Rn = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let RdHi = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UMAAL_T1enc_A_txt(Rn, RdLo, RdHi, Rm)
}

val execute_aarch32_instrs_UMLAL_Op_A_txt : forall 'dHi 'dLo 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'dLo & 'dLo <= 15 & 0 <= 'dHi & 'dHi <= 15).
  (int('dHi), int('dLo), int('m), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_UMLAL_Op_A_txt (dHi, dLo, m, n, setflags) = {
    let 'result = UInt(R_read(n)) * UInt(R_read(m)) + UInt(R_read(dHi) @ R_read(dLo));
    R_set(dHi) = result[63 .. 32];
    R_set(dLo) = result[31 .. 0];
    if setflags then {
        PSTATE.N = [result[63]];
        PSTATE.Z = IsZeroBit(result[63 .. 0])
    };
    ()
}

val decode_aarch32_instrs_UMLAL_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UMLAL_A1enc_A_txt (cond, S, RdHi, RdLo, Rm, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UMLAL_Op_A_txt(dHi, dLo, m, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2593) = {
    SEE = 2593;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let RdHi = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UMLAL_A1enc_A_txt(cond, S, RdHi, RdLo, Rm, Rn)
}

val decode_aarch32_instrs_UMLAL_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UMLAL_T1enc_A_txt (Rn, RdLo, RdHi, Rm) = {
    if ConditionPassed() then {
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = false;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UMLAL_Op_A_txt(dHi, dLo, m, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2594) = {
    SEE = 2594;
    let Rn = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let RdHi = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UMLAL_T1enc_A_txt(Rn, RdLo, RdHi, Rm)
}

val execute_aarch32_instrs_UMULL_Op_A_txt : forall 'dHi 'dLo 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'dLo & 'dLo <= 15 & 0 <= 'dHi & 'dHi <= 15).
  (int('dHi), int('dLo), int('m), int('n), bool('setflags)) -> unit

function execute_aarch32_instrs_UMULL_Op_A_txt (dHi, dLo, m, n, setflags) = {
    let 'result = UInt(R_read(n)) * UInt(R_read(m));
    R_set(dHi) = result[63 .. 32];
    R_set(dLo) = result[31 .. 0];
    if setflags then {
        PSTATE.N = [result[63]];
        PSTATE.Z = IsZeroBit(result[63 .. 0])
    };
    ()
}

val decode_aarch32_instrs_UMULL_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UMULL_A1enc_A_txt (cond, S, RdHi, RdLo, Rm, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = S == 0b1;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UMULL_Op_A_txt(dHi, dLo, m, n, setflags)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2595) = {
    SEE = 2595;
    let cond = Slice(__opcode, 28, 4);
    let S = Slice(__opcode, 20, 1);
    let RdHi = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UMULL_A1enc_A_txt(cond, S, RdHi, RdLo, Rm, Rn)
}

val decode_aarch32_instrs_UMULL_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UMULL_T1enc_A_txt (Rn, RdLo, RdHi, Rm) = {
    if ConditionPassed() then {
        let 'dLo = UInt(RdLo);
        let 'dHi = UInt(RdHi);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let setflags : bool = false;
        if ((dLo == 15 | dHi == 15) | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if dHi == dLo then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UMULL_Op_A_txt(dHi, dLo, m, n, setflags)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2596) = {
    SEE = 2596;
    let Rn = Slice(__opcode, 16, 4);
    let RdLo = Slice(__opcode, 12, 4);
    let RdHi = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UMULL_T1enc_A_txt(Rn, RdLo, RdHi, Rm)
}

val execute_aarch32_instrs_UQADD16_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UQADD16_Op_A_txt (d, m, n) = {
    let 'sum1 = UInt(R_read(n)[15 .. 0]) + UInt(R_read(m)[15 .. 0]);
    let 'sum2 = UInt(R_read(n)[31 .. 16]) + UInt(R_read(m)[31 .. 16]);
    R_set(d) = [R_read(d) with 15 .. 0 = UnsignedSat(sum1, 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = UnsignedSat(sum2, 16)]
}

val decode_aarch32_instrs_UQADD16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UQADD16_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UQADD16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2597) = {
    SEE = 2597;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UQADD16_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UQADD16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UQADD16_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UQADD16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2598) = {
    SEE = 2598;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UQADD16_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UQADD8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UQADD8_Op_A_txt (d, m, n) = {
    let 'sum1 = UInt(R_read(n)[7 .. 0]) + UInt(R_read(m)[7 .. 0]);
    let 'sum2 = UInt(R_read(n)[15 .. 8]) + UInt(R_read(m)[15 .. 8]);
    let 'sum3 = UInt(R_read(n)[23 .. 16]) + UInt(R_read(m)[23 .. 16]);
    let 'sum4 = UInt(R_read(n)[31 .. 24]) + UInt(R_read(m)[31 .. 24]);
    R_set(d) = [R_read(d) with 7 .. 0 = UnsignedSat(sum1, 8)];
    R_set(d) = [R_read(d) with 15 .. 8 = UnsignedSat(sum2, 8)];
    R_set(d) = [R_read(d) with 23 .. 16 = UnsignedSat(sum3, 8)];
    R_set(d) = [R_read(d) with 31 .. 24 = UnsignedSat(sum4, 8)]
}

val decode_aarch32_instrs_UQADD8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UQADD8_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UQADD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2599) = {
    SEE = 2599;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UQADD8_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UQADD8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UQADD8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UQADD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2600) = {
    SEE = 2600;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UQADD8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UQASX_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UQASX_Op_A_txt (d, m, n) = {
    let 'diff = UInt(R_read(n)[15 .. 0]) - UInt(R_read(m)[31 .. 16]);
    let 'sum = UInt(R_read(n)[31 .. 16]) + UInt(R_read(m)[15 .. 0]);
    R_set(d) = [R_read(d) with 15 .. 0 = UnsignedSat(diff, 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = UnsignedSat(sum, 16)]
}

val decode_aarch32_instrs_UQASX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UQASX_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UQASX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2601) = {
    SEE = 2601;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UQASX_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UQASX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UQASX_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UQASX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2602) = {
    SEE = 2602;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UQASX_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UQSAX_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UQSAX_Op_A_txt (d, m, n) = {
    let 'sum = UInt(R_read(n)[15 .. 0]) + UInt(R_read(m)[31 .. 16]);
    let 'diff = UInt(R_read(n)[31 .. 16]) - UInt(R_read(m)[15 .. 0]);
    R_set(d) = [R_read(d) with 15 .. 0 = UnsignedSat(sum, 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = UnsignedSat(diff, 16)]
}

val decode_aarch32_instrs_UQSAX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UQSAX_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UQSAX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2603) = {
    SEE = 2603;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UQSAX_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UQSAX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UQSAX_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UQSAX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2604) = {
    SEE = 2604;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UQSAX_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UQSUB16_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UQSUB16_Op_A_txt (d, m, n) = {
    let 'diff1 = UInt(R_read(n)[15 .. 0]) - UInt(R_read(m)[15 .. 0]);
    let 'diff2 = UInt(R_read(n)[31 .. 16]) - UInt(R_read(m)[31 .. 16]);
    R_set(d) = [R_read(d) with 15 .. 0 = UnsignedSat(diff1, 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = UnsignedSat(diff2, 16)]
}

val decode_aarch32_instrs_UQSUB16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UQSUB16_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UQSUB16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2605) = {
    SEE = 2605;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UQSUB16_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UQSUB16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UQSUB16_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UQSUB16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2606) = {
    SEE = 2606;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UQSUB16_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UQSUB8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_UQSUB8_Op_A_txt (d, m, n) = {
    let 'diff1 = UInt(R_read(n)[7 .. 0]) - UInt(R_read(m)[7 .. 0]);
    let 'diff2 = UInt(R_read(n)[15 .. 8]) - UInt(R_read(m)[15 .. 8]);
    let 'diff3 = UInt(R_read(n)[23 .. 16]) - UInt(R_read(m)[23 .. 16]);
    let 'diff4 = UInt(R_read(n)[31 .. 24]) - UInt(R_read(m)[31 .. 24]);
    R_set(d) = [R_read(d) with 7 .. 0 = UnsignedSat(diff1, 8)];
    R_set(d) = [R_read(d) with 15 .. 8 = UnsignedSat(diff2, 8)];
    R_set(d) = [R_read(d) with 23 .. 16 = UnsignedSat(diff3, 8)];
    R_set(d) = [R_read(d) with 31 .. 24 = UnsignedSat(diff4, 8)]
}

val decode_aarch32_instrs_UQSUB8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UQSUB8_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UQSUB8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2607) = {
    SEE = 2607;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UQSUB8_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_UQSUB8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_UQSUB8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UQSUB8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2608) = {
    SEE = 2608;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_UQSUB8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_USAD8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_USAD8_Op_A_txt (d, m, n) = {
    let 'absdiff1 = Abs(UInt(R_read(n)[7 .. 0]) - UInt(R_read(m)[7 .. 0]));
    let 'absdiff2 = Abs(UInt(R_read(n)[15 .. 8]) - UInt(R_read(m)[15 .. 8]));
    let 'absdiff3 = Abs(UInt(R_read(n)[23 .. 16]) - UInt(R_read(m)[23 .. 16]));
    let 'absdiff4 = Abs(UInt(R_read(n)[31 .. 24]) - UInt(R_read(m)[31 .. 24]));
    let 'result = absdiff1 + absdiff2 + absdiff3 + absdiff4;
    R_set(d) = result[31 .. 0]
}

val decode_aarch32_instrs_USAD8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_USAD8_A1enc_A_txt (cond, Rd, Rm, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USAD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2609) = {
    SEE = 2609;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Rm = Slice(__opcode, 8, 4);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_USAD8_A1enc_A_txt(cond, Rd, Rm, Rn)
}

val decode_aarch32_instrs_USAD8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_USAD8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USAD8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2610) = {
    SEE = 2610;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_USAD8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_USADA8_Op_A_txt : forall 'a 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15 & 0 <= 'a & 'a <= 15).
  (int('a), int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_USADA8_Op_A_txt (a, d, m, n) = {
    let 'absdiff1 = Abs(UInt(R_read(n)[7 .. 0]) - UInt(R_read(m)[7 .. 0]));
    let 'absdiff2 = Abs(UInt(R_read(n)[15 .. 8]) - UInt(R_read(m)[15 .. 8]));
    let 'absdiff3 = Abs(UInt(R_read(n)[23 .. 16]) - UInt(R_read(m)[23 .. 16]));
    let 'absdiff4 = Abs(UInt(R_read(n)[31 .. 24]) - UInt(R_read(m)[31 .. 24]));
    let 'result = UInt(R_read(a)) + absdiff1 + absdiff2 + absdiff3 + absdiff4;
    R_set(d) = result[31 .. 0]
}

val decode_aarch32_instrs_USADA8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_USADA8_A1enc_A_txt (cond, Rd, Ra, Rm, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Ra == 0b1111 then {
            throw(Error_See("USAD8"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USADA8_Op_A_txt(a, d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2611) = {
    SEE = 2611;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 8, 4);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_USADA8_A1enc_A_txt(cond, Rd, Ra, Rm, Rn)
}

val decode_aarch32_instrs_USADA8_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_USADA8_T1enc_A_txt (Rn, Ra, Rd, Rm) = {
    if ConditionPassed() then {
        if Ra == 0b1111 then {
            throw(Error_See("USAD8"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'a = UInt(Ra);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USADA8_Op_A_txt(a, d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2612) = {
    SEE = 2612;
    let Rn = Slice(__opcode, 16, 4);
    let Ra = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_USADA8_T1enc_A_txt(Rn, Ra, Rd, Rm)
}

val execute_aarch32_instrs_USAT16_Op_A_txt : forall 'd 'n 'saturate_to,
  (0 <= 'saturate_to & 'saturate_to <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('n), int('saturate_to)) -> unit

function execute_aarch32_instrs_USAT16_Op_A_txt (d, n, saturate_to) = {
    result1 : bits(16) = undefined;
    result2 : bits(16) = undefined;
    sat1 : bool = undefined;
    sat2 : bool = undefined;
    assert(constraint(0 <= 'saturate_to - 1));
    (result1, sat1) = ZeroUnsignedSatQ(SInt(R_read(n)[15 .. 0]), saturate_to, 16);
    (result2, sat2) = ZeroUnsignedSatQ(SInt(R_read(n)[31 .. 16]), saturate_to, 16);
    R_set(d) = [R_read(d) with 15 .. 0 = result1];
    R_set(d) = [R_read(d) with 31 .. 16 = result2];
    if sat1 | sat2 then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_USAT16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_USAT16_A1enc_A_txt (cond, sat_imm, Rd, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'saturate_to = UInt(sat_imm);
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USAT16_Op_A_txt(d, n, saturate_to)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2613) = {
    SEE = 2613;
    let cond = Slice(__opcode, 28, 4);
    let sat_imm = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rn = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_USAT16_A1enc_A_txt(cond, sat_imm, Rd, Rn)
    }
}

val decode_aarch32_instrs_USAT16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_USAT16_T1enc_A_txt (Rn, Rd, sat_imm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'saturate_to = UInt(sat_imm);
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USAT16_Op_A_txt(d, n, saturate_to)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2614) = {
    SEE = 2614;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let sat_imm = Slice(__opcode, 0, 4);
    if ([__opcode[26]] != 0b0 | [__opcode[4]] != 0b0) | [__opcode[5]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_USAT16_T1enc_A_txt(Rn, Rd, sat_imm)
    }
}

val execute_aarch32_instrs_USAT_Op_A_txt : forall 'd 'n 'saturate_to 'shift_n,
  (0 <= 'saturate_to & 'saturate_to <= 31 & 0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('n), int('saturate_to), int('shift_n), SRType) -> unit

function execute_aarch32_instrs_USAT_Op_A_txt (d, n, saturate_to, shift_n, shift_t) = {
    result : bits(32) = undefined;
    sat : bool = undefined;
    assert(constraint(('shift_n >= 0 | 'shift_n == 0)));
    let operand : bits(32) = Shift(R_read(n), shift_t, shift_n, PSTATE.C);
    assert(constraint(0 <= 'saturate_to - 1));
    (result, sat) = ZeroUnsignedSatQ(SInt(operand), saturate_to, 32);
    R_set(d) = result;
    if sat then {
        PSTATE.Q = 0b1
    };
    ()
}

val decode_aarch32_instrs_USAT_A1enc_A_txt : (bits(4), bits(5), bits(4), bits(5), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_USAT_A1enc_A_txt (cond, sat_imm, Rd, imm5, sh, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'saturate_to = UInt(sat_imm);
        (shift_t, shift_n) = DecodeImmShift(sh @ 0b0, imm5);
        let 'shift_n = shift_n;
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        let shift_t = shift_t;
        let shift_n = shift_n;
        execute_aarch32_instrs_USAT_Op_A_txt(d, n, saturate_to, shift_n, shift_t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2615) = {
    SEE = 2615;
    let cond = Slice(__opcode, 28, 4);
    let sat_imm = Slice(__opcode, 16, 5);
    let Rd = Slice(__opcode, 12, 4);
    let imm5 = Slice(__opcode, 7, 5);
    let sh = Slice(__opcode, 6, 1);
    let Rn = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_USAT_A1enc_A_txt(cond, sat_imm, Rd, imm5, sh, Rn)
}

val decode_aarch32_instrs_USAT_T1enc_A_txt : (bits(1), bits(4), bits(3), bits(4), bits(2), bits(5)) -> unit

function decode_aarch32_instrs_USAT_T1enc_A_txt (sh, Rn, imm3, Rd, imm2, sat_imm) = {
    if ConditionPassed() then {
        shift_n : int = undefined;
        shift_t : SRType = undefined;
        if sh == 0b1 & (imm3 @ imm2) == 0b00000 then {
            throw(Error_See("USAT16"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'saturate_to = UInt(sat_imm);
        (shift_t, shift_n) = DecodeImmShift(sh @ 0b0, imm3 @ imm2);
        let 'shift_n = shift_n;
        if d == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USAT_Op_A_txt(d, n, saturate_to, shift_n, shift_t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2616) = {
    SEE = 2616;
    let sh = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let imm3 = Slice(__opcode, 12, 3);
    let Rd = Slice(__opcode, 8, 4);
    let imm2 = Slice(__opcode, 6, 2);
    let sat_imm = Slice(__opcode, 0, 5);
    if [__opcode[26]] != 0b0 | [__opcode[5]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_USAT_T1enc_A_txt(sh, Rn, imm3, Rd, imm2, sat_imm)
    }
}

val execute_aarch32_instrs_USAX_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_USAX_Op_A_txt (d, m, n) = {
    let 'sum = UInt(R_read(n)[15 .. 0]) + UInt(R_read(m)[31 .. 16]);
    let 'diff = UInt(R_read(n)[31 .. 16]) - UInt(R_read(m)[15 .. 0]);
    R_set(d) = [R_read(d) with 15 .. 0 = sum[15 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 16 = diff[15 .. 0]];
    PSTATE.GE[1 .. 0] = if sum >= UInt(0x10000) then 0b11 else 0b00;
    PSTATE.GE[3 .. 2] = if diff >= 0 then 0b11 else 0b00
}

val decode_aarch32_instrs_USAX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_USAX_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USAX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2617) = {
    SEE = 2617;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_USAX_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_USAX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_USAX_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USAX_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2618) = {
    SEE = 2618;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_USAX_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_USUB16_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_USUB16_Op_A_txt (d, m, n) = {
    let 'diff1 = UInt(R_read(n)[15 .. 0]) - UInt(R_read(m)[15 .. 0]);
    let 'diff2 = UInt(R_read(n)[31 .. 16]) - UInt(R_read(m)[31 .. 16]);
    R_set(d) = [R_read(d) with 15 .. 0 = diff1[15 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 16 = diff2[15 .. 0]];
    PSTATE.GE[1 .. 0] = if diff1 >= 0 then 0b11 else 0b00;
    PSTATE.GE[3 .. 2] = if diff2 >= 0 then 0b11 else 0b00
}

val decode_aarch32_instrs_USUB16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_USUB16_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USUB16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2619) = {
    SEE = 2619;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_USUB16_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_USUB16_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_USUB16_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USUB16_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2620) = {
    SEE = 2620;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_USUB16_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_USUB8_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_USUB8_Op_A_txt (d, m, n) = {
    let 'diff1 = UInt(R_read(n)[7 .. 0]) - UInt(R_read(m)[7 .. 0]);
    let 'diff2 = UInt(R_read(n)[15 .. 8]) - UInt(R_read(m)[15 .. 8]);
    let 'diff3 = UInt(R_read(n)[23 .. 16]) - UInt(R_read(m)[23 .. 16]);
    let 'diff4 = UInt(R_read(n)[31 .. 24]) - UInt(R_read(m)[31 .. 24]);
    R_set(d) = [R_read(d) with 7 .. 0 = diff1[7 .. 0]];
    R_set(d) = [R_read(d) with 15 .. 8 = diff2[7 .. 0]];
    R_set(d) = [R_read(d) with 23 .. 16 = diff3[7 .. 0]];
    R_set(d) = [R_read(d) with 31 .. 24 = diff4[7 .. 0]];
    PSTATE.GE[0] = Bit(if diff1 >= 0 then 0b1 else 0b0);
    PSTATE.GE[1] = Bit(if diff2 >= 0 then 0b1 else 0b0);
    PSTATE.GE[2] = Bit(if diff3 >= 0 then 0b1 else 0b0);
    PSTATE.GE[3] = Bit(if diff4 >= 0 then 0b1 else 0b0)
}

val decode_aarch32_instrs_USUB8_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_USUB8_A1enc_A_txt (cond, Rn, Rd, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USUB8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2621) = {
    SEE = 2621;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rm = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_USUB8_A1enc_A_txt(cond, Rn, Rd, Rm)
    }
}

val decode_aarch32_instrs_USUB8_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_USUB8_T1enc_A_txt (Rn, Rd, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_USUB8_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2622) = {
    SEE = 2622;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_USUB8_T1enc_A_txt(Rn, Rd, Rm)
}

val execute_aarch32_instrs_UXTAB16_Op_A_txt : forall 'd 'm 'n 'rotation,
  (0 <= 'rotation & 'rotation <= 31 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('rotation)) -> unit

function execute_aarch32_instrs_UXTAB16_Op_A_txt (d, m, n, rotation) = {
    let rotated : bits(32) = ROR(R_read(m), rotation);
    R_set(d) = [R_read(d) with 15 .. 0 = R_read(n)[15 .. 0] + ZeroExtend(rotated[7 .. 0], 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = R_read(n)[31 .. 16] + ZeroExtend(rotated[23 .. 16], 16)]
}

val decode_aarch32_instrs_UXTAB16_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_UXTAB16_A1enc_A_txt (cond, Rn, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("UXTB16"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UXTAB16_Op_A_txt(d, m, n, rotation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2623) = {
    SEE = 2623;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let rotate = Slice(__opcode, 10, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b0 | [__opcode[9]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UXTAB16_A1enc_A_txt(cond, Rn, Rd, rotate, Rm)
    }
}

val decode_aarch32_instrs_UXTAB16_T1enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_UXTAB16_T1enc_A_txt (Rn, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("UXTB16"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UXTAB16_Op_A_txt(d, m, n, rotation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2624) = {
    SEE = 2624;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let rotate = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[6]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UXTAB16_T1enc_A_txt(Rn, Rd, rotate, Rm)
    }
}

val execute_aarch32_instrs_UXTAB_Op_A_txt : forall 'd 'm 'n 'rotation,
  (0 <= 'rotation & 'rotation <= 31 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('rotation)) -> unit

function execute_aarch32_instrs_UXTAB_Op_A_txt (d, m, n, rotation) = {
    let rotated : bits(32) = ROR(R_read(m), rotation);
    R_set(d) = R_read(n) + ZeroExtend(rotated[7 .. 0], 32)
}

val decode_aarch32_instrs_UXTAB_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_UXTAB_A1enc_A_txt (cond, Rn, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("UXTB"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UXTAB_Op_A_txt(d, m, n, rotation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2625) = {
    SEE = 2625;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let rotate = Slice(__opcode, 10, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b0 | [__opcode[9]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UXTAB_A1enc_A_txt(cond, Rn, Rd, rotate, Rm)
    }
}

val decode_aarch32_instrs_UXTAB_T1enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_UXTAB_T1enc_A_txt (Rn, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("UXTB"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UXTAB_Op_A_txt(d, m, n, rotation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2626) = {
    SEE = 2626;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let rotate = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[6]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UXTAB_T1enc_A_txt(Rn, Rd, rotate, Rm)
    }
}

val execute_aarch32_instrs_UXTAH_Op_A_txt : forall 'd 'm 'n 'rotation,
  (0 <= 'rotation & 'rotation <= 31 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('n), int('rotation)) -> unit

function execute_aarch32_instrs_UXTAH_Op_A_txt (d, m, n, rotation) = {
    let rotated : bits(32) = ROR(R_read(m), rotation);
    R_set(d) = R_read(n) + ZeroExtend(rotated[15 .. 0], 32)
}

val decode_aarch32_instrs_UXTAH_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_UXTAH_A1enc_A_txt (cond, Rn, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Rn == 0b1111 then {
            throw(Error_See("UXTH"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UXTAH_Op_A_txt(d, m, n, rotation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2627) = {
    SEE = 2627;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let rotate = Slice(__opcode, 10, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b0 | [__opcode[9]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UXTAH_A1enc_A_txt(cond, Rn, Rd, rotate, Rm)
    }
}

val decode_aarch32_instrs_UXTAH_T1enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_UXTAH_T1enc_A_txt (Rn, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        if Rn == 0b1111 then {
            throw(Error_See("UXTH"))
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UXTAH_Op_A_txt(d, m, n, rotation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2628) = {
    SEE = 2628;
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let rotate = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[6]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UXTAH_T1enc_A_txt(Rn, Rd, rotate, Rm)
    }
}

val execute_aarch32_instrs_UXTB16_Op_A_txt : forall 'd 'm 'rotation,
  (0 <= 'rotation & 'rotation <= 31 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('rotation)) -> unit

function execute_aarch32_instrs_UXTB16_Op_A_txt (d, m, rotation) = {
    let rotated : bits(32) = ROR(R_read(m), rotation);
    R_set(d) = [R_read(d) with 15 .. 0 = ZeroExtend(rotated[7 .. 0], 16)];
    R_set(d) = [R_read(d) with 31 .. 16 = ZeroExtend(rotated[23 .. 16], 16)]
}

val decode_aarch32_instrs_UXTB16_A1enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_UXTB16_A1enc_A_txt (cond, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UXTB16_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2629) = {
    SEE = 2629;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let rotate = Slice(__opcode, 10, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b0 | [__opcode[9]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UXTB16_A1enc_A_txt(cond, Rd, rotate, Rm)
    }
}

val decode_aarch32_instrs_UXTB16_T1enc_A_txt : (bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_UXTB16_T1enc_A_txt (Rd, rotate, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UXTB16_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2630) = {
    SEE = 2630;
    let Rd = Slice(__opcode, 8, 4);
    let rotate = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[6]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UXTB16_T1enc_A_txt(Rd, rotate, Rm)
    }
}

val execute_aarch32_instrs_UXTB_Op_A_txt : forall 'd 'm 'rotation,
  (0 <= 'rotation & 'rotation <= 31 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('rotation)) -> unit

function execute_aarch32_instrs_UXTB_Op_A_txt (d, m, rotation) = {
    let rotated : bits(32) = ROR(R_read(m), rotation);
    R_set(d) = ZeroExtend(rotated[7 .. 0], 32)
}

val decode_aarch32_instrs_UXTB_A1enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_UXTB_A1enc_A_txt (cond, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UXTB_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2631) = {
    SEE = 2631;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let rotate = Slice(__opcode, 10, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b0 | [__opcode[9]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UXTB_A1enc_A_txt(cond, Rd, rotate, Rm)
    }
}

val decode_aarch32_instrs_UXTB_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_UXTB_T1enc_A_txt (Rm, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = 0;
        execute_aarch32_instrs_UXTB_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 2632) = {
    SEE = 2632;
    let Rm = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_UXTB_T1enc_A_txt(Rm, Rd)
}

val decode_aarch32_instrs_UXTB_T2enc_A_txt : (bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_UXTB_T2enc_A_txt (Rd, rotate, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UXTB_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2633) = {
    SEE = 2633;
    let Rd = Slice(__opcode, 8, 4);
    let rotate = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[6]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UXTB_T2enc_A_txt(Rd, rotate, Rm)
    }
}

val execute_aarch32_instrs_UXTH_Op_A_txt : forall 'd 'm 'rotation,
  (0 <= 'rotation & 'rotation <= 31 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('m), int('rotation)) -> unit

function execute_aarch32_instrs_UXTH_Op_A_txt (d, m, rotation) = {
    let rotated : bits(32) = ROR(R_read(m), rotation);
    R_set(d) = ZeroExtend(rotated[15 .. 0], 32)
}

val decode_aarch32_instrs_UXTH_A1enc_A_txt : (bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_UXTH_A1enc_A_txt (cond, Rd, rotate, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UXTH_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2634) = {
    SEE = 2634;
    let cond = Slice(__opcode, 28, 4);
    let Rd = Slice(__opcode, 12, 4);
    let rotate = Slice(__opcode, 10, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b0 | [__opcode[9]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UXTH_A1enc_A_txt(cond, Rd, rotate, Rm)
    }
}

val decode_aarch32_instrs_UXTH_T1enc_A_txt : (bits(3), bits(3)) -> unit

function decode_aarch32_instrs_UXTH_T1enc_A_txt (Rm, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = 0;
        execute_aarch32_instrs_UXTH_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2635) = {
    SEE = 2635;
    let Rm = Slice(__opcode, 3, 3);
    let Rd = Slice(__opcode, 0, 3);
    decode_aarch32_instrs_UXTH_T1enc_A_txt(Rm, Rd)
}

val decode_aarch32_instrs_UXTH_T2enc_A_txt : (bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_UXTH_T2enc_A_txt (Rd, rotate, Rm) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 'm = UInt(Rm);
        let 'rotation = UInt(rotate @ 0b000);
        if d == 15 | m == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_UXTH_Op_A_txt(d, m, rotation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2636) = {
    SEE = 2636;
    let Rd = Slice(__opcode, 8, 4);
    let rotate = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    if [__opcode[6]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_UXTH_T2enc_A_txt(Rd, rotate, Rm)
    }
}

val execute_aarch32_instrs_VABA_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) ('long_destination : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('long_destination), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VABA_Op_A_txt (d__arg, elements, esize, long_destination, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    absdiff : int = undefined;
    op1 : bits('esize) = undefined;
    op2 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(Din_read(n + r), e, esize);
            op2 = Elem_read(Din_read(m + r), e, esize);
            absdiff = Abs(asl_Int(op1, is_unsigned) - asl_Int(op2, is_unsigned));
            if long_destination then {
                Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, Elem_read(Qin_read((d >> 1)), e, 2 * esize) + absdiff)
            } else {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, Elem_read(Din_read(d + r), e, esize) + absdiff)
            }
        }
    }
}

val decode_aarch32_instrs_VABA_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABA_A1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let long_destination : bool = false;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VABA_Op_A_txt(d, elements, esize, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2637) = {
    SEE = 2637;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABA_A1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VABA_A2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABA_A2enc_A_txt (U, D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let long_destination : bool = true;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = 1;
        execute_aarch32_instrs_VABA_Op_A_txt(d, elements, esize, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2638) = {
    SEE = 2638;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABA_A2enc_A_txt(U, D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VABA_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABA_T1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let long_destination : bool = false;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VABA_Op_A_txt(d, elements, esize, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2639) = {
    SEE = 2639;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABA_T1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VABA_T2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABA_T2enc_A_txt (U, D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let long_destination : bool = true;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = 1;
        execute_aarch32_instrs_VABA_Op_A_txt(d, elements, esize, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2640) = {
    SEE = 2640;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABA_T2enc_A_txt(U, D, size, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VABD_f_Op_A_txt : forall 'd 'elements 'esize 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VABD_f_Op_A_txt (d__arg, elements, esize, m, n, regs) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    op2 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(D_read(n + r), e, esize);
            op2 = Elem_read(D_read(m + r), e, esize);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPAbs(FPSub(op1, op2, StandardFPSCRValue())))
        }
    }
}

val decode_aarch32_instrs_VABD_f_A1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABD_f_A1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VABD_f_Op_A_txt(d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2641) = {
    SEE = 2641;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABD_f_A1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VABD_f_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABD_f_T1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VABD_f_Op_A_txt(d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2642) = {
    SEE = 2642;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABD_f_T1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VABD_i_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) ('long_destination : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('long_destination), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VABD_i_Op_A_txt (d__arg, elements, esize, long_destination, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    absdiff : int = undefined;
    op1 : bits('esize) = undefined;
    op2 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(Din_read(n + r), e, esize);
            op2 = Elem_read(Din_read(m + r), e, esize);
            absdiff = Abs(asl_Int(op1, is_unsigned) - asl_Int(op2, is_unsigned));
            if long_destination then {
                Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, absdiff[2 * esize - 1 .. 0])
            } else {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, absdiff[esize - 1 .. 0])
            }
        }
    }
}

val decode_aarch32_instrs_VABD_i_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABD_i_A1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let long_destination : bool = false;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VABD_i_Op_A_txt(d, elements, esize, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2643) = {
    SEE = 2643;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABD_i_A1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VABD_i_A2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABD_i_A2enc_A_txt (U, D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let long_destination : bool = true;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = 1;
        execute_aarch32_instrs_VABD_i_Op_A_txt(d, elements, esize, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2644) = {
    SEE = 2644;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABD_i_A2enc_A_txt(U, D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VABD_i_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABD_i_T1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let long_destination : bool = false;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VABD_i_Op_A_txt(d, elements, esize, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2645) = {
    SEE = 2645;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABD_i_T1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VABD_i_T2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABD_i_T2enc_A_txt (U, D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let long_destination : bool = true;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = 1;
        execute_aarch32_instrs_VABD_i_Op_A_txt(d, elements, esize, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2646) = {
    SEE = 2646;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABD_i_T2enc_A_txt(U, D, size, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VABS_Op_A_txt : forall ('advsimd : Bool) 'd 'elements 'esize ('floating_point : Bool) 'm 'regs,
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('advsimd), int('d), int('elements), int('esize), bool('floating_point), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VABS_Op_A_txt (advsimd, d__arg, elements, esize, floating_point, m, regs) = {
    d : int = d__arg;
    result : int = undefined;
    CheckAdvSIMDOrVFPEnabled(true, advsimd);
    if advsimd then {
        foreach (r from 0 to (regs - 1) by 1 in inc) {
            foreach (e from 0 to (elements - 1) by 1 in inc) {
                if floating_point then {
                    assert(constraint('esize in {16, 32, 64}));
                    D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPAbs(Elem_read(D_read(m + r), e, esize)))
                } else {
                    result = Abs(SInt(Elem_read(D_read(m + r), e, esize)));
                    D_set(d + r) = Elem_set(D_read(d + r), e, esize, result[esize - 1 .. 0])
                }
            }
        }
    } else {
        match esize {
          16 => {
              S_set(d) = Zeros(16) @ FPAbs(S_read(m)[15 .. 0])
          },
          32 => {
              S_set(d) = FPAbs(S_read(m))
          },
          64 => {
              D_set(d) = FPAbs(D_read(m))
          },
          _ => ()
        }
    }
}

val decode_aarch32_instrs_VABS_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABS_A1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let advsimd : bool = true;
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VABS_Op_A_txt(advsimd, d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitone, bitone, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2647) = {
    SEE = 2647;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABS_A1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val decode_aarch32_instrs_VABS_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABS_A2enc_A_txt (cond, D, Vd, size, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        floating_point : bool = undefined;
        elements : int = undefined;
        regs : int = undefined;
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let regs = regs;
        let elements = elements;
        let floating_point = floating_point;
        let advsimd : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VABS_Op_A_txt(advsimd, d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, _, _, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2648) = {
    SEE = 2648;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABS_A2enc_A_txt(cond, D, Vd, size, M, Vm)
}

val decode_aarch32_instrs_VABS_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABS_T1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if (F == 0b1 & size == 0b01) & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let advsimd : bool = true;
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VABS_Op_A_txt(advsimd, d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitone, bitone, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2649) = {
    SEE = 2649;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABS_T1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val decode_aarch32_instrs_VABS_T2enc_A_txt : (bits(1), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VABS_T2enc_A_txt (D, Vd, size, M, Vm) = {
    if ConditionPassed() then {
        floating_point : bool = undefined;
        elements : int = undefined;
        regs : int = undefined;
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let regs = regs;
        let elements = elements;
        let floating_point = floating_point;
        let advsimd : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VABS_Op_A_txt(advsimd, d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, _, _, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2650) = {
    SEE = 2650;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VABS_T2enc_A_txt(D, Vd, size, M, Vm)
}

val execute_aarch32_instrs_VACGE_Op_A_txt : forall 'd 'elements 'esize 'm 'n ('or_equal : Bool) 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), bool('or_equal), int('regs)) -> unit

function execute_aarch32_instrs_VACGE_Op_A_txt (d__arg, elements, esize, m, n, or_equal, regs) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    op2 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = FPAbs(Elem_read(D_read(n + r), e, esize));
            op2 = FPAbs(Elem_read(D_read(m + r), e, esize));
            test_passed : bool = undefined;
            if or_equal then {
                test_passed = FPCompareGE(op1, op2, StandardFPSCRValue())
            } else {
                test_passed = FPCompareGT(op1, op2, StandardFPSCRValue())
            };
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, if test_passed then
              Ones(esize)
            else
              Zeros(esize))
        }
    }
}

val decode_aarch32_instrs_VACGE_A1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VACGE_A1enc_A_txt (D, op, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let or_equal : bool = op == 0b0;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VACGE_Op_A_txt(d, elements, esize, m, n, or_equal, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2651) = {
    SEE = 2651;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 21, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VACGE_A1enc_A_txt(D, op, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VACGE_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VACGE_T1enc_A_txt (D, op, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let or_equal : bool = op == 0b0;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VACGE_Op_A_txt(d, elements, esize, m, n, or_equal, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2652) = {
    SEE = 2652;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 21, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VACGE_T1enc_A_txt(D, op, sz, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VADD_f_Op_A_txt : forall ('advsimd : Bool) 'd 'elements 'esize 'm 'n 'regs,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('advsimd), int('d), int('elements), int('esize), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VADD_f_Op_A_txt (advsimd, d__arg, elements, esize, m, n, regs) = {
    d : int = d__arg;
    CheckAdvSIMDOrVFPEnabled(true, advsimd);
    if advsimd then {
        foreach (r from 0 to (regs - 1) by 1 in inc) {
            foreach (e from 0 to (elements - 1) by 1 in inc) {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPAdd(Elem_read(D_read(n + r), e, esize), Elem_read(D_read(m + r), e, esize), StandardFPSCRValue()))
            }
        }
    } else {
        match esize {
          16 => {
              S_set(d) = Zeros(16) @ FPAdd(S_read(n)[15 .. 0], S_read(m)[15 .. 0], FPSCR_read())
          },
          32 => {
              S_set(d) = FPAdd(S_read(n), S_read(m), FPSCR_read())
          },
          64 => {
              D_set(d) = FPAdd(D_read(n), D_read(m), FPSCR_read())
          },
          _ => ()
        }
    }
}

val decode_aarch32_instrs_VADD_f_A1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VADD_f_A1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let advsimd : bool = true;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VADD_f_Op_A_txt(advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2653) = {
    SEE = 2653;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VADD_f_A1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VADD_f_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VADD_f_A2enc_A_txt (cond, D, Vn, Vd, size, N, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        elements : int = undefined;
        regs : int = undefined;
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let regs = regs;
        let elements = elements;
        let advsimd : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VADD_f_Op_A_txt(advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2654) = {
    SEE = 2654;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VADD_f_A2enc_A_txt(cond, D, Vn, Vd, size, N, M, Vm)
}

val decode_aarch32_instrs_VADD_f_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VADD_f_T1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let advsimd : bool = true;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VADD_f_Op_A_txt(advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2655) = {
    SEE = 2655;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VADD_f_T1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VADD_f_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VADD_f_T2enc_A_txt (D, Vn, Vd, size, N, M, Vm) = {
    if ConditionPassed() then {
        elements : int = undefined;
        regs : int = undefined;
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let regs = regs;
        let elements = elements;
        let advsimd : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VADD_f_Op_A_txt(advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2656) = {
    SEE = 2656;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VADD_f_T2enc_A_txt(D, Vn, Vd, size, N, M, Vm)
}

val execute_aarch32_instrs_VADDHN_Op_A_txt : forall 'd 'elements 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n)) -> unit

function execute_aarch32_instrs_VADDHN_Op_A_txt (d__arg, elements, esize, m, n) = {
    d : int = d__arg;
    result : bits(2 * 'esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_read(Qin_read((n >> 1)), e, 2 * esize) + Elem_read(Qin_read((m >> 1)), e, 2 * esize);
        D_set(d) = Elem_set(D_read(d), e, esize, result[2 * esize - 1 .. esize])
    }
}

val decode_aarch32_instrs_VADDHN_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VADDHN_A1enc_A_txt (D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vn[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VADDHN_Op_A_txt(d, elements, esize, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2657) = {
    SEE = 2657;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VADDHN_A1enc_A_txt(D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VADDHN_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VADDHN_T1enc_A_txt (D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vn[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VADDHN_Op_A_txt(d, elements, esize, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2658) = {
    SEE = 2658;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VADDHN_T1enc_A_txt(D, size, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VADD_i_Op_A_txt : forall 'd 'elements 'esize 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VADD_i_Op_A_txt (d__arg, elements, esize, m, n, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, Elem_read(D_read(n + r), e, esize) + Elem_read(D_read(m + r), e, esize))
        }
    }
}

val decode_aarch32_instrs_VADD_i_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VADD_i_A1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VADD_i_Op_A_txt(d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2659) = {
    SEE = 2659;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VADD_i_A1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VADD_i_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VADD_i_T1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VADD_i_Op_A_txt(d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2660) = {
    SEE = 2660;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VADD_i_T1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VADDL_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) ('is_vaddw : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('is_vaddw), int('m), int('n), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VADDL_Op_A_txt (d__arg, elements, esize, is_vaddw, m, n, is_unsigned) = {
    d : int = d__arg;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        op1 : int = undefined;
        if is_vaddw then {
            op1 = asl_Int(Elem_read(Qin_read((n >> 1)), e, 2 * esize), is_unsigned)
        } else {
            op1 = asl_Int(Elem_read(Din_read(n), e, esize), is_unsigned)
        };
        let 'op1 = op1;
        result = op1 + asl_Int(Elem_read(Din_read(m), e, esize), is_unsigned);
        Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, result[2 * esize - 1 .. 0])
    }
}

val decode_aarch32_instrs_VADDL_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VADDL_A1enc_A_txt (U, D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vd[0]] == 0b1 | op == 0b1 & [Vn[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let is_vaddw : bool = op == 0b1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VADDL_Op_A_txt(d, elements, esize, is_vaddw, m, n, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2661) = {
    SEE = 2661;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VADDL_A1enc_A_txt(U, D, size, Vn, Vd, op, N, M, Vm)
}

val decode_aarch32_instrs_VADDL_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VADDL_T1enc_A_txt (U, D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vd[0]] == 0b1 | op == 0b1 & [Vn[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let is_vaddw : bool = op == 0b1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VADDL_Op_A_txt(d, elements, esize, is_vaddw, m, n, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2662) = {
    SEE = 2662;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VADDL_T1enc_A_txt(U, D, size, Vn, Vd, op, N, M, Vm)
}

val execute_aarch32_instrs_VAND_r_Op_A_txt : forall 'd 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VAND_r_Op_A_txt (d, m, n, regs) = {
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        D_set(d + r) = D_read(n + r) & D_read(m + r)
    }
}

val decode_aarch32_instrs_VAND_r_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VAND_r_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VAND_r_Op_A_txt(d, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2663) = {
    SEE = 2663;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VAND_r_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VAND_r_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VAND_r_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VAND_r_Op_A_txt(d, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2664) = {
    SEE = 2664;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VAND_r_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VBIC_i_Op_A_txt : forall 'd 'regs,
  ('regs in {1, 2} & 0 <= 'd & 'd <= 31).
  (int('d), bits(64), int('regs)) -> unit

function execute_aarch32_instrs_VBIC_i_Op_A_txt (d, imm64, regs) = {
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        D_set(d + r) = D_read(d + r) & not_vec(imm64)
    }
}

val decode_aarch32_instrs_VBIC_i_A1enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VBIC_i_A1enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b0 | cmode[3 .. 2] == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b1, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VBIC_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, bitone, bitzero, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2665) = {
    SEE = 2665;
    let i = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VBIC_i_A1enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val decode_aarch32_instrs_VBIC_i_A2enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VBIC_i_A2enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b0 | cmode[3 .. 2] == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b1, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VBIC_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitzero, _, bitone, bitzero, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2666) = {
    SEE = 2666;
    let i = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VBIC_i_A2enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val decode_aarch32_instrs_VBIC_i_T1enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VBIC_i_T1enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b0 | cmode[3 .. 2] == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b1, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VBIC_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, bitone, bitzero, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2667) = {
    SEE = 2667;
    let i = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VBIC_i_T1enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val decode_aarch32_instrs_VBIC_i_T2enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VBIC_i_T2enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b0 | cmode[3 .. 2] == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b1, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VBIC_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitzero, _, bitone, bitzero, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2668) = {
    SEE = 2668;
    let i = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VBIC_i_T2enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val execute_aarch32_instrs_VBIC_r_Op_A_txt : forall 'd 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VBIC_r_Op_A_txt (d, m, n, regs) = {
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        D_set(d + r) = D_read(n + r) & not_vec(D_read(m + r))
    }
}

val decode_aarch32_instrs_VBIC_r_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VBIC_r_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VBIC_r_Op_A_txt(d, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2669) = {
    SEE = 2669;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VBIC_r_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VBIC_r_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VBIC_r_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VBIC_r_Op_A_txt(d, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2670) = {
    SEE = 2670;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VBIC_r_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VBIF_Op_A_txt : forall 'd 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n), VBitOps, int('regs)) -> unit

function execute_aarch32_instrs_VBIF_Op_A_txt (d, m, n, operation, regs) = {
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        match operation {
          VBitOps_VBIF => {
              D_set(d + r) = D_read(d + r) & D_read(m + r) | D_read(n + r) & not_vec(D_read(m + r))
          },
          VBitOps_VBIT => {
              D_set(d + r) = D_read(n + r) & D_read(m + r) | D_read(d + r) & not_vec(D_read(m + r))
          },
          VBitOps_VBSL => {
              D_set(d + r) = D_read(n + r) & D_read(d + r) | D_read(m + r) & not_vec(D_read(d + r))
          }
        }
    }
}

val decode_aarch32_instrs_VBIF_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VBIF_A1enc_A_txt (D, op, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        operation : VBitOps = VBitOps_VBIF;
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if op == 0b00 then {
            throw(Error_See("VEOR"))
        };
        if op == 0b01 then {
            operation = VBitOps_VBSL
        };
        if op == 0b10 then {
            operation = VBitOps_VBIT
        };
        if op == 0b11 then {
            operation = VBitOps_VBIF
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VBIF_Op_A_txt(d, m, n, operation, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2671) = {
    SEE = 2671;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VBIF_A1enc_A_txt(D, op, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VBIF_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VBIF_T1enc_A_txt (D, op, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        operation : VBitOps = VBitOps_VBIF;
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if op == 0b00 then {
            throw(Error_See("VEOR"))
        };
        if op == 0b01 then {
            operation = VBitOps_VBSL
        };
        if op == 0b10 then {
            operation = VBitOps_VBIT
        };
        if op == 0b11 then {
            operation = VBitOps_VBIF
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VBIF_Op_A_txt(d, m, n, operation, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2672) = {
    SEE = 2672;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VBIF_T1enc_A_txt(D, op, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VCEQ_i_Op_A_txt : forall 'd 'elements 'esize ('floating_point : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('floating_point), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VCEQ_i_Op_A_txt (d__arg, elements, esize, floating_point, m, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            test_passed : bool = undefined;
            if floating_point then {
                assert(constraint('esize in {16, 32, 64}));
                let zero : bits('esize) = FPZero(esize, 0b0);
                test_passed = FPCompareEQ(Elem_read(D_read(m + r), e, esize), zero, StandardFPSCRValue())
            } else {
                test_passed = Elem_read(D_read(m + r), e, esize) == Zeros(esize)
            };
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, if test_passed then
              Ones(esize)
            else
              Zeros(esize))
        }
    }
}

val decode_aarch32_instrs_VCEQ_i_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCEQ_i_A1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCEQ_i_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitzero, bitone, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2673) = {
    SEE = 2673;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCEQ_i_A1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val decode_aarch32_instrs_VCEQ_i_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCEQ_i_T1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if (F == 0b1 & size == 0b01) & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCEQ_i_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitzero, bitone, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2674) = {
    SEE = 2674;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCEQ_i_T1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val execute_aarch32_instrs_VCEQ_r_Op_A_txt : forall 'd 'elements 'esize ('int_operation : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('int_operation), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VCEQ_r_Op_A_txt (d__arg, elements, esize, int_operation, m, n, regs) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    op2 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(D_read(n + r), e, esize);
            op2 = Elem_read(D_read(m + r), e, esize);
            test_passed : bool = undefined;
            if int_operation then {
                test_passed = op1 == op2
            } else {
                assert(constraint('esize in {16, 32, 64}));
                test_passed = FPCompareEQ(op1, op2, StandardFPSCRValue())
            };
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, if test_passed then
              Ones(esize)
            else
              Zeros(esize))
        }
    }
}

val decode_aarch32_instrs_VCEQ_r_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCEQ_r_A1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let int_operation : bool = true;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCEQ_r_Op_A_txt(d, elements, esize, int_operation, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2675) = {
    SEE = 2675;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCEQ_r_A1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VCEQ_r_A2enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCEQ_r_A2enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let int_operation : bool = false;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCEQ_r_Op_A_txt(d, elements, esize, int_operation, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2676) = {
    SEE = 2676;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCEQ_r_A2enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VCEQ_r_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCEQ_r_T1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let int_operation : bool = true;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCEQ_r_Op_A_txt(d, elements, esize, int_operation, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2677) = {
    SEE = 2677;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCEQ_r_T1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VCEQ_r_T2enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCEQ_r_T2enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let int_operation : bool = false;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCEQ_r_Op_A_txt(d, elements, esize, int_operation, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2678) = {
    SEE = 2678;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCEQ_r_T2enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VCGE_i_Op_A_txt : forall 'd 'elements 'esize ('floating_point : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('floating_point), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VCGE_i_Op_A_txt (d__arg, elements, esize, floating_point, m, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            test_passed : bool = undefined;
            if floating_point then {
                assert(constraint('esize in {16, 32, 64}));
                let zero : bits('esize) = FPZero(esize, 0b0);
                test_passed = FPCompareGE(Elem_read(D_read(m + r), e, esize), zero, StandardFPSCRValue())
            } else {
                test_passed = SInt(Elem_read(D_read(m + r), e, esize)) >= 0
            };
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, if test_passed then
              Ones(esize)
            else
              Zeros(esize))
        }
    }
}

val decode_aarch32_instrs_VCGE_i_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCGE_i_A1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCGE_i_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitzero, bitzero, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2679) = {
    SEE = 2679;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCGE_i_A1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val decode_aarch32_instrs_VCGE_i_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCGE_i_T1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if (F == 0b1 & size == 0b01) & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCGE_i_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitzero, bitzero, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2680) = {
    SEE = 2680;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCGE_i_T1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val execute_aarch32_instrs_VCGE_r_Op_A_txt : forall 'd 'elements 'esize 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs), VCGEType) -> unit

function execute_aarch32_instrs_VCGE_r_Op_A_txt (d__arg, elements, esize, m, n, regs, vtype) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    op2 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(D_read(n + r), e, esize);
            op2 = Elem_read(D_read(m + r), e, esize);
            test_passed : bool = undefined;
            match vtype {
              VCGEType_signed => {
                  test_passed = SInt(op1) >= SInt(op2)
              },
              VCGEType_unsigned => {
                  test_passed = UInt(op1) >= UInt(op2)
              },
              VCGEType_fp => {
                  assert(constraint('esize in {16, 32, 64}));
                  test_passed = FPCompareGE(op1, op2, StandardFPSCRValue())
              }
            };
            let test_passed = test_passed;
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, if test_passed then
              Ones(esize)
            else
              Zeros(esize))
        }
    }
}

val decode_aarch32_instrs_VCGE_r_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCGE_r_A1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let vtype : VCGEType = if U == 0b1 then VCGEType_unsigned else
          VCGEType_signed;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCGE_r_Op_A_txt(d, elements, esize, m, n, regs, vtype)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2681) = {
    SEE = 2681;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCGE_r_A1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VCGE_r_A2enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCGE_r_A2enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let vtype : VCGEType = VCGEType_fp;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCGE_r_Op_A_txt(d, elements, esize, m, n, regs, vtype)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2682) = {
    SEE = 2682;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCGE_r_A2enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VCGE_r_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCGE_r_T1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let vtype : VCGEType = if U == 0b1 then VCGEType_unsigned else
          VCGEType_signed;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCGE_r_Op_A_txt(d, elements, esize, m, n, regs, vtype)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2683) = {
    SEE = 2683;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCGE_r_T1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VCGE_r_T2enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCGE_r_T2enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let vtype : VCGEType = VCGEType_fp;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCGE_r_Op_A_txt(d, elements, esize, m, n, regs, vtype)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2684) = {
    SEE = 2684;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCGE_r_T2enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VCGT_i_Op_A_txt : forall 'd 'elements 'esize ('floating_point : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('floating_point), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VCGT_i_Op_A_txt (d__arg, elements, esize, floating_point, m, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            test_passed : bool = undefined;
            if floating_point then {
                assert(constraint('esize in {16, 32, 64}));
                let zero : bits('esize) = FPZero(esize, 0b0);
                test_passed = FPCompareGT(Elem_read(D_read(m + r), e, esize), zero, StandardFPSCRValue())
            } else {
                test_passed = SInt(Elem_read(D_read(m + r), e, esize)) > 0
            };
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, if test_passed then
              Ones(esize)
            else
              Zeros(esize))
        }
    }
}

val decode_aarch32_instrs_VCGT_i_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCGT_i_A1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCGT_i_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitzero, bitzero, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2685) = {
    SEE = 2685;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCGT_i_A1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val decode_aarch32_instrs_VCGT_i_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCGT_i_T1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if (F == 0b1 & size == 0b01) & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCGT_i_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitzero, bitzero, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2686) = {
    SEE = 2686;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCGT_i_T1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val execute_aarch32_instrs_VCGT_r_Op_A_txt : forall 'd 'elements 'esize 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs), VCGTtype) -> unit

function execute_aarch32_instrs_VCGT_r_Op_A_txt (d__arg, elements, esize, m, n, regs, vtype) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    op2 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(D_read(n + r), e, esize);
            op2 = Elem_read(D_read(m + r), e, esize);
            test_passed : bool = undefined;
            match vtype {
              VCGTtype_signed => {
                  test_passed = SInt(op1) > SInt(op2)
              },
              VCGTtype_unsigned => {
                  test_passed = UInt(op1) > UInt(op2)
              },
              VCGTtype_fp => {
                  assert(constraint('esize in {16, 32, 64}));
                  test_passed = FPCompareGT(op1, op2, StandardFPSCRValue())
              }
            };
            let test_passed = test_passed;
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, if test_passed then
              Ones(esize)
            else
              Zeros(esize))
        }
    }
}

val decode_aarch32_instrs_VCGT_r_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCGT_r_A1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let vtype : VCGTtype = if U == 0b1 then VCGTtype_unsigned else
          VCGTtype_signed;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCGT_r_Op_A_txt(d, elements, esize, m, n, regs, vtype)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2687) = {
    SEE = 2687;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCGT_r_A1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VCGT_r_A2enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCGT_r_A2enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let vtype : VCGTtype = VCGTtype_fp;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCGT_r_Op_A_txt(d, elements, esize, m, n, regs, vtype)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2688) = {
    SEE = 2688;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCGT_r_A2enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VCGT_r_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCGT_r_T1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let vtype : VCGTtype = if U == 0b1 then VCGTtype_unsigned else
          VCGTtype_signed;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCGT_r_Op_A_txt(d, elements, esize, m, n, regs, vtype)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2689) = {
    SEE = 2689;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCGT_r_T1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VCGT_r_T2enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCGT_r_T2enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let vtype : VCGTtype = VCGTtype_fp;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCGT_r_Op_A_txt(d, elements, esize, m, n, regs, vtype)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2690) = {
    SEE = 2690;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCGT_r_T2enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VCLE_i_Op_A_txt : forall 'd 'elements 'esize ('floating_point : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('floating_point), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VCLE_i_Op_A_txt (d__arg, elements, esize, floating_point, m, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            test_passed : bool = undefined;
            if floating_point then {
                assert(constraint('esize in {16, 32, 64}));
                let zero : bits('esize) = FPZero(esize, 0b0);
                test_passed = FPCompareGE(zero, Elem_read(D_read(m + r), e, esize), StandardFPSCRValue())
            } else {
                test_passed = SInt(Elem_read(D_read(m + r), e, esize)) <= 0
            };
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, if test_passed then
              Ones(esize)
            else
              Zeros(esize))
        }
    }
}

val decode_aarch32_instrs_VCLE_i_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCLE_i_A1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCLE_i_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitzero, bitone, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2691) = {
    SEE = 2691;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCLE_i_A1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val decode_aarch32_instrs_VCLE_i_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCLE_i_T1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if (F == 0b1 & size == 0b01) & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCLE_i_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitzero, bitone, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2692) = {
    SEE = 2692;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCLE_i_T1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val execute_aarch32_instrs_VCLS_Op_A_txt : forall 'd 'elements 'esize 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VCLS_Op_A_txt (d__arg, elements, esize, m, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, CountLeadingSignBits(Elem_read(D_read(m + r), e, esize))[esize - 1 .. 0])
        }
    }
}

val decode_aarch32_instrs_VCLS_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCLS_A1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCLS_Op_A_txt(d, elements, esize, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2693) = {
    SEE = 2693;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCLS_A1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VCLS_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCLS_T1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCLS_Op_A_txt(d, elements, esize, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2694) = {
    SEE = 2694;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCLS_T1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_VCLT_i_Op_A_txt : forall 'd 'elements 'esize ('floating_point : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('floating_point), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VCLT_i_Op_A_txt (d__arg, elements, esize, floating_point, m, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            test_passed : bool = undefined;
            if floating_point then {
                assert(constraint('esize in {16, 32, 64}));
                let zero : bits('esize) = FPZero(esize, 0b0);
                test_passed = FPCompareGT(zero, Elem_read(D_read(m + r), e, esize), StandardFPSCRValue())
            } else {
                test_passed = SInt(Elem_read(D_read(m + r), e, esize)) < 0
            };
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, if test_passed then
              Ones(esize)
            else
              Zeros(esize))
        }
    }
}

val decode_aarch32_instrs_VCLT_i_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCLT_i_A1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCLT_i_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2695) = {
    SEE = 2695;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCLT_i_A1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val decode_aarch32_instrs_VCLT_i_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCLT_i_T1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if (F == 0b1 & size == 0b01) & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCLT_i_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2696) = {
    SEE = 2696;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCLT_i_T1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val execute_aarch32_instrs_VCLZ_Op_A_txt : forall 'd 'elements 'esize 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VCLZ_Op_A_txt (d__arg, elements, esize, m, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, CountLeadingZeroBits(Elem_read(D_read(m + r), e, esize))[esize - 1 .. 0])
        }
    }
}

val decode_aarch32_instrs_VCLZ_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCLZ_A1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCLZ_Op_A_txt(d, elements, esize, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2697) = {
    SEE = 2697;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCLZ_A1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VCLZ_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCLZ_T1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCLZ_Op_A_txt(d, elements, esize, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2698) = {
    SEE = 2698;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCLZ_T1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_VCMP_Op_A_txt : forall 'd 'esize 'm ('quiet_nan_exc : Bool) ('with_zero : Bool),
  ('esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('m), bool('quiet_nan_exc), bool('with_zero)) -> unit

function execute_aarch32_instrs_VCMP_Op_A_txt (d, esize, m, quiet_nan_exc, with_zero) = {
    CheckVFPEnabled(true);
    nzcv : bits(4) = undefined;
    match esize {
      16 => {
          let op16 : bits(16) = if with_zero then FPZero(0 + (15 - 0 + 1), 0b0)
          else
            S_read(m)[15 .. 0];
          nzcv = FPCompare(S_read(d)[15 .. 0], op16, quiet_nan_exc, FPSCR_read())
      },
      32 => {
          let op32 : bits(32) = if with_zero then FPZero(32, 0b0) else S_read(m);
          nzcv = FPCompare(S_read(d), op32, quiet_nan_exc, FPSCR_read())
      },
      64 => {
          let op64 : bits(64) = if with_zero then FPZero(64, 0b0) else D_read(m);
          nzcv = FPCompare(D_read(d), op64, quiet_nan_exc, FPSCR_read())
      },
      _ => ()
    };
    FPSCR_write() = Mk_FPSCR_Type([FPSCR_read__1().bits with 31 .. 28 = nzcv])
}

val decode_aarch32_instrs_VCMP_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCMP_A1enc_A_txt (cond, D, Vd, size, E, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let quiet_nan_exc : bool = E == 0b1;
        let with_zero : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VCMP_Op_A_txt(d, esize, m, quiet_nan_exc, with_zero)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2699) = {
    SEE = 2699;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let E = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCMP_A1enc_A_txt(cond, D, Vd, size, E, M, Vm)
}

val decode_aarch32_instrs_VCMP_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(2), bits(1)) -> unit

function decode_aarch32_instrs_VCMP_A2enc_A_txt (cond, D, Vd, size, E) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        m : int = undefined;
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let m = m;
        let quiet_nan_exc : bool = E == 0b1;
        let with_zero : bool = true;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd)
          },
          _ => ()
        };
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VCMP_Op_A_txt(d, esize, m, quiet_nan_exc, with_zero)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, bitzero, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2700) = {
    SEE = 2700;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let E = Slice(__opcode, 7, 1);
    if ((([__opcode[5]] != 0b0 | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VCMP_A2enc_A_txt(cond, D, Vd, size, E)
    }
}

val decode_aarch32_instrs_VCMP_T1enc_A_txt : (bits(1), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCMP_T1enc_A_txt (D, Vd, size, E, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let quiet_nan_exc : bool = E == 0b1;
        let with_zero : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VCMP_Op_A_txt(d, esize, m, quiet_nan_exc, with_zero)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2701) = {
    SEE = 2701;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let E = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCMP_T1enc_A_txt(D, Vd, size, E, M, Vm)
}

val decode_aarch32_instrs_VCMP_T2enc_A_txt : (bits(1), bits(4), bits(2), bits(1)) -> unit

function decode_aarch32_instrs_VCMP_T2enc_A_txt (D, Vd, size, E) = {
    if ConditionPassed() then {
        m : int = undefined;
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let m = m;
        let quiet_nan_exc : bool = E == 0b1;
        let with_zero : bool = true;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd)
          },
          _ => ()
        };
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VCMP_Op_A_txt(d, esize, m, quiet_nan_exc, with_zero)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, bitzero, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2702) = {
    SEE = 2702;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let E = Slice(__opcode, 7, 1);
    if ((([__opcode[5]] != 0b0 | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VCMP_T2enc_A_txt(D, Vd, size, E)
    }
}

val execute_aarch32_instrs_VCNT_Op_A_txt : forall 'd 'elements 'esize 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize == 8 & 'elements == 8 & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VCNT_Op_A_txt (d__arg, elements, esize, m, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, BitCount(Elem_read(D_read(m + r), e, esize))[esize - 1 .. 0])
        }
    }
}

val decode_aarch32_instrs_VCNT_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCNT_A1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = 8;
        let 'elements = 8;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCNT_Op_A_txt(d, elements, esize, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2703) = {
    SEE = 2703;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCNT_A1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VCNT_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCNT_T1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = 8;
        let 'elements = 8;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCNT_Op_A_txt(d, elements, esize, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2704) = {
    SEE = 2704;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCNT_T1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_VCVTB_Op_A_txt : forall ('convert_from_half : Bool) 'd 'lowbit 'm ('uses_double : Bool),
  (0 <= 'm & 'm <= 31 & 'lowbit in {0, 16} & 0 <= 'd & 'd <= 31).
  (bool('convert_from_half), int('d), int('lowbit), int('m), bool('uses_double)) -> unit

function execute_aarch32_instrs_VCVTB_Op_A_txt (convert_from_half, d, lowbit, m, uses_double) = {
    CheckVFPEnabled(true);
    hp : bits(16) = undefined;
    if convert_from_half then {
        let hp : bits(16) = S_read(m)[lowbit + 15 .. lowbit];
        if uses_double then {
            D_set(d) = FPConvert__1(64, hp, FPSCR_read())
        } else {
            S_set(d) = FPConvert__1(32, hp, FPSCR_read())
        }
    } else {
        if uses_double then {
            hp = FPConvert__1(16, D_read(m), FPSCR_read())
        } else {
            hp = FPConvert__1(16, S_read(m), FPSCR_read())
        };
        S_set(d) = [S_read(d) with (lowbit + 15) .. lowbit = hp]
    }
}

val decode_aarch32_instrs_VCVTB_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVTB_A1enc_A_txt (cond, D, op, Vd, sz, T, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let uses_double : bool = sz == 0b1;
        let convert_from_half : bool = op == 0b0;
        let 'lowbit = if T == 0b1 then 16 else 0;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        if uses_double then {
            if convert_from_half then {
                d = UInt(D @ Vd);
                m = UInt(Vm @ M)
            } else {
                d = UInt(Vd @ D);
                m = UInt(M @ Vm)
            }
        } else {
            d = UInt(Vd @ D);
            m = UInt(Vm @ M)
        };
        let 'm = m;
        let 'd = d;
        execute_aarch32_instrs_VCVTB_Op_A_txt(convert_from_half, d, lowbit, m, uses_double)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2705) = {
    SEE = 2705;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 16, 1);
    let Vd = Slice(__opcode, 12, 4);
    let sz = Slice(__opcode, 8, 1);
    let T = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVTB_A1enc_A_txt(cond, D, op, Vd, sz, T, M, Vm)
}

val decode_aarch32_instrs_VCVTB_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVTB_T1enc_A_txt (D, op, Vd, sz, T, M, Vm) = {
    if ConditionPassed() then {
        let uses_double : bool = sz == 0b1;
        let convert_from_half : bool = op == 0b0;
        let 'lowbit = if T == 0b1 then 16 else 0;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        if uses_double then {
            if convert_from_half then {
                d = UInt(D @ Vd);
                m = UInt(Vm @ M)
            } else {
                d = UInt(Vd @ D);
                m = UInt(M @ Vm)
            }
        } else {
            d = UInt(Vd @ D);
            m = UInt(Vm @ M)
        };
        let 'm = m;
        let 'd = d;
        execute_aarch32_instrs_VCVTB_Op_A_txt(convert_from_half, d, lowbit, m, uses_double)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2706) = {
    SEE = 2706;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 16, 1);
    let Vd = Slice(__opcode, 12, 4);
    let sz = Slice(__opcode, 8, 1);
    let T = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVTB_T1enc_A_txt(D, op, Vd, sz, T, M, Vm)
}

val execute_aarch32_instrs_VCVT_ds_Op_A_txt : forall 'd ('double_to_single : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), bool('double_to_single), int('m)) -> unit

function execute_aarch32_instrs_VCVT_ds_Op_A_txt (d, double_to_single, m) = {
    CheckVFPEnabled(true);
    if double_to_single then {
        S_set(d) = FPConvert__1(32, D_read(m), FPSCR_read())
    } else {
        D_set(d) = FPConvert__1(64, S_read(m), FPSCR_read())
    }
}

val decode_aarch32_instrs_VCVT_ds_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_ds_A1enc_A_txt (cond, D, Vd, size, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let double_to_single : bool = size == 0b11;
        let 'd = if double_to_single then UInt(Vd @ D) else UInt(D @ Vd);
        let 'm = if double_to_single then UInt(M @ Vm) else UInt(Vm @ M);
        assert(constraint((0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31)));
        execute_aarch32_instrs_VCVT_ds_Op_A_txt(d, double_to_single, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, _, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2707) = {
    SEE = 2707;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_ds_A1enc_A_txt(cond, D, Vd, size, M, Vm)
}

val decode_aarch32_instrs_VCVT_ds_T1enc_A_txt : (bits(1), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_ds_T1enc_A_txt (D, Vd, size, M, Vm) = {
    if ConditionPassed() then {
        let double_to_single : bool = size == 0b11;
        let 'd = if double_to_single then UInt(Vd @ D) else UInt(D @ Vd);
        let 'm = if double_to_single then UInt(M @ Vm) else UInt(Vm @ M);
        assert(constraint((0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31)));
        execute_aarch32_instrs_VCVT_ds_Op_A_txt(d, double_to_single, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, _, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2708) = {
    SEE = 2708;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_ds_T1enc_A_txt(D, Vd, size, M, Vm)
}

val execute_aarch32_instrs_VCVT_hs_Op_A_txt : forall 'd 'elements ('half_to_single : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'elements == 4 & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), bool('half_to_single), int('m)) -> unit

function execute_aarch32_instrs_VCVT_hs_Op_A_txt (d__arg, elements, half_to_single, m) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if half_to_single then {
            Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 32, FPConvert__1(32, Elem_read(Din_read(m), e, 16), StandardFPSCRValue()))
        } else {
            D_set(d) = Elem_set(D_read(d), e, 16, FPConvert__1(16, Elem_read(Qin_read((m >> 1)), e, 32), StandardFPSCRValue()))
        }
    }
}

val decode_aarch32_instrs_VCVT_hs_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_hs_A1enc_A_txt (D, size, Vd, op, M, Vm) = {
    if ConditionPassed() then {
        if size != 0b01 then {
            throw(Error_Undefined())
        };
        let half_to_single : bool = op == 0b1;
        if half_to_single & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        if not_bool(half_to_single) & [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = 16;
        let 'elements = 4;
        let 'm = UInt(M @ Vm);
        let 'd = UInt(D @ Vd);
        execute_aarch32_instrs_VCVT_hs_Op_A_txt(d, elements, half_to_single, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, bitone, _, bitzero, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2709) = {
    SEE = 2709;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_hs_A1enc_A_txt(D, size, Vd, op, M, Vm)
}

val decode_aarch32_instrs_VCVT_hs_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_hs_T1enc_A_txt (D, size, Vd, op, M, Vm) = {
    if ConditionPassed() then {
        if size != 0b01 then {
            throw(Error_Undefined())
        };
        let half_to_single : bool = op == 0b1;
        if half_to_single & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        if not_bool(half_to_single) & [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = 16;
        let 'elements = 4;
        let 'm = UInt(M @ Vm);
        let 'd = UInt(D @ Vd);
        execute_aarch32_instrs_VCVT_hs_Op_A_txt(d, elements, half_to_single, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, bitone, _, bitzero, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2710) = {
    SEE = 2710;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_hs_T1enc_A_txt(D, size, Vd, op, M, Vm)
}

val execute_aarch32_instrs_VCVT_is_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'regs ('to_integer : Bool),
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs), bool('to_integer), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VCVT_is_Op_A_txt (d__arg, elements, esize, m, regs, to_integer, is_unsigned) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    result : bits('esize) = undefined;
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(D_read(m + r), e, esize);
            if to_integer then {
                result = FPToFixed(esize, op1, 0, is_unsigned, StandardFPSCRValue(), FPRounding_ZERO)
            } else {
                result = FixedToFP(esize, op1, 0, is_unsigned, StandardFPSCRValue(), FPRounding_TIEEVEN)
            };
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result)
        }
    }
}

val decode_aarch32_instrs_VCVT_is_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_is_A1enc_A_txt (D, size, Vd, op, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00 | size == 0b11 then {
            throw(Error_Undefined())
        };
        let to_integer : bool = [op[1]] == 0b1;
        let is_unsigned : bool = [op[0]] == 0b1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match size {
          0b01 => {
              esize = 16;
              elements = 4
          },
          0b10 => {
              esize = 32;
              elements = 2
          },
          _ => ()
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCVT_is_Op_A_txt(d, elements, esize, m, regs, to_integer, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitone, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2711) = {
    SEE = 2711;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 7, 2);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_is_A1enc_A_txt(D, size, Vd, op, Q, M, Vm)
}

val decode_aarch32_instrs_VCVT_is_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_is_T1enc_A_txt (D, size, Vd, op, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00 | size == 0b11 then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let to_integer : bool = [op[1]] == 0b1;
        let is_unsigned : bool = [op[0]] == 0b1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match size {
          0b01 => {
              esize = 16;
              elements = 4
          },
          0b10 => {
              esize = 32;
              elements = 2
          },
          _ => ()
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCVT_is_Op_A_txt(d, elements, esize, m, regs, to_integer, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitone, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2712) = {
    SEE = 2712;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 7, 2);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_is_T1enc_A_txt(D, size, Vd, op, Q, M, Vm)
}

val execute_aarch32_instrs_VCVT_iv_Op_A_txt : forall 'd 'esize ('is_unsigned : Bool) 'm ('to_integer : Bool),
  (0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('m), FPRounding, bool('to_integer), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VCVT_iv_Op_A_txt (d, esize, m, rounding, to_integer, is_unsigned) = {
    CheckVFPEnabled(true);
    if to_integer then {
        match esize {
          16 => {
              S_set(d) = FPToFixed(32, S_read(m)[15 .. 0], 0, is_unsigned, FPSCR_read(), rounding)
          },
          32 => {
              S_set(d) = FPToFixed(32, S_read(m), 0, is_unsigned, FPSCR_read(), rounding)
          },
          64 => {
              S_set(d) = FPToFixed(32, D_read(m), 0, is_unsigned, FPSCR_read(), rounding)
          },
          _ => ()
        }
    } else {
        match esize {
          16 => {
              let fp16 : bits(16) = FixedToFP(16, S_read(m), 0, is_unsigned, FPSCR_read(), rounding);
              S_set(d) = Zeros(16) @ fp16
          },
          32 => {
              S_set(d) = FixedToFP(32, S_read(m), 0, is_unsigned, FPSCR_read(), rounding)
          },
          64 => {
              D_set(d) = FixedToFP(64, S_read(m), 0, is_unsigned, FPSCR_read(), rounding)
          },
          _ => ()
        }
    }
}

val decode_aarch32_instrs_VCVT_iv_A1enc_A_txt : (bits(4), bits(1), bits(3), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_iv_A1enc_A_txt (cond, D, opc2, Vd, size, op, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if opc2 != 0b000 & not_bool((match opc2 {
          [bitone, bitzero, _] => true,
          _ => false
        }) : bool) then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        d : range(0, 31) = undefined;
        esize : {|16, 32, 64|} = 16;
        m : range(0, 31) = undefined;
        is_unsigned : bool = undefined;
        rounding : FPRounding = undefined;
        let to_integer : bool = [opc2[2]] == 0b1;
        if to_integer then {
            is_unsigned = [opc2[0]] == 0b0;
            rounding = if op == 0b1 then FPRounding_ZERO else
              FPRoundingMode(FPSCR_read());
            d = UInt(Vd @ D);
            match size {
              0b01 => {
                  esize = 16;
                  m = UInt(Vm @ M)
              },
              0b10 => {
                  esize = 32;
                  m = UInt(Vm @ M)
              },
              0b11 => {
                  esize = 64;
                  m = UInt(M @ Vm)
              },
              _ => ()
            }
        } else {
            is_unsigned = op == 0b0;
            rounding = FPRoundingMode(FPSCR_read());
            m = UInt(Vm @ M);
            match size {
              0b01 => {
                  esize = 16;
                  d = UInt(Vd @ D)
              },
              0b10 => {
                  esize = 32;
                  d = UInt(Vd @ D)
              },
              0b11 => {
                  esize = 64;
                  d = UInt(D @ Vd)
              },
              _ => ()
            }
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VCVT_iv_Op_A_txt(d, esize, m, rounding, to_integer, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitone, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2713) = {
    SEE = 2713;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let opc2 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let op = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_iv_A1enc_A_txt(cond, D, opc2, Vd, size, op, M, Vm)
}

val decode_aarch32_instrs_VCVT_iv_T1enc_A_txt : (bits(1), bits(3), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_iv_T1enc_A_txt (D, opc2, Vd, size, op, M, Vm) = {
    if ConditionPassed() then {
        if opc2 != 0b000 & not_bool((match opc2 {
          [bitone, bitzero, _] => true,
          _ => false
        }) : bool) then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        esize : {|16, 32, 64|} = 16;
        m : range(0, 31) = undefined;
        d : range(0, 31) = undefined;
        is_unsigned : bool = undefined;
        rounding : FPRounding = undefined;
        let to_integer : bool = [opc2[2]] == 0b1;
        if to_integer then {
            is_unsigned = [opc2[0]] == 0b0;
            rounding = if op == 0b1 then FPRounding_ZERO else
              FPRoundingMode(FPSCR_read());
            d = UInt(Vd @ D);
            match size {
              0b01 => {
                  esize = 16;
                  m = UInt(Vm @ M)
              },
              0b10 => {
                  esize = 32;
                  m = UInt(Vm @ M)
              },
              0b11 => {
                  esize = 64;
                  m = UInt(M @ Vm)
              },
              _ => ()
            }
        } else {
            is_unsigned = op == 0b0;
            rounding = FPRoundingMode(FPSCR_read());
            m = UInt(Vm @ M);
            match size {
              0b01 => {
                  esize = 16;
                  d = UInt(Vd @ D)
              },
              0b10 => {
                  esize = 32;
                  d = UInt(Vd @ D)
              },
              0b11 => {
                  esize = 64;
                  d = UInt(D @ Vd)
              },
              _ => ()
            }
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VCVT_iv_Op_A_txt(d, esize, m, rounding, to_integer, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitone, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2714) = {
    SEE = 2714;
    let D = Slice(__opcode, 22, 1);
    let opc2 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let op = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_iv_T1enc_A_txt(D, opc2, Vd, size, op, M, Vm)
}

val execute_aarch32_instrs_VCVT_xs_Op_A_txt : forall 'd 'elements 'esize 'frac_bits ('is_unsigned : Bool) 'm 'regs ('to_fixed : Bool),
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 1 <= 'frac_bits & 'frac_bits <= 64 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('frac_bits), int('m), int('regs), bool('to_fixed), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VCVT_xs_Op_A_txt (d__arg, elements, esize, frac_bits, m, regs, to_fixed, is_unsigned) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    result : bits('esize) = undefined;
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(D_read(m + r), e, esize);
            if to_fixed then {
                result = FPToFixed(esize, op1, frac_bits, is_unsigned, StandardFPSCRValue(), FPRounding_ZERO)
            } else {
                result = FixedToFP(esize, op1, frac_bits, is_unsigned, StandardFPSCRValue(), FPRounding_TIEEVEN)
            };
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result)
        }
    }
}

val decode_aarch32_instrs_VCVT_xs_A1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_xs_A1enc_A_txt (U, D, imm6, Vd, op, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match imm6 {
          [bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if [op[1]] == 0b0 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if [op[1]] == 0b0 & (match imm6 {
          [bitone, bitzero, _, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_Undefined())
        };
        if (match imm6 {
          [bitzero, _, _, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let to_fixed : bool = [op[0]] == 0b1;
        let 'frac_bits = 64 - UInt(imm6);
        let is_unsigned : bool = U == 0b1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match [op[1]] {
          0b0 => {
              esize = 16;
              elements = 4
          },
          0b1 => {
              esize = 32;
              elements = 2
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCVT_xs_Op_A_txt(d, elements, esize, frac_bits, m, regs, to_fixed, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2715) = {
    SEE = 2715;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 2);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_xs_A1enc_A_txt(U, D, imm6, Vd, op, Q, M, Vm)
}

val decode_aarch32_instrs_VCVT_xs_T1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_xs_T1enc_A_txt (U, D, imm6, Vd, op, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match imm6 {
          [bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if [op[1]] == 0b0 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if [op[1]] == 0b0 & (match imm6 {
          [bitone, bitzero, _, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_Undefined())
        };
        if (match imm6 {
          [bitzero, _, _, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let to_fixed : bool = [op[0]] == 0b1;
        let 'frac_bits = 64 - UInt(imm6);
        let is_unsigned : bool = U == 0b1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match [op[1]] {
          0b0 => {
              esize = 16;
              elements = 4
          },
          0b1 => {
              esize = 32;
              elements = 2
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VCVT_xs_Op_A_txt(d, elements, esize, frac_bits, m, regs, to_fixed, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, _, _, bitzero, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2716) = {
    SEE = 2716;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 2);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_xs_T1enc_A_txt(U, D, imm6, Vd, op, Q, M, Vm)
}

val execute_aarch32_instrs_VCVT_xv_Op_A_txt : forall 'd 'fp_size 'frac_bits ('is_unsigned : Bool) 'size ('to_fixed : Bool),
  ('size in {16, 32} & 'fp_size in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('fp_size), int('frac_bits), int('size), bool('to_fixed), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VCVT_xv_Op_A_txt (d, fp_size, frac_bits, size, to_fixed, is_unsigned) = {
    CheckVFPEnabled(true);
    if to_fixed then {
        result : bits('size) = undefined;
        match fp_size {
          16 => {
              let result : bits('size) = FPToFixed(size, S_read(d)[15 .. 0], frac_bits, is_unsigned, FPSCR_read(), FPRounding_ZERO);
              S_set(d) = Extend(result, 32, is_unsigned)
          },
          32 => {
              let result : bits('size) = FPToFixed(size, S_read(d), frac_bits, is_unsigned, FPSCR_read(), FPRounding_ZERO);
              S_set(d) = Extend(result, 32, is_unsigned)
          },
          64 => {
              let result : bits('size) = FPToFixed(size, D_read(d), frac_bits, is_unsigned, FPSCR_read(), FPRounding_ZERO);
              D_set(d) = Extend(result, 64, is_unsigned)
          },
          _ => ()
        }
    } else {
        match fp_size {
          16 => {
              let fp16 : bits(16) = FixedToFP(16, S_read(d)[size - 1 .. 0], frac_bits, is_unsigned, FPSCR_read(), FPRounding_TIEEVEN);
              S_set(d) = Zeros(16) @ fp16
          },
          32 => {
              S_set(d) = FixedToFP(32, S_read(d)[size - 1 .. 0], frac_bits, is_unsigned, FPSCR_read(), FPRounding_TIEEVEN)
          },
          64 => {
              D_set(d) = FixedToFP(64, D_read(d)[size - 1 .. 0], frac_bits, is_unsigned, FPSCR_read(), FPRounding_TIEEVEN)
          },
          _ => ()
        }
    }
}

val decode_aarch32_instrs_VCVT_xv_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_xv_A1enc_A_txt (cond, D, op, U, Vd, sf, sx, i, imm4) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if sf == 0b00 | sf == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sf == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let to_fixed : bool = op == 0b1;
        let is_unsigned : bool = U == 0b1;
        let 'size = if sx == 0b0 then 16 else 32;
        let 'frac_bits = size - UInt(imm4 @ i);
        fp_size : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        match sf {
          0b01 => {
              fp_size = 16;
              d = UInt(Vd @ D)
          },
          0b10 => {
              fp_size = 32;
              d = UInt(Vd @ D)
          },
          0b11 => {
              fp_size = 64;
              d = UInt(D @ Vd)
          },
          _ => ()
        };
        let 'fp_size = fp_size;
        let 'd = d;
        if frac_bits < 0 then {
            throw(Error_Unpredictable())
        };
        let d = d;
        execute_aarch32_instrs_VCVT_xv_Op_A_txt(d, fp_size, frac_bits, size, to_fixed, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitone, _, bitone, _, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2717) = {
    SEE = 2717;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 18, 1);
    let U = Slice(__opcode, 16, 1);
    let Vd = Slice(__opcode, 12, 4);
    let sf = Slice(__opcode, 8, 2);
    let sx = Slice(__opcode, 7, 1);
    let i = Slice(__opcode, 5, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_xv_A1enc_A_txt(cond, D, op, U, Vd, sf, sx, i, imm4)
}

val decode_aarch32_instrs_VCVT_xv_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_xv_T1enc_A_txt (D, op, U, Vd, sf, sx, i, imm4) = {
    if ConditionPassed() then {
        if sf == 0b00 | sf == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sf == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let to_fixed : bool = op == 0b1;
        let is_unsigned : bool = U == 0b1;
        let 'size = if sx == 0b0 then 16 else 32;
        let 'frac_bits = size - UInt(imm4 @ i);
        fp_size : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        match sf {
          0b01 => {
              fp_size = 16;
              d = UInt(Vd @ D)
          },
          0b10 => {
              fp_size = 32;
              d = UInt(Vd @ D)
          },
          0b11 => {
              fp_size = 64;
              d = UInt(D @ Vd)
          },
          _ => ()
        };
        let 'fp_size = fp_size;
        let 'd = d;
        if frac_bits < 0 then {
            throw(Error_Unpredictable())
        };
        let d = d;
        execute_aarch32_instrs_VCVT_xv_Op_A_txt(d, fp_size, frac_bits, size, to_fixed, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitone, _, bitone, _, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2718) = {
    SEE = 2718;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 18, 1);
    let U = Slice(__opcode, 16, 1);
    let Vd = Slice(__opcode, 12, 4);
    let sf = Slice(__opcode, 8, 2);
    let sx = Slice(__opcode, 7, 1);
    let i = Slice(__opcode, 5, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_xv_T1enc_A_txt(D, op, U, Vd, sf, sx, i, imm4)
}

val execute_aarch32_instrs_VDIV_Op_A_txt : forall 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('m), int('n)) -> unit

function execute_aarch32_instrs_VDIV_Op_A_txt (d, esize, m, n) = {
    CheckVFPEnabled(true);
    match esize {
      16 => {
          S_set(d) = Zeros(16) @ FPDiv(S_read(n)[15 .. 0], S_read(m)[15 .. 0], FPSCR_read())
      },
      32 => {
          S_set(d) = FPDiv(S_read(n), S_read(m), FPSCR_read())
      },
      64 => {
          D_set(d) = FPDiv(D_read(n), D_read(m), FPSCR_read())
      },
      _ => ()
    }
}

val decode_aarch32_instrs_VDIV_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VDIV_A1enc_A_txt (cond, D, Vn, Vd, size, N, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VDIV_Op_A_txt(d, esize, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2719) = {
    SEE = 2719;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VDIV_A1enc_A_txt(cond, D, Vn, Vd, size, N, M, Vm)
}

val decode_aarch32_instrs_VDIV_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VDIV_T1enc_A_txt (D, Vn, Vd, size, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VDIV_Op_A_txt(d, esize, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2720) = {
    SEE = 2720;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VDIV_T1enc_A_txt(D, Vn, Vd, size, N, M, Vm)
}

val execute_aarch32_instrs_VDUP_r_Op_A_txt : forall 'd 'elements 'esize 'regs 't,
  (0 <= 't & 't <= 15 & 'regs in {1, 2} & 'esize in {8, 16, 32} & 'elements in {2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('regs), int('t)) -> unit

function execute_aarch32_instrs_VDUP_r_Op_A_txt (d__arg, elements, esize, regs, t) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    let scalar : bits(0 + ('esize - 1 - 0 + 1)) = R_read(t)[esize - 1 .. 0];
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, scalar)
        }
    }
}

val decode_aarch32_instrs_VDUP_r_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1)) -> unit

function decode_aarch32_instrs_VDUP_r_A1enc_A_txt (cond, B, Q, Vd, Rt, D, E) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 't = UInt(Rt);
        let 'regs = if Q == 0b0 then 1 else 2;
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        match B @ E {
          0b00 => {
              esize = 32;
              elements = 2
          },
          0b01 => {
              esize = 16;
              elements = 4
          },
          0b10 => {
              esize = 8;
              elements = 8
          },
          0b11 => {
              throw(Error_Undefined())
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VDUP_r_Op_A_txt(d, elements, esize, regs, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, bitzero, _, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2721) = {
    SEE = 2721;
    let cond = Slice(__opcode, 28, 4);
    let B = Slice(__opcode, 22, 1);
    let Q = Slice(__opcode, 21, 1);
    let Vd = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let D = Slice(__opcode, 7, 1);
    let E = Slice(__opcode, 5, 1);
    if (([__opcode[0]] != 0b0 | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VDUP_r_A1enc_A_txt(cond, B, Q, Vd, Rt, D, E)
    }
}

val decode_aarch32_instrs_VDUP_r_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1)) -> unit

function decode_aarch32_instrs_VDUP_r_T1enc_A_txt (B, Q, Vd, Rt, D, E) = {
    if ConditionPassed() then {
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 't = UInt(Rt);
        let 'regs = if Q == 0b0 then 1 else 2;
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        match B @ E {
          0b00 => {
              esize = 32;
              elements = 2
          },
          0b01 => {
              esize = 16;
              elements = 4
          },
          0b10 => {
              esize = 8;
              elements = 8
          },
          0b11 => {
              throw(Error_Undefined())
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VDUP_r_Op_A_txt(d, elements, esize, regs, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, bitzero, _, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2722) = {
    SEE = 2722;
    let B = Slice(__opcode, 22, 1);
    let Q = Slice(__opcode, 21, 1);
    let Vd = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let D = Slice(__opcode, 7, 1);
    let E = Slice(__opcode, 5, 1);
    if (([__opcode[0]] != 0b0 | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VDUP_r_T1enc_A_txt(B, Q, Vd, Rt, D, E)
    }
}

val execute_aarch32_instrs_VDUP_s_Op_A_txt : forall 'd 'elements 'esize 'index 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32} & 'elements in {2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('index), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VDUP_s_Op_A_txt (d__arg, elements, esize, index, m, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    let scalar : bits('esize) = Elem_read(D_read(m), index, esize);
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, scalar)
        }
    }
}

val decode_aarch32_instrs_VDUP_s_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VDUP_s_A1enc_A_txt (D, imm4, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match imm4 {
          [_, bitzero, bitzero, bitzero] => true,
          _ => false
        }) : bool then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        index : range(0, 7) = undefined;
        match imm4 {
          [_, _, _, bitone] => {
              esize = 8;
              elements = 8;
              index = UInt(imm4[3 .. 1])
          },
          [_, _, bitone, bitzero] => {
              esize = 16;
              elements = 4;
              index = UInt(imm4[3 .. 2])
          },
          [_, bitone, bitzero, bitzero] => {
              esize = 32;
              elements = 2;
              index = UInt([imm4[3]])
          },
          _ => ()
        };
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VDUP_s_Op_A_txt(d, elements, esize, index, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2723) = {
    SEE = 2723;
    let D = Slice(__opcode, 22, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VDUP_s_A1enc_A_txt(D, imm4, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VDUP_s_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VDUP_s_T1enc_A_txt (D, imm4, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match imm4 {
          [_, bitzero, bitzero, bitzero] => true,
          _ => false
        }) : bool then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        index : range(0, 7) = undefined;
        match imm4 {
          [_, _, _, bitone] => {
              esize = 8;
              elements = 8;
              index = UInt(imm4[3 .. 1])
          },
          [_, _, bitone, bitzero] => {
              esize = 16;
              elements = 4;
              index = UInt(imm4[3 .. 2])
          },
          [_, bitone, bitzero, bitzero] => {
              esize = 32;
              elements = 2;
              index = UInt([imm4[3]])
          },
          _ => ()
        };
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VDUP_s_Op_A_txt(d, elements, esize, index, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2724) = {
    SEE = 2724;
    let D = Slice(__opcode, 22, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VDUP_s_T1enc_A_txt(D, imm4, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_VEOR_Op_A_txt : forall 'd 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VEOR_Op_A_txt (d, m, n, regs) = {
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        D_set(d + r) = EOR(D_read(n + r), D_read(m + r))
    }
}

val decode_aarch32_instrs_VEOR_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VEOR_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VEOR_Op_A_txt(d, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2725) = {
    SEE = 2725;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VEOR_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VEOR_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VEOR_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VEOR_Op_A_txt(d, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2726) = {
    SEE = 2726;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VEOR_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VEXT_Op_A_txt : forall 'd 'm 'n 'position ('quadword_operation : Bool),
  (0 <= 'position & 'position <= 120 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n), int('position), bool('quadword_operation)) -> unit

function execute_aarch32_instrs_VEXT_Op_A_txt (d, m, n, position, quadword_operation) = {
    CheckAdvSIMDEnabled();
    if quadword_operation then {
        Q_set((d >> 1)) = (Q_read((m >> 1)) @ Q_read((n >> 1)))[position + 127 .. position]
    } else {
        assert(constraint('position + 63 < 128));
        D_set(d) = (D_read(m) @ D_read(n))[position + 63 .. position]
    }
}

val decode_aarch32_instrs_VEXT_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VEXT_A1enc_A_txt (D, Vn, Vd, imm4, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if Q == 0b0 & [imm4[3]] == 0b1 then {
            throw(Error_Undefined())
        };
        let quadword_operation : bool = Q == 0b1;
        let 'position = 8 * UInt(imm4);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VEXT_Op_A_txt(d, m, n, position, quadword_operation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2727) = {
    SEE = 2727;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let imm4 = Slice(__opcode, 8, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VEXT_A1enc_A_txt(D, Vn, Vd, imm4, N, Q, M, Vm)
}

val decode_aarch32_instrs_VEXT_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VEXT_T1enc_A_txt (D, Vn, Vd, imm4, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if Q == 0b0 & [imm4[3]] == 0b1 then {
            throw(Error_Undefined())
        };
        let quadword_operation : bool = Q == 0b1;
        let 'position = 8 * UInt(imm4);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VEXT_Op_A_txt(d, m, n, position, quadword_operation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2728) = {
    SEE = 2728;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let imm4 = Slice(__opcode, 8, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VEXT_T1enc_A_txt(D, Vn, Vd, imm4, N, Q, M, Vm)
}

val execute_aarch32_instrs_VFMA_Op_A_txt : forall ('advsimd : Bool) 'd 'elements 'esize 'm 'n ('op1_neg : Bool) 'regs,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('advsimd), int('d), int('elements), int('esize), int('m), int('n), bool('op1_neg), int('regs)) -> unit

function execute_aarch32_instrs_VFMA_Op_A_txt (advsimd, d__arg, elements, esize, m, n, op1_neg, regs) = {
    d : int = d__arg;
    op16 : bits(16) = undefined;
    op32 : bits(32) = undefined;
    op64 : bits(64) = undefined;
    CheckAdvSIMDOrVFPEnabled(true, advsimd);
    if advsimd then {
        foreach (r from 0 to (regs - 1) by 1 in inc) {
            foreach (e from 0 to (elements - 1) by 1 in inc) {
                op1 : bits('esize) = Elem_read(D_read(n + r), e, esize);
                if op1_neg then {
                    op1 = FPNeg(op1)
                };
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPMulAdd(Elem_read(D_read(d + r), e, esize), op1, Elem_read(D_read(m + r), e, esize), StandardFPSCRValue()))
            }
        }
    } else {
        match esize {
          16 => {
              let op16 : bits(16) = if op1_neg then FPNeg(S_read(n)[15 .. 0])
              else
                S_read(n)[15 .. 0];
              S_set(d) = Zeros(16) @ FPMulAdd(S_read(d)[15 .. 0], op16, S_read(m)[15 .. 0], FPSCR_read())
          },
          32 => {
              let op32 : bits(32) = if op1_neg then FPNeg(S_read(n)) else
                S_read(n);
              S_set(d) = FPMulAdd(S_read(d), op32, S_read(m), FPSCR_read())
          },
          64 => {
              let op64 : bits(64) = if op1_neg then FPNeg(D_read(n)) else
                D_read(n);
              D_set(d) = FPMulAdd(D_read(d), op64, D_read(m), FPSCR_read())
          },
          _ => ()
        }
    }
}

val decode_aarch32_instrs_VFMA_A1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFMA_A1enc_A_txt (D, op, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let advsimd : bool = true;
        let op1_neg : bool = op == 0b1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VFMA_Op_A_txt(advsimd, d, elements, esize, m, n, op1_neg, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2729) = {
    SEE = 2729;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 21, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFMA_A1enc_A_txt(D, op, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VFMA_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFMA_A2enc_A_txt (cond, D, Vn, Vd, size, N, op, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        floating_point : bool = undefined;
        elements : int = undefined;
        regs : int = undefined;
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let regs = regs;
        let elements = elements;
        let floating_point = floating_point;
        let advsimd : bool = false;
        let op1_neg : bool = op == 0b1;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VFMA_Op_A_txt(advsimd, d, elements, esize, m, n, op1_neg, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2730) = {
    SEE = 2730;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let op = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFMA_A2enc_A_txt(cond, D, Vn, Vd, size, N, op, M, Vm)
}

val decode_aarch32_instrs_VFMA_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFMA_T1enc_A_txt (D, op, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let advsimd : bool = true;
        let op1_neg : bool = op == 0b1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VFMA_Op_A_txt(advsimd, d, elements, esize, m, n, op1_neg, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2731) = {
    SEE = 2731;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 21, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFMA_T1enc_A_txt(D, op, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VFMA_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFMA_T2enc_A_txt (D, Vn, Vd, size, N, op, M, Vm) = {
    if ConditionPassed() then {
        floating_point : bool = undefined;
        elements : int = undefined;
        regs : int = undefined;
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let regs = regs;
        let elements = elements;
        let floating_point = floating_point;
        let advsimd : bool = false;
        let op1_neg : bool = op == 0b1;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VFMA_Op_A_txt(advsimd, d, elements, esize, m, n, op1_neg, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2732) = {
    SEE = 2732;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let op = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFMA_T2enc_A_txt(D, Vn, Vd, size, N, op, M, Vm)
}

val execute_aarch32_instrs_VFNMA_Op_A_txt : forall 'd 'esize 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('m), int('n), bool('op1_neg)) -> unit

function execute_aarch32_instrs_VFNMA_Op_A_txt (d, esize, m, n, op1_neg) = {
    op16 : bits(16) = undefined;
    op32 : bits(32) = undefined;
    op64 : bits(64) = undefined;
    CheckVFPEnabled(true);
    match esize {
      16 => {
          let op16 : bits(16) = if op1_neg then FPNeg(S_read(n)[15 .. 0]) else
            S_read(n)[15 .. 0];
          S_set(d) = Zeros(16) @ FPMulAdd(FPNeg(S_read(d)[15 .. 0]), op16, S_read(m)[15 .. 0], FPSCR_read())
      },
      32 => {
          let op32 : bits(32) = if op1_neg then FPNeg(S_read(n)) else S_read(n);
          S_set(d) = FPMulAdd(FPNeg(S_read(d)), op32, S_read(m), FPSCR_read())
      },
      64 => {
          let op64 : bits(64) = if op1_neg then FPNeg(D_read(n)) else D_read(n);
          D_set(d) = FPMulAdd(FPNeg(D_read(d)), op64, D_read(m), FPSCR_read())
      },
      _ => ()
    }
}

val decode_aarch32_instrs_VFNMA_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFNMA_A1enc_A_txt (cond, D, Vn, Vd, size, N, op, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let op1_neg : bool = op == 0b1;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VFNMA_Op_A_txt(d, esize, m, n, op1_neg)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2733) = {
    SEE = 2733;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let op = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFNMA_A1enc_A_txt(cond, D, Vn, Vd, size, N, op, M, Vm)
}

val decode_aarch32_instrs_VFNMA_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFNMA_T1enc_A_txt (D, Vn, Vd, size, N, op, M, Vm) = {
    if ConditionPassed() then {
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let op1_neg : bool = op == 0b1;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VFNMA_Op_A_txt(d, esize, m, n, op1_neg)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2734) = {
    SEE = 2734;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let op = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFNMA_T1enc_A_txt(D, Vn, Vd, size, N, op, M, Vm)
}

val execute_aarch32_instrs_VHADD_Op_A_txt : forall ('add : Bool) 'd 'elements 'esize ('is_unsigned : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('add), int('d), int('elements), int('esize), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VHADD_Op_A_txt (add, d__arg, elements, esize, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    op1 : int = undefined;
    op2 : int = undefined;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = asl_Int(Elem_read(D_read(n + r), e, esize), is_unsigned);
            op2 = asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned);
            result = if add then op1 + op2 else op1 - op2;
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result[esize .. 1])
        }
    }
}

val decode_aarch32_instrs_VHADD_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VHADD_A1enc_A_txt (U, D, size, Vn, Vd, op, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let add : bool = op == 0b0;
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VHADD_Op_A_txt(add, d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2735) = {
    SEE = 2735;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 9, 1);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VHADD_A1enc_A_txt(U, D, size, Vn, Vd, op, N, Q, M, Vm)
}

val decode_aarch32_instrs_VHADD_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VHADD_T1enc_A_txt (U, D, size, Vn, Vd, op, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let add : bool = op == 0b0;
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VHADD_Op_A_txt(add, d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2736) = {
    SEE = 2736;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 9, 1);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VHADD_T1enc_A_txt(U, D, size, Vn, Vd, op, N, Q, M, Vm)
}

val execute_aarch32_instrs_VLD1_1_Op_A_txt : forall 'alignment 'd 'ebytes 'index 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'ebytes in {1, 2, 4} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 2, 4}).
  (int('alignment), int('d), int('ebytes), int('index), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VLD1_1_Op_A_txt (alignment, d__arg, ebytes, index, m, n, register_index, wback) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    let address : bits(32) = R_read(n);
    let iswrite : bool = false;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    D_set(d) = Elem_set__1(8 * ebytes, D_read(d), index, MemU_read(address, ebytes));
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + ebytes
        }
    };
    ()
}

val decode_aarch32_instrs_VLD1_1_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_1_A1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD1 (single element to all lanes)"))
        };
        if [index_align[0]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'alignment = 1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD1_1_Op_A_txt(alignment, d, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2737) = {
    SEE = 2737;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_1_A1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD1_1_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_1_A2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD1 (single element to all lanes)"))
        };
        if [index_align[1]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD1_1_Op_A_txt(alignment, d, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2738) = {
    SEE = 2738;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_1_A2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD1_1_A3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_1_A3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD1 (single element to all lanes)"))
        };
        if [index_align[2]] != 0b0 then {
            throw(Error_Undefined())
        };
        if index_align[1 .. 0] != 0b00 & index_align[1 .. 0] != 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'alignment = if index_align[1 .. 0] == 0b00 then 1 else 4;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD1_1_Op_A_txt(alignment, d, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2739) = {
    SEE = 2739;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_1_A3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD1_1_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_1_T1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD1 (single element to all lanes)"))
        };
        if [index_align[0]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'alignment = 1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD1_1_Op_A_txt(alignment, d, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2740) = {
    SEE = 2740;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_1_T1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD1_1_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_1_T2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD1 (single element to all lanes)"))
        };
        if [index_align[1]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD1_1_Op_A_txt(alignment, d, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2741) = {
    SEE = 2741;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_1_T2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD1_1_T3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_1_T3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD1 (single element to all lanes)"))
        };
        if [index_align[2]] != 0b0 then {
            throw(Error_Undefined())
        };
        if index_align[1 .. 0] != 0b00 & index_align[1 .. 0] != 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'alignment = if index_align[1 .. 0] == 0b00 then 1 else 4;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD1_1_Op_A_txt(alignment, d, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2742) = {
    SEE = 2742;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_1_T3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val execute_aarch32_instrs_VLD1_a_Op_A_txt : forall 'alignment 'd 'ebytes 'm 'n ('register_index : Bool) 'regs ('wback : Bool),
  ('regs in {1, 2} & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'ebytes in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 2, 4, 8}).
  (int('alignment), int('d), int('ebytes), int('m), int('n), bool('register_index), int('regs), bool('wback)) -> unit

function execute_aarch32_instrs_VLD1_a_Op_A_txt (alignment, d, ebytes, m, n, register_index, regs, wback) = {
    CheckAdvSIMDEnabled();
    let address : bits(32) = R_read(n);
    let iswrite : bool = false;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    let replicated_element : bits(64) = Replicate(MemU_read(address, ebytes));
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        D_set(d + r) = replicated_element
    };
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + ebytes
        }
    };
    ()
}

val decode_aarch32_instrs_VLD1_a_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_a_A1enc_A_txt (D, Rn, Vd, size, T, a, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 | size == 0b00 & a == 0b1 then {
            throw(Error_Undefined())
        };
        let 'ebytes = (1 << UInt(size));
        let 'regs = if T == 0b0 then 1 else 2;
        let 'alignment = if a == 0b0 then 1 else ebytes;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD1_a_Op_A_txt(alignment, d, ebytes, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2743) = {
    SEE = 2743;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 6, 2);
    let T = Slice(__opcode, 5, 1);
    let a = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_a_A1enc_A_txt(D, Rn, Vd, size, T, a, Rm)
}

val decode_aarch32_instrs_VLD1_a_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_a_T1enc_A_txt (D, Rn, Vd, size, T, a, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 | size == 0b00 & a == 0b1 then {
            throw(Error_Undefined())
        };
        let 'ebytes = (1 << UInt(size));
        let 'regs = if T == 0b0 then 1 else 2;
        let 'alignment = if a == 0b0 then 1 else ebytes;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD1_a_Op_A_txt(alignment, d, ebytes, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2744) = {
    SEE = 2744;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 6, 2);
    let T = Slice(__opcode, 5, 1);
    let a = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_a_T1enc_A_txt(D, Rn, Vd, size, T, a, Rm)
}

val execute_aarch32_instrs_VLD1_m_Op_A_txt : forall 'alignment 'd 'ebytes 'elements 'm 'n ('register_index : Bool) 'regs ('wback : Bool),
  ('regs in {1, 2, 3, 4} & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'ebytes in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 4, 8, 16, 32}).
  (int('alignment), int('d), int('ebytes), int('elements), int('m), int('n), bool('register_index), int('regs), bool('wback)) -> unit

function execute_aarch32_instrs_VLD1_m_Op_A_txt (alignment, d__arg, ebytes, elements, m, n, register_index, regs, wback) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    address : bits(32) = R_read(n);
    let iswrite : bool = false;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            data : bits('ebytes * 8) = undefined;
            if ebytes != 8 then {
                data = MemU_read(address, ebytes)
            } else {
                let _ =
                  AArch32_CheckAlignment(address, ebytes, AccType_NORMAL, iswrite)
                in
                  ();
                data[31 .. 0] = if BigEndian(AccType_NORMAL) then
                  MemU_read(address + 4, 4)
                else
                  MemU_read(address, 4);
                data[63 .. 32] = if BigEndian(AccType_NORMAL) then
                  MemU_read(address, 4)
                else
                  MemU_read(address + 4, 4)
            };
            D_set(d + r) = Elem_set__1(ebytes * 8, D_read(d + r), e, data);
            address = address + ebytes
        }
    };
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 8 * regs
        }
    };
    ()
}

val decode_aarch32_instrs_VLD1_m_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_m_A1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 1;
        if [align[1]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2745) = {
    SEE = 2745;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_m_A1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VLD1_m_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_m_A2enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 2;
        if align == 0b11 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2746) = {
    SEE = 2746;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_m_A2enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VLD1_m_A3enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_m_A3enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 3;
        if [align[1]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2747) = {
    SEE = 2747;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_m_A3enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VLD1_m_A4enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_m_A4enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 4;
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2748) = {
    SEE = 2748;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_m_A4enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VLD1_m_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_m_T1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 1;
        if [align[1]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2749) = {
    SEE = 2749;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_m_T1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VLD1_m_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_m_T2enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 2;
        if align == 0b11 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2750) = {
    SEE = 2750;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_m_T2enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VLD1_m_T3enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_m_T3enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 3;
        if [align[1]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2751) = {
    SEE = 2751;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_m_T3enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VLD1_m_T4enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD1_m_T4enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 4;
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2752) = {
    SEE = 2752;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD1_m_T4enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val execute_aarch32_instrs_VLD2_1_Op_A_txt : forall 'alignment 'd 'd2 'ebytes 'index 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'ebytes in {1, 2, 4} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 2, 4, 8}).
  (int('alignment), int('d), int('d2), int('ebytes), int('index), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VLD2_1_Op_A_txt (alignment, d__arg, d2__arg, ebytes, index, m, n, register_index, wback) = {
    d : int = d__arg;
    d2 : int = d2__arg;
    CheckAdvSIMDEnabled();
    let address : bits(32) = R_read(n);
    let iswrite : bool = false;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    D_set(d) = Elem_set__1(8 * ebytes, D_read(d), index, MemU_read(address, ebytes));
    D_set(d2) = Elem_set__1(8 * ebytes, D_read(d2), index, MemU_read(address + ebytes, ebytes));
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 2 * ebytes
        }
    };
    ()
}

val decode_aarch32_instrs_VLD2_1_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD2_1_A1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD2 (single 2-element structure to all lanes)"))
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'inc_name = 1;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD2_1_Op_A_txt(alignment, d, d2, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2753) = {
    SEE = 2753;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD2_1_A1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD2_1_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD2_1_A2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD2 (single 2-element structure to all lanes)"))
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'inc_name = if [index_align[1]] == 0b0 then 1 else 2;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 4;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD2_1_Op_A_txt(alignment, d, d2, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2754) = {
    SEE = 2754;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD2_1_A2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD2_1_A3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD2_1_A3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD2 (single 2-element structure to all lanes)"))
        };
        if [index_align[1]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'inc_name = if [index_align[2]] == 0b0 then 1 else 2;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 8;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD2_1_Op_A_txt(alignment, d, d2, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2755) = {
    SEE = 2755;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD2_1_A3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD2_1_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD2_1_T1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD2 (single 2-element structure to all lanes)"))
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'inc_name = 1;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD2_1_Op_A_txt(alignment, d, d2, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2756) = {
    SEE = 2756;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD2_1_T1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD2_1_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD2_1_T2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD2 (single 2-element structure to all lanes)"))
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'inc_name = if [index_align[1]] == 0b0 then 1 else 2;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 4;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD2_1_Op_A_txt(alignment, d, d2, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2757) = {
    SEE = 2757;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD2_1_T2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD2_1_T3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD2_1_T3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD2 (single 2-element structure to all lanes)"))
        };
        if [index_align[1]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'inc_name = if [index_align[2]] == 0b0 then 1 else 2;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 8;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD2_1_Op_A_txt(alignment, d, d2, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2758) = {
    SEE = 2758;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD2_1_T3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val execute_aarch32_instrs_VLD2_a_Op_A_txt : forall 'alignment 'd 'd2 'ebytes 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'ebytes in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 2, 4, 8, 16}).
  (int('alignment), int('d), int('d2), int('ebytes), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VLD2_a_Op_A_txt (alignment, d, d2, ebytes, m, n, register_index, wback) = {
    CheckAdvSIMDEnabled();
    let address : bits(32) = R_read(n);
    let iswrite : bool = false;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    D_set(d) = Replicate(MemU_read(address, ebytes));
    D_set(d2) = Replicate(MemU_read(address + ebytes, ebytes));
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 2 * ebytes
        }
    };
    ()
}

val decode_aarch32_instrs_VLD2_a_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VLD2_a_A1enc_A_txt (D, Rn, Vd, size, T, a, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = (1 << UInt(size));
        let 'alignment = if a == 0b0 then 1 else 2 * ebytes;
        let 'inc_name = if T == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD2_a_Op_A_txt(alignment, d, d2, ebytes, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2759) = {
    SEE = 2759;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 6, 2);
    let T = Slice(__opcode, 5, 1);
    let a = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD2_a_A1enc_A_txt(D, Rn, Vd, size, T, a, Rm)
}

val decode_aarch32_instrs_VLD2_a_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VLD2_a_T1enc_A_txt (D, Rn, Vd, size, T, a, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = (1 << UInt(size));
        let 'alignment = if a == 0b0 then 1 else 2 * ebytes;
        let 'inc_name = if T == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD2_a_Op_A_txt(alignment, d, d2, ebytes, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2760) = {
    SEE = 2760;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 6, 2);
    let T = Slice(__opcode, 5, 1);
    let a = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD2_a_T1enc_A_txt(D, Rn, Vd, size, T, a, Rm)
}

val execute_aarch32_instrs_VLD2_m_Op_A_txt : forall 'alignment 'd 'd2 'ebytes 'elements 'm 'n 'pairs ('register_index : Bool) ('wback : Bool),
  ('pairs in {1, 2} & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'ebytes in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 4, 8, 16, 32}).
  (int('alignment), int('d), int('d2), int('ebytes), int('elements), int('m), int('n), int('pairs), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VLD2_m_Op_A_txt (alignment, d__arg, d2__arg, ebytes, elements, m, n, pairs, register_index, wback) = {
    d : int = d__arg;
    d2 : int = d2__arg;
    CheckAdvSIMDEnabled();
    address : bits(32) = R_read(n);
    let iswrite : bool = false;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    foreach (r from 0 to (pairs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            D_set(d + r) = Elem_set__1(8 * ebytes, D_read(d + r), e, MemU_read(address, ebytes));
            D_set(d2 + r) = Elem_set__1(8 * ebytes, D_read(d2 + r), e, MemU_read(address + ebytes, ebytes));
            address = address + 2 * ebytes
        }
    };
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 16 * pairs
        }
    };
    ()
}

val decode_aarch32_instrs_VLD2_m_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD2_m_A1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'pairs = 1;
        if align == 0b11 then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'inc_name = if itype == 0b1001 then 2 else 1;
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 + pairs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD2_m_Op_A_txt(alignment, d, d2, ebytes, elements, m, n, pairs, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2761) = {
    SEE = 2761;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD2_m_A1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VLD2_m_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD2_m_A2enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'pairs = 2;
        let 'inc_name = 2;
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 + pairs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD2_m_Op_A_txt(alignment, d, d2, ebytes, elements, m, n, pairs, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2762) = {
    SEE = 2762;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD2_m_A2enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VLD2_m_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD2_m_T1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'pairs = 1;
        if align == 0b11 then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'inc_name = if itype == 0b1001 then 2 else 1;
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 + pairs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD2_m_Op_A_txt(alignment, d, d2, ebytes, elements, m, n, pairs, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2763) = {
    SEE = 2763;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD2_m_T1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VLD2_m_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD2_m_T2enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'pairs = 2;
        let 'inc_name = 2;
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 + pairs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD2_m_Op_A_txt(alignment, d, d2, ebytes, elements, m, n, pairs, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2764) = {
    SEE = 2764;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD2_m_T2enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val execute_aarch32_instrs_VLD3_1_Op_A_txt : forall 'd 'd2 'd3 'ebytes 'index 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'ebytes in {1, 2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('d2), int('d3), int('ebytes), int('index), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VLD3_1_Op_A_txt (d__arg, d2__arg, d3__arg, ebytes, index, m, n, register_index, wback) = {
    d : int = d__arg;
    d2 : int = d2__arg;
    d3 : int = d3__arg;
    CheckAdvSIMDEnabled();
    let address : bits(32) = R_read(n);
    D_set(d) = Elem_set__1(8 * ebytes, D_read(d), index, MemU_read(address, ebytes));
    D_set(d2) = Elem_set__1(8 * ebytes, D_read(d2), index, MemU_read(address + ebytes, ebytes));
    D_set(d3) = Elem_set__1(8 * ebytes, D_read(d3), index, MemU_read(address + 2 * ebytes, ebytes));
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 3 * ebytes
        }
    };
    ()
}

val decode_aarch32_instrs_VLD3_1_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD3_1_A1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD3 (single 3-element structure to all lanes)"))
        };
        if [index_align[0]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'inc_name = 1;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD3_1_Op_A_txt(d, d2, d3, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2765) = {
    SEE = 2765;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD3_1_A1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD3_1_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD3_1_A2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD3 (single 3-element structure to all lanes)"))
        };
        if [index_align[0]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'inc_name = if [index_align[1]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD3_1_Op_A_txt(d, d2, d3, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2766) = {
    SEE = 2766;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD3_1_A2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD3_1_A3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD3_1_A3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD3 (single 3-element structure to all lanes)"))
        };
        if index_align[1 .. 0] != 0b00 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'inc_name = if [index_align[2]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD3_1_Op_A_txt(d, d2, d3, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2767) = {
    SEE = 2767;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD3_1_A3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD3_1_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD3_1_T1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD3 (single 3-element structure to all lanes)"))
        };
        if [index_align[0]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'inc_name = 1;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD3_1_Op_A_txt(d, d2, d3, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2768) = {
    SEE = 2768;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD3_1_T1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD3_1_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD3_1_T2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD3 (single 3-element structure to all lanes)"))
        };
        if [index_align[0]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'inc_name = if [index_align[1]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD3_1_Op_A_txt(d, d2, d3, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2769) = {
    SEE = 2769;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD3_1_T2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD3_1_T3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD3_1_T3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD3 (single 3-element structure to all lanes)"))
        };
        if index_align[1 .. 0] != 0b00 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'inc_name = if [index_align[2]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD3_1_Op_A_txt(d, d2, d3, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2770) = {
    SEE = 2770;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD3_1_T3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val execute_aarch32_instrs_VLD3_a_Op_A_txt : forall 'd 'd2 'd3 'ebytes 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'ebytes in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), int('d2), int('d3), int('ebytes), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VLD3_a_Op_A_txt (d, d2, d3, ebytes, m, n, register_index, wback) = {
    CheckAdvSIMDEnabled();
    let address : bits(32) = R_read(n);
    D_set(d) = Replicate(MemU_read(address, ebytes));
    D_set(d2) = Replicate(MemU_read(address + ebytes, ebytes));
    D_set(d3) = Replicate(MemU_read(address + 2 * ebytes, ebytes));
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 3 * ebytes
        }
    };
    ()
}

val decode_aarch32_instrs_VLD3_a_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VLD3_a_A1enc_A_txt (D, Rn, Vd, size, T, a, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 | a == 0b1 then {
            throw(Error_Undefined())
        };
        let 'ebytes = (1 << UInt(size));
        let 'inc_name = if T == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD3_a_Op_A_txt(d, d2, d3, ebytes, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2771) = {
    SEE = 2771;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 6, 2);
    let T = Slice(__opcode, 5, 1);
    let a = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD3_a_A1enc_A_txt(D, Rn, Vd, size, T, a, Rm)
}

val decode_aarch32_instrs_VLD3_a_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VLD3_a_T1enc_A_txt (D, Rn, Vd, size, T, a, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 | a == 0b1 then {
            throw(Error_Undefined())
        };
        let 'ebytes = (1 << UInt(size));
        let 'inc_name = if T == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD3_a_Op_A_txt(d, d2, d3, ebytes, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2772) = {
    SEE = 2772;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 6, 2);
    let T = Slice(__opcode, 5, 1);
    let a = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD3_a_T1enc_A_txt(D, Rn, Vd, size, T, a, Rm)
}

val execute_aarch32_instrs_VLD3_m_Op_A_txt : forall 'alignment 'd 'd2 'd3 'ebytes 'elements 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'ebytes in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 8}).
  (int('alignment), int('d), int('d2), int('d3), int('ebytes), int('elements), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VLD3_m_Op_A_txt (alignment, d__arg, d2__arg, d3__arg, ebytes, elements, m, n, register_index, wback) = {
    d : int = d__arg;
    d2 : int = d2__arg;
    d3 : int = d3__arg;
    CheckAdvSIMDEnabled();
    address : bits(32) = R_read(n);
    let iswrite : bool = false;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        D_set(d) = Elem_set__1(8 * ebytes, D_read(d), e, MemU_read(address, ebytes));
        D_set(d2) = Elem_set__1(8 * ebytes, D_read(d2), e, MemU_read(address + ebytes, ebytes));
        D_set(d3) = Elem_set__1(8 * ebytes, D_read(d3), e, MemU_read(address + 2 * ebytes, ebytes));
        address = address + 3 * ebytes
    };
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 24
        }
    };
    ()
}

val decode_aarch32_instrs_VLD3_m_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD3_m_A1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        inc_name : {|1, 2|} = 1;
        match itype {
          0b0100 => {
              inc_name = 1
          },
          0b0101 => {
              inc_name = 2
          },
          _ => {
              throw(Error_See("Related encodings"))
          }
        };
        let 'inc_name = inc_name;
        if size == 0b11 | [align[1]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'alignment = if [align[0]] == 0b0 then 1 else 8;
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD3_m_Op_A_txt(alignment, d, d2, d3, ebytes, elements, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2773) = {
    SEE = 2773;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD3_m_A1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VLD3_m_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD3_m_T1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        inc_name : {|1, 2|} = 1;
        match itype {
          0b0100 => {
              inc_name = 1
          },
          0b0101 => {
              inc_name = 2
          },
          _ => {
              throw(Error_See("Related encodings"))
          }
        };
        let 'inc_name = inc_name;
        if size == 0b11 | [align[1]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'alignment = if [align[0]] == 0b0 then 1 else 8;
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD3_m_Op_A_txt(alignment, d, d2, d3, ebytes, elements, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2774) = {
    SEE = 2774;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD3_m_T1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val execute_aarch32_instrs_VLD4_1_Op_A_txt : forall 'alignment 'd 'd2 'd3 'd4 'ebytes 'index 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'ebytes in {1, 2, 4} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 4, 8, 16, 32}).
  (int('alignment), int('d), int('d2), int('d3), int('d4), int('ebytes), int('index), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VLD4_1_Op_A_txt (alignment, d__arg, d2__arg, d3__arg, d4__arg, ebytes, index, m, n, register_index, wback) = {
    d : int = d__arg;
    d2 : int = d2__arg;
    d3 : int = d3__arg;
    d4 : int = d4__arg;
    CheckAdvSIMDEnabled();
    let address : bits(32) = R_read(n);
    let iswrite : bool = false;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    D_set(d) = Elem_set__1(8 * ebytes, D_read(d), index, MemU_read(address, ebytes));
    D_set(d2) = Elem_set__1(8 * ebytes, D_read(d2), index, MemU_read(address + ebytes, ebytes));
    D_set(d3) = Elem_set__1(8 * ebytes, D_read(d3), index, MemU_read(address + 2 * ebytes, ebytes));
    D_set(d4) = Elem_set__1(8 * ebytes, D_read(d4), index, MemU_read(address + 3 * ebytes, ebytes));
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 4 * ebytes
        }
    };
    ()
}

val decode_aarch32_instrs_VLD4_1_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD4_1_A1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD4 (single 4-element structure to all lanes)"))
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'inc_name = 1;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 4;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD4_1_Op_A_txt(alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2775) = {
    SEE = 2775;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD4_1_A1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD4_1_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD4_1_A2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD4 (single 4-element structure to all lanes)"))
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'inc_name = if [index_align[1]] == 0b0 then 1 else 2;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 8;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD4_1_Op_A_txt(alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2776) = {
    SEE = 2776;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD4_1_A2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD4_1_A3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD4_1_A3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD4 (single 4-element structure to all lanes)"))
        };
        if index_align[1 .. 0] == 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'inc_name = if [index_align[2]] == 0b0 then 1 else 2;
        let 'alignment = if index_align[1 .. 0] == 0b00 then 1 else
          (4 << UInt(index_align[1 .. 0]));
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD4_1_Op_A_txt(alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2777) = {
    SEE = 2777;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD4_1_A3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD4_1_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD4_1_T1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD4 (single 4-element structure to all lanes)"))
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'inc_name = 1;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 4;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD4_1_Op_A_txt(alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2778) = {
    SEE = 2778;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD4_1_T1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD4_1_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD4_1_T2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD4 (single 4-element structure to all lanes)"))
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'inc_name = if [index_align[1]] == 0b0 then 1 else 2;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 8;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLD4_1_Op_A_txt(alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2779) = {
    SEE = 2779;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD4_1_T2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VLD4_1_T3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VLD4_1_T3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("VLD4 (single 4-element structure to all lanes)"))
        };
        if index_align[1 .. 0] == 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'inc_name = if [index_align[2]] == 0b0 then 1 else 2;
        let 'alignment = if index_align[1 .. 0] == 0b00 then 1 else
          (4 << UInt(index_align[1 .. 0]));
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD4_1_Op_A_txt(alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2780) = {
    SEE = 2780;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD4_1_T3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val execute_aarch32_instrs_VLD4_a_Op_A_txt : forall 'alignment 'd 'd2 'd3 'd4 'ebytes 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'ebytes in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 4, 8, 16, 32}).
  (int('alignment), int('d), int('d2), int('d3), int('d4), int('ebytes), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VLD4_a_Op_A_txt (alignment, d, d2, d3, d4, ebytes, m, n, register_index, wback) = {
    CheckAdvSIMDEnabled();
    let address : bits(32) = R_read(n);
    let iswrite : bool = false;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    D_set(d) = Replicate(MemU_read(address, ebytes));
    D_set(d2) = Replicate(MemU_read(address + ebytes, ebytes));
    D_set(d3) = Replicate(MemU_read(address + 2 * ebytes, ebytes));
    D_set(d4) = Replicate(MemU_read(address + 3 * ebytes, ebytes));
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 4 * ebytes
        }
    };
    ()
}

val decode_aarch32_instrs_VLD4_a_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VLD4_a_A1enc_A_txt (D, Rn, Vd, size, T, a, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 & a == 0b0 then {
            throw(Error_Undefined())
        };
        ebytes : {|1, 2, 4, 8|} = 1;
        alignment : int = undefined;
        if size == 0b11 then {
            ebytes = 4;
            alignment = 16
        } else {
            ebytes = (1 << UInt(size));
            if size == 0b10 then {
                alignment = if a == 0b0 then 1 else 8
            } else {
                alignment = if a == 0b0 then 1 else 4 * ebytes
            }
        };
        let 'ebytes = ebytes;
        let 'alignment = alignment;
        let 'inc_name = if T == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        let alignment = alignment;
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD4_a_Op_A_txt(alignment, d, d2, d3, d4, ebytes, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2781) = {
    SEE = 2781;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 6, 2);
    let T = Slice(__opcode, 5, 1);
    let a = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD4_a_A1enc_A_txt(D, Rn, Vd, size, T, a, Rm)
}

val decode_aarch32_instrs_VLD4_a_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VLD4_a_T1enc_A_txt (D, Rn, Vd, size, T, a, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 & a == 0b0 then {
            throw(Error_Undefined())
        };
        ebytes : {|1, 2, 4, 8|} = 1;
        alignment : int = undefined;
        if size == 0b11 then {
            ebytes = 4;
            alignment = 16
        } else {
            ebytes = (1 << UInt(size));
            if size == 0b10 then {
                alignment = if a == 0b0 then 1 else 8
            } else {
                alignment = if a == 0b0 then 1 else 4 * ebytes
            }
        };
        let 'ebytes = ebytes;
        let 'alignment = alignment;
        let 'inc_name = if T == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        let alignment = alignment;
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD4_a_Op_A_txt(alignment, d, d2, d3, d4, ebytes, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2782) = {
    SEE = 2782;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 6, 2);
    let T = Slice(__opcode, 5, 1);
    let a = Slice(__opcode, 4, 1);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD4_a_T1enc_A_txt(D, Rn, Vd, size, T, a, Rm)
}

val execute_aarch32_instrs_VLD4_m_Op_A_txt : forall 'alignment 'd 'd2 'd3 'd4 'ebytes 'elements 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'ebytes in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 4, 8, 16, 32}).
  (int('alignment), int('d), int('d2), int('d3), int('d4), int('ebytes), int('elements), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VLD4_m_Op_A_txt (alignment, d__arg, d2__arg, d3__arg, d4__arg, ebytes, elements, m, n, register_index, wback) = {
    d : int = d__arg;
    d2 : int = d2__arg;
    d3 : int = d3__arg;
    d4 : int = d4__arg;
    CheckAdvSIMDEnabled();
    address : bits(32) = R_read(n);
    let iswrite : bool = false;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        D_set(d) = Elem_set__1(8 * ebytes, D_read(d), e, MemU_read(address, ebytes));
        D_set(d2) = Elem_set__1(8 * ebytes, D_read(d2), e, MemU_read(address + ebytes, ebytes));
        D_set(d3) = Elem_set__1(8 * ebytes, D_read(d3), e, MemU_read(address + 2 * ebytes, ebytes));
        D_set(d4) = Elem_set__1(8 * ebytes, D_read(d4), e, MemU_read(address + 3 * ebytes, ebytes));
        address = address + 4 * ebytes
    };
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 32
        }
    };
    ()
}

val decode_aarch32_instrs_VLD4_m_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD4_m_A1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        inc_name : {|1, 2|} = 1;
        match itype {
          0b0000 => {
              inc_name = 1
          },
          0b0001 => {
              inc_name = 2
          },
          _ => {
              throw(Error_See("Related encodings"))
          }
        };
        let 'inc_name = inc_name;
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD4_m_Op_A_txt(alignment, d, d2, d3, d4, ebytes, elements, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2783) = {
    SEE = 2783;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD4_m_A1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VLD4_m_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VLD4_m_T1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        inc_name : {|1, 2|} = 1;
        match itype {
          0b0000 => {
              inc_name = 1
          },
          0b0001 => {
              inc_name = 2
          },
          _ => {
              throw(Error_See("Related encodings"))
          }
        };
        let 'inc_name = inc_name;
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VLD4_m_Op_A_txt(alignment, d, d2, d3, d4, ebytes, elements, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2784) = {
    SEE = 2784;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VLD4_m_T1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val execute_aarch32_instrs_VLDM_Op_A_txt : forall ('add : Bool) 'd 'n 'regs ('single_regs : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 31).
  (bool('add), int('d), bits(32), int('n), int('regs), bool('single_regs), bool('wback)) -> unit

function execute_aarch32_instrs_VLDM_Op_A_txt (add, d, imm32, n, regs, single_regs, wback) = {
    word1 : bits(32) = undefined;
    word2 : bits(32) = undefined;
    CheckVFPEnabled(true);
    address : bits(32) = if add then R_read(n) else R_read(n) - imm32;
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        if single_regs then {
            S_set(d + r) = MemA_read(address, 4);
            address = address + 4
        } else {
            word1 = MemA_read(address, 4);
            word2 = MemA_read(address + 4, 4);
            address = address + 8;
            D_set(d + r) = if BigEndian(AccType_ATOMIC) then word1 @ word2 else
              word2 @ word1
        }
    };
    if wback then {
        R_set(n) = if add then R_read(n) + imm32 else R_read(n) - imm32
    };
    ()
}

val decode_aarch32_instrs_VLDM_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(1), bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_VLDM_A1enc_A_txt (cond, P, U, D, W, Rn, Vd, imm8) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_See("Related encodings"))
        };
        if P == 0b1 & W == 0b0 then {
            throw(Error_See("VLDR"))
        };
        if P == U & W == 0b1 then {
            throw(Error_Undefined())
        };
        let single_regs : bool = false;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let 'regs = DIV(UInt(imm8), 2);
        if n == 15 & (wback | CurrentInstrSet() != InstrSet_A32) then {
            throw(Error_Unpredictable())
        };
        if (regs == 0 | regs > 16) | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        if [imm8[0]] == 0b1 & d + regs > 16 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLDM_Op_A_txt(add, d, imm32, n, regs, single_regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, _, _, _, _, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2785) = {
    SEE = 2785;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_VLDM_A1enc_A_txt(cond, P, U, D, W, Rn, Vd, imm8)
}

val decode_aarch32_instrs_VLDM_A2enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(1), bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_VLDM_A2enc_A_txt (cond, P, U, D, W, Rn, Vd, imm8) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_See("Related encodings"))
        };
        if P == 0b1 & W == 0b0 then {
            throw(Error_See("VLDR"))
        };
        if P == U & W == 0b1 then {
            throw(Error_Undefined())
        };
        let single_regs : bool = true;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        let 'd = UInt(Vd @ D);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let 'regs = UInt(imm8);
        if n == 15 & (wback | CurrentInstrSet() != InstrSet_A32) then {
            throw(Error_Unpredictable())
        };
        if regs == 0 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLDM_Op_A_txt(add, d, imm32, n, regs, single_regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, _, _, _, _, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2786) = {
    SEE = 2786;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_VLDM_A2enc_A_txt(cond, P, U, D, W, Rn, Vd, imm8)
}

val decode_aarch32_instrs_VLDM_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(1), bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_VLDM_T1enc_A_txt (P, U, D, W, Rn, Vd, imm8) = {
    if ConditionPassed() then {
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_See("Related encodings"))
        };
        if P == 0b1 & W == 0b0 then {
            throw(Error_See("VLDR"))
        };
        if P == U & W == 0b1 then {
            throw(Error_Undefined())
        };
        let single_regs : bool = false;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let 'regs = DIV(UInt(imm8), 2);
        if n == 15 & (wback | CurrentInstrSet() != InstrSet_A32) then {
            throw(Error_Unpredictable())
        };
        if (regs == 0 | regs > 16) | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        if [imm8[0]] == 0b1 & d + regs > 16 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLDM_Op_A_txt(add, d, imm32, n, regs, single_regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2787) = {
    SEE = 2787;
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_VLDM_T1enc_A_txt(P, U, D, W, Rn, Vd, imm8)
}

val decode_aarch32_instrs_VLDM_T2enc_A_txt : (bits(1), bits(1), bits(1), bits(1), bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_VLDM_T2enc_A_txt (P, U, D, W, Rn, Vd, imm8) = {
    if ConditionPassed() then {
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_See("Related encodings"))
        };
        if P == 0b1 & W == 0b0 then {
            throw(Error_See("VLDR"))
        };
        if P == U & W == 0b1 then {
            throw(Error_Undefined())
        };
        let single_regs : bool = true;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        let 'd = UInt(Vd @ D);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let 'regs = UInt(imm8);
        if n == 15 & (wback | CurrentInstrSet() != InstrSet_A32) then {
            throw(Error_Unpredictable())
        };
        if regs == 0 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VLDM_Op_A_txt(add, d, imm32, n, regs, single_regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2788) = {
    SEE = 2788;
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_VLDM_T2enc_A_txt(P, U, D, W, Rn, Vd, imm8)
}

val execute_aarch32_instrs_VLDR_Op_A_txt : forall ('add : Bool) 'd 'esize 'n,
  (0 <= 'n & 'n <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('add), int('d), int('esize), bits(32), int('n)) -> unit

function execute_aarch32_instrs_VLDR_Op_A_txt (add, d, esize, imm32, n) = {
    word1 : bits(32) = undefined;
    word2 : bits(32) = undefined;
    CheckVFPEnabled(true);
    let base : bits(32) = if n == 15 then Align(PC_read__1(), 4) else R_read(n);
    let address : bits(32) = if add then base + imm32 else base - imm32;
    match esize {
      16 => {
          S_set(d) = Zeros(16) @ MemA_read(address, 2)
      },
      32 => {
          S_set(d) = MemA_read(address, 4)
      },
      64 => {
          let word1 : bits(32) = MemA_read(address, 4);
          let word2 : bits(32) = MemA_read(address + 4, 4);
          D_set(d) = if BigEndian(AccType_ATOMIC) then word1 @ word2 else
            word2 @ word1
      },
      _ => ()
    }
}

val decode_aarch32_instrs_VLDR_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(4), bits(4), bits(2), bits(8)) -> unit

function decode_aarch32_instrs_VLDR_A1enc_A_txt (cond, U, D, Rn, Vd, size, imm8) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let 'esize = (8 << UInt(size));
        let add : bool = U == 0b1;
        let imm32 : bits(32) = if esize == 16 then ZeroExtend(imm8 @ 0b0, 32)
        else
          ZeroExtend(imm8 @ 0b00, 32);
        d : range(0, 31) = undefined;
        match size {
          0b01 => {
              d = UInt(Vd @ D)
          },
          0b10 => {
              d = UInt(Vd @ D)
          },
          0b11 => {
              d = UInt(D @ Vd)
          },
          _ => ()
        };
        let 'd = d;
        let 'n = UInt(Rn);
        execute_aarch32_instrs_VLDR_Op_A_txt(add, d, esize, imm32, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, bitone, _, _, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2789) = {
    SEE = 2789;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_VLDR_A1enc_A_txt(cond, U, D, Rn, Vd, size, imm8)
}

val decode_aarch32_instrs_VLDR_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(2), bits(8)) -> unit

function decode_aarch32_instrs_VLDR_T1enc_A_txt (U, D, Rn, Vd, size, imm8) = {
    if ConditionPassed() then {
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let 'esize = (8 << UInt(size));
        let add : bool = U == 0b1;
        let imm32 : bits(32) = if esize == 16 then ZeroExtend(imm8 @ 0b0, 32)
        else
          ZeroExtend(imm8 @ 0b00, 32);
        d : range(0, 31) = undefined;
        match size {
          0b01 => {
              d = UInt(Vd @ D)
          },
          0b10 => {
              d = UInt(Vd @ D)
          },
          0b11 => {
              d = UInt(D @ Vd)
          },
          _ => ()
        };
        let 'd = d;
        let 'n = UInt(Rn);
        execute_aarch32_instrs_VLDR_Op_A_txt(add, d, esize, imm32, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2790) = {
    SEE = 2790;
    let U = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_VLDR_T1enc_A_txt(U, D, Rn, Vd, size, imm8)
}

val execute_aarch32_instrs_VMAX_f_Op_A_txt : forall 'd 'elements 'esize 'm ('maximum : Bool) 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), bool('maximum), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VMAX_f_Op_A_txt (d__arg, elements, esize, m, maximum, n, regs) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    op2 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(D_read(n + r), e, esize);
            op2 = Elem_read(D_read(m + r), e, esize);
            if maximum then {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPMax(op1, op2, StandardFPSCRValue()))
            } else {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPMin(op1, op2, StandardFPSCRValue()))
            }
        }
    }
}

val decode_aarch32_instrs_VMAX_f_A1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMAX_f_A1enc_A_txt (D, op, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let maximum : bool = op == 0b0;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMAX_f_Op_A_txt(d, elements, esize, m, maximum, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2791) = {
    SEE = 2791;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 21, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMAX_f_A1enc_A_txt(D, op, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VMAX_f_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMAX_f_T1enc_A_txt (D, op, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let maximum : bool = op == 0b0;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMAX_f_Op_A_txt(d, elements, esize, m, maximum, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2792) = {
    SEE = 2792;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 21, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMAX_f_T1enc_A_txt(D, op, sz, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VMAX_i_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm ('maximum : Bool) 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), bool('maximum), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VMAX_i_Op_A_txt (d__arg, elements, esize, m, maximum, n, regs, is_unsigned) = {
    d : int = d__arg;
    op1 : int = undefined;
    op2 : int = undefined;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = asl_Int(Elem_read(D_read(n + r), e, esize), is_unsigned);
            op2 = asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned);
            result = if maximum then Max(op1, op2) else Min(op1, op2);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result[esize - 1 .. 0])
        }
    }
}

val decode_aarch32_instrs_VMAX_i_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMAX_i_A1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, op, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let maximum : bool = op == 0b0;
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMAX_i_Op_A_txt(d, elements, esize, m, maximum, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2793) = {
    SEE = 2793;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let op = Slice(__opcode, 4, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMAX_i_A1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, op, Vm)
}

val decode_aarch32_instrs_VMAX_i_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMAX_i_T1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, op, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let maximum : bool = op == 0b0;
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMAX_i_Op_A_txt(d, elements, esize, m, maximum, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2794) = {
    SEE = 2794;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let op = Slice(__opcode, 4, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMAX_i_T1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, op, Vm)
}

val execute_aarch32_instrs_VMLA_f_Op_A_txt : forall ('add : Bool) ('advsimd : Bool) 'd 'elements 'esize 'm 'n 'regs,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('add), bool('advsimd), int('d), int('elements), int('esize), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VMLA_f_Op_A_txt (add, advsimd, d__arg, elements, esize, m, n, regs) = {
    d : int = d__arg;
    addend : bits('esize) = undefined;
    addend16 : bits(16) = undefined;
    addend32 : bits(32) = undefined;
    addend64 : bits(64) = undefined;
    product : bits('esize) = undefined;
    CheckAdvSIMDOrVFPEnabled(true, advsimd);
    if advsimd then {
        foreach (r from 0 to (regs - 1) by 1 in inc) {
            foreach (e from 0 to (elements - 1) by 1 in inc) {
                product = FPMul(Elem_read(D_read(n + r), e, esize), Elem_read(D_read(m + r), e, esize), StandardFPSCRValue());
                addend = if add then product else FPNeg(product);
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPAdd(Elem_read(D_read(d + r), e, esize), addend, StandardFPSCRValue()))
            }
        }
    } else {
        match esize {
          16 => {
              let addend16 : bits(16) = if add then
                FPMul(S_read(n)[15 .. 0], S_read(m)[15 .. 0], FPSCR_read())
              else
                FPNeg(FPMul(S_read(n)[15 .. 0], S_read(m)[15 .. 0], FPSCR_read()));
              S_set(d) = Zeros(16) @ FPAdd(S_read(d)[15 .. 0], addend16, FPSCR_read())
          },
          32 => {
              let addend32 : bits(32) = if add then
                FPMul(S_read(n), S_read(m), FPSCR_read())
              else
                FPNeg(FPMul(S_read(n), S_read(m), FPSCR_read()));
              S_set(d) = FPAdd(S_read(d), addend32, FPSCR_read())
          },
          64 => {
              let addend64 : bits(64) = if add then
                FPMul(D_read(n), D_read(m), FPSCR_read())
              else
                FPNeg(FPMul(D_read(n), D_read(m), FPSCR_read()));
              D_set(d) = FPAdd(D_read(d), addend64, FPSCR_read())
          },
          _ => ()
        }
    }
}

val decode_aarch32_instrs_VMLA_f_A1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMLA_f_A1enc_A_txt (D, op, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let advsimd : bool = true;
        let add : bool = op == 0b0;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMLA_f_Op_A_txt(add, advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2795) = {
    SEE = 2795;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 21, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMLA_f_A1enc_A_txt(D, op, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VMLA_f_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMLA_f_A2enc_A_txt (cond, D, Vn, Vd, size, N, op, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        floating_point : bool = undefined;
        elements : int = undefined;
        regs : int = undefined;
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        let regs = regs;
        let elements = elements;
        let floating_point = floating_point;
        let advsimd : bool = false;
        let add : bool = op == 0b0;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VMLA_f_Op_A_txt(add, advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2796) = {
    SEE = 2796;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let op = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMLA_f_A2enc_A_txt(cond, D, Vn, Vd, size, N, op, M, Vm)
}

val decode_aarch32_instrs_VMLA_f_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMLA_f_T1enc_A_txt (D, op, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let advsimd : bool = true;
        let add : bool = op == 0b0;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMLA_f_Op_A_txt(add, advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2797) = {
    SEE = 2797;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 21, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMLA_f_T1enc_A_txt(D, op, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VMLA_f_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMLA_f_T2enc_A_txt (D, Vn, Vd, size, N, op, M, Vm) = {
    if ConditionPassed() then {
        floating_point : bool = undefined;
        elements : int = undefined;
        regs : int = undefined;
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        let regs = regs;
        let elements = elements;
        let floating_point = floating_point;
        let advsimd : bool = false;
        let add : bool = op == 0b0;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VMLA_f_Op_A_txt(add, advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2798) = {
    SEE = 2798;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let op = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMLA_f_T2enc_A_txt(D, Vn, Vd, size, N, op, M, Vm)
}

val execute_aarch32_instrs_VMLA_i_Op_A_txt : forall ('add : Bool) 'd 'elements 'esize ('is_unsigned : Bool) ('long_destination : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('add), int('d), int('elements), int('esize), bool('long_destination), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VMLA_i_Op_A_txt (add, d__arg, elements, esize, long_destination, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    addend : int = undefined;
    product : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            product = asl_Int(Elem_read(Din_read(n + r), e, esize), is_unsigned) * asl_Int(Elem_read(Din_read(m + r), e, esize), is_unsigned);
            addend = if add then product else negate(product);
            if long_destination then {
                Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, Elem_read(Qin_read((d >> 1)), e, 2 * esize) + addend)
            } else {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, Elem_read(Din_read(d + r), e, esize) + addend)
            }
        }
    }
}

val decode_aarch32_instrs_VMLA_i_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMLA_i_A1enc_A_txt (op, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let add : bool = op == 0b0;
        let long_destination : bool = false;
        let is_unsigned : bool = false;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMLA_i_Op_A_txt(add, d, elements, esize, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2799) = {
    SEE = 2799;
    let op = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMLA_i_A1enc_A_txt(op, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VMLA_i_A2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMLA_i_A2enc_A_txt (U, D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let add : bool = op == 0b0;
        let long_destination : bool = true;
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = 1;
        execute_aarch32_instrs_VMLA_i_Op_A_txt(add, d, elements, esize, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, bitzero, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2800) = {
    SEE = 2800;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 9, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMLA_i_A2enc_A_txt(U, D, size, Vn, Vd, op, N, M, Vm)
}

val decode_aarch32_instrs_VMLA_i_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMLA_i_T1enc_A_txt (op, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let add : bool = op == 0b0;
        let long_destination : bool = false;
        let is_unsigned : bool = false;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMLA_i_Op_A_txt(add, d, elements, esize, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2801) = {
    SEE = 2801;
    let op = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMLA_i_T1enc_A_txt(op, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VMLA_i_T2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMLA_i_T2enc_A_txt (U, D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let add : bool = op == 0b0;
        let long_destination : bool = true;
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = 1;
        execute_aarch32_instrs_VMLA_i_Op_A_txt(add, d, elements, esize, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, bitzero, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2802) = {
    SEE = 2802;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 9, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMLA_i_T2enc_A_txt(U, D, size, Vn, Vd, op, N, M, Vm)
}

val execute_aarch32_instrs_VMLA_s_Op_A_txt : forall ('add : Bool) 'd 'elements 'esize ('floating_point : Bool) 'index ('is_unsigned : Bool) ('long_destination : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (bool('add), int('d), int('elements), int('esize), bool('floating_point), int('index), bool('long_destination), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VMLA_s_Op_A_txt (add, d__arg, elements, esize, floating_point, index, long_destination, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    addend : int = undefined;
    fp_addend : bits('esize) = undefined;
    op1 : bits('esize) = undefined;
    op1val : int = undefined;
    CheckAdvSIMDEnabled();
    let op2 : bits('esize) = Elem_read(Din_read(m), index, esize);
    let 'op2val = asl_Int(op2, is_unsigned);
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(Din_read(n + r), e, esize);
            op1val = asl_Int(op1, is_unsigned);
            if floating_point then {
                fp_addend = if add then FPMul(op1, op2, StandardFPSCRValue())
                else
                  FPNeg(FPMul(op1, op2, StandardFPSCRValue()));
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPAdd(Elem_read(Din_read(d + r), e, esize), fp_addend, StandardFPSCRValue()))
            } else {
                addend = if add then op1val * op2val else
                  negate(op1val) * op2val;
                if long_destination then {
                    Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, Elem_read(Qin_read((d >> 1)), e, 2 * esize) + addend)
                } else {
                    D_set(d + r) = Elem_set(D_read(d + r), e, esize, Elem_read(Din_read(d + r), e, esize) + addend)
                }
            }
        }
    }
}

val decode_aarch32_instrs_VMLA_s_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMLA_s_A1enc_A_txt (Q, D, size, Vn, Vd, op, F, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | (F == 0b1 & size == 0b01) & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = false;
        let add : bool = op == 0b0;
        let floating_point : bool = F == 0b1;
        let long_destination : bool = false;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3})));
        execute_aarch32_instrs_VMLA_s_Op_A_txt(add, d, elements, esize, floating_point, index, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, bitzero, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2803) = {
    SEE = 2803;
    let Q = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 10, 1);
    let F = Slice(__opcode, 8, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMLA_s_A1enc_A_txt(Q, D, size, Vn, Vd, op, F, N, M, Vm)
}

val decode_aarch32_instrs_VMLA_s_A2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMLA_s_A2enc_A_txt (U, D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let add : bool = op == 0b0;
        let floating_point : bool = false;
        let long_destination : bool = true;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'regs = 1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3})));
        execute_aarch32_instrs_VMLA_s_Op_A_txt(add, d, elements, esize, floating_point, index, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, bitone, bitzero, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2804) = {
    SEE = 2804;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 10, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMLA_s_A2enc_A_txt(U, D, size, Vn, Vd, op, N, M, Vm)
}

val decode_aarch32_instrs_VMLA_s_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMLA_s_T1enc_A_txt (Q, D, size, Vn, Vd, op, F, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | (F == 0b1 & size == 0b01) & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if (F == 0b1 & size == 0b01) & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = false;
        let add : bool = op == 0b0;
        let floating_point : bool = F == 0b1;
        let long_destination : bool = false;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3})));
        execute_aarch32_instrs_VMLA_s_Op_A_txt(add, d, elements, esize, floating_point, index, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, bitzero, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2805) = {
    SEE = 2805;
    let Q = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 10, 1);
    let F = Slice(__opcode, 8, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMLA_s_T1enc_A_txt(Q, D, size, Vn, Vd, op, F, N, M, Vm)
}

val decode_aarch32_instrs_VMLA_s_T2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMLA_s_T2enc_A_txt (U, D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let add : bool = op == 0b0;
        let floating_point : bool = false;
        let long_destination : bool = true;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'regs = 1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3})));
        execute_aarch32_instrs_VMLA_s_Op_A_txt(add, d, elements, esize, floating_point, index, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, bitone, bitzero, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2806) = {
    SEE = 2806;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 10, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMLA_s_T2enc_A_txt(U, D, size, Vn, Vd, op, N, M, Vm)
}

val execute_aarch32_instrs_VMOVX_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_VMOVX_Op_A_txt (d, m) = {
    CheckVFPEnabled(true);
    S_set(d) = Zeros(16) @ S_read(m)[31 .. 16]
}

val decode_aarch32_instrs_VMOVX_A1enc_A_txt : (bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOVX_A1enc_A_txt (D, Vd, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(Vd @ D);
        let 'm = UInt(Vm @ M);
        execute_aarch32_instrs_VMOVX_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2807) = {
    SEE = 2807;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOVX_A1enc_A_txt(D, Vd, M, Vm)
}

val decode_aarch32_instrs_VMOVX_T1enc_A_txt : (bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOVX_T1enc_A_txt (D, Vd, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(Vd @ D);
        let 'm = UInt(Vm @ M);
        execute_aarch32_instrs_VMOVX_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2808) = {
    SEE = 2808;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOVX_T1enc_A_txt(D, Vd, M, Vm)
}

val execute_aarch32_instrs_VINS_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_VINS_Op_A_txt (d, m) = {
    CheckVFPEnabled(true);
    S_set(d) = S_read(m)[15 .. 0] @ S_read(d)[15 .. 0]
}

val decode_aarch32_instrs_VINS_A1enc_A_txt : (bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VINS_A1enc_A_txt (D, Vd, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(Vd @ D);
        let 'm = UInt(Vm @ M);
        execute_aarch32_instrs_VINS_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2809) = {
    SEE = 2809;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VINS_A1enc_A_txt(D, Vd, M, Vm)
}

val decode_aarch32_instrs_VINS_T1enc_A_txt : (bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VINS_T1enc_A_txt (D, Vd, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(Vd @ D);
        let 'm = UInt(Vm @ M);
        execute_aarch32_instrs_VINS_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2810) = {
    SEE = 2810;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VINS_T1enc_A_txt(D, Vd, M, Vm)
}

val execute_aarch32_instrs_VMOV_d_Op_A_txt : forall 'm 't 't2 ('to_arm_registers : Bool),
  (0 <= 't2 & 't2 <= 15 & 0 <= 't & 't <= 15 & 0 <= 'm & 'm <= 31).
  (int('m), int('t), int('t2), bool('to_arm_registers)) -> unit

function execute_aarch32_instrs_VMOV_d_Op_A_txt (m, t, t2, to_arm_registers) = {
    CheckVFPEnabled(true);
    if to_arm_registers then {
        R_set(t) = D_read(m)[31 .. 0];
        R_set(t2) = D_read(m)[63 .. 32]
    } else {
        D_set(m) = [D_read(m) with 31 .. 0 = R_read(t)];
        D_set(m) = [D_read(m) with 63 .. 32 = R_read(t2)]
    }
}

val decode_aarch32_instrs_VMOV_d_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_d_A1enc_A_txt (cond, op, Rt2, Rt, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let to_arm_registers : bool = op == 0b1;
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'm = UInt(M @ Vm);
        if t == 15 | t2 == 15 then {
            throw(Error_Unpredictable())
        };
        if to_arm_registers & t == t2 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VMOV_d_Op_A_txt(m, t, t2, to_arm_registers)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2811) = {
    SEE = 2811;
    let cond = Slice(__opcode, 28, 4);
    let op = Slice(__opcode, 20, 1);
    let Rt2 = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_d_A1enc_A_txt(cond, op, Rt2, Rt, M, Vm)
}

val decode_aarch32_instrs_VMOV_d_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_d_T1enc_A_txt (op, Rt2, Rt, M, Vm) = {
    if ConditionPassed() then {
        let to_arm_registers : bool = op == 0b1;
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'm = UInt(M @ Vm);
        if t == 15 | t2 == 15 then {
            throw(Error_Unpredictable())
        };
        if to_arm_registers & t == t2 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VMOV_d_Op_A_txt(m, t, t2, to_arm_registers)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if SEE < 2812) = {
    SEE = 2812;
    let op = Slice(__opcode, 20, 1);
    let Rt2 = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_d_T1enc_A_txt(op, Rt2, Rt, M, Vm)
}

val execute_aarch32_instrs_VMOV_i_Op_A_txt : forall ('advsimd : Bool) 'd 'regs ('single_register : Bool),
  ('regs in {1, 2} & 0 <= 'd & 'd <= 31).
  (bool('advsimd), int('d), bits(32), bits(64), int('regs), bool('single_register)) -> unit

function execute_aarch32_instrs_VMOV_i_Op_A_txt (advsimd, d, imm32, imm64, regs, single_register) = {
    CheckAdvSIMDOrVFPEnabled(true, advsimd);
    if single_register then {
        S_set(d) = imm32
    } else {
        foreach (r from 0 to (regs - 1) by 1 in inc) {
            D_set(d + r) = imm64
        }
    }
}

val decode_aarch32_instrs_VMOV_i_A1enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_i_A1enc_A_txt (i, D, imm3, Vd, cmode, Q, op, imm4) = {
    if ConditionPassed() then {
        imm32 : bits(32) = undefined;
        if (op == 0b0 & [cmode[0]] == 0b1) & cmode[3 .. 2] != 0b11 then {
            throw(Error_See("VORR (immediate)"))
        };
        if op == 0b1 & cmode != 0b1110 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm32 = imm32;
        let single_register : bool = false;
        let advsimd : bool = true;
        let imm64 : bits(64) = AdvSIMDExpandImm(op, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMOV_i_Op_A_txt(advsimd, d, imm32, imm64, regs, single_register)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, bitzero, bitzero, _, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2813) = {
    SEE = 2813;
    let i = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let op = Slice(__opcode, 5, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_i_A1enc_A_txt(i, D, imm3, Vd, cmode, Q, op, imm4)
}

val decode_aarch32_instrs_VMOV_i_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_i_A2enc_A_txt (cond, D, imm4H, Vd, size, imm4L) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let single_register : bool = size != 0b11;
        let advsimd : bool = false;
        imm16 : bits(16) = undefined;
        imm32 : bits(32) = undefined;
        imm64 : bits(64) = undefined;
        d : range(0, 31) = undefined;
        regs : {'regs, 'regs == 1. int('regs)} = 1;
        match size {
          0b01 => {
              d = UInt(Vd @ D);
              let imm16 : bits(16) = VFPExpandImm(16, imm4H @ imm4L);
              imm32 = Zeros(16) @ imm16
          },
          0b10 => {
              d = UInt(Vd @ D);
              imm32 = VFPExpandImm(32, imm4H @ imm4L)
          },
          0b11 => {
              d = UInt(D @ Vd);
              imm64 = VFPExpandImm(64, imm4H @ imm4L);
              regs = 1
          },
          _ => ()
        };
        let 'regs = regs;
        let 'd = d;
        execute_aarch32_instrs_VMOV_i_Op_A_txt(advsimd, d, imm32, imm64, regs, single_register)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2814) = {
    SEE = 2814;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let imm4H = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let imm4L = Slice(__opcode, 0, 4);
    if [__opcode[7]] != 0b0 | [__opcode[5]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMOV_i_A2enc_A_txt(cond, D, imm4H, Vd, size, imm4L)
    }
}

val decode_aarch32_instrs_VMOV_i_A3enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_i_A3enc_A_txt (i, D, imm3, Vd, cmode, Q, op, imm4) = {
    if ConditionPassed() then {
        imm32 : bits(32) = undefined;
        if (op == 0b0 & [cmode[0]] == 0b1) & cmode[3 .. 2] != 0b11 then {
            throw(Error_See("VORR (immediate)"))
        };
        if op == 0b1 & cmode != 0b1110 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm32 = imm32;
        let single_register : bool = false;
        let advsimd : bool = true;
        let imm64 : bits(64) = AdvSIMDExpandImm(op, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMOV_i_Op_A_txt(advsimd, d, imm32, imm64, regs, single_register)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitzero, _, bitzero, bitzero, _, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2815) = {
    SEE = 2815;
    let i = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let op = Slice(__opcode, 5, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_i_A3enc_A_txt(i, D, imm3, Vd, cmode, Q, op, imm4)
}

val decode_aarch32_instrs_VMOV_i_A4enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_i_A4enc_A_txt (i, D, imm3, Vd, cmode, Q, op, imm4) = {
    if ConditionPassed() then {
        imm32 : bits(32) = undefined;
        if (op == 0b0 & [cmode[0]] == 0b1) & cmode[3 .. 2] != 0b11 then {
            throw(Error_See("VORR (immediate)"))
        };
        if op == 0b1 & cmode != 0b1110 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm32 = imm32;
        let single_register : bool = false;
        let advsimd : bool = true;
        let imm64 : bits(64) = AdvSIMDExpandImm(op, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMOV_i_Op_A_txt(advsimd, d, imm32, imm64, regs, single_register)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitone, _, _, bitzero, _, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2816) = {
    SEE = 2816;
    let i = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let op = Slice(__opcode, 5, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_i_A4enc_A_txt(i, D, imm3, Vd, cmode, Q, op, imm4)
}

val decode_aarch32_instrs_VMOV_i_A5enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_i_A5enc_A_txt (i, D, imm3, Vd, cmode, Q, op, imm4) = {
    if ConditionPassed() then {
        imm32 : bits(32) = undefined;
        if (op == 0b0 & [cmode[0]] == 0b1) & cmode[3 .. 2] != 0b11 then {
            throw(Error_See("VORR (immediate)"))
        };
        if op == 0b1 & cmode != 0b1110 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm32 = imm32;
        let single_register : bool = false;
        let advsimd : bool = true;
        let imm64 : bits(64) = AdvSIMDExpandImm(op, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMOV_i_Op_A_txt(advsimd, d, imm32, imm64, regs, single_register)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2817) = {
    SEE = 2817;
    let i = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let op = Slice(__opcode, 5, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_i_A5enc_A_txt(i, D, imm3, Vd, cmode, Q, op, imm4)
}

val decode_aarch32_instrs_VMOV_i_T1enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_i_T1enc_A_txt (i, D, imm3, Vd, cmode, Q, op, imm4) = {
    if ConditionPassed() then {
        imm32 : bits(32) = undefined;
        if (op == 0b0 & [cmode[0]] == 0b1) & cmode[3 .. 2] != 0b11 then {
            throw(Error_See("VORR (immediate)"))
        };
        if op == 0b1 & cmode != 0b1110 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm32 = imm32;
        let single_register : bool = false;
        let advsimd : bool = true;
        let imm64 : bits(64) = AdvSIMDExpandImm(op, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMOV_i_Op_A_txt(advsimd, d, imm32, imm64, regs, single_register)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, bitzero, bitzero, _, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2818) = {
    SEE = 2818;
    let i = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let op = Slice(__opcode, 5, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_i_T1enc_A_txt(i, D, imm3, Vd, cmode, Q, op, imm4)
}

val decode_aarch32_instrs_VMOV_i_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_i_T2enc_A_txt (D, imm4H, Vd, size, imm4L) = {
    if ConditionPassed() then {
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let single_register : bool = size != 0b11;
        let advsimd : bool = false;
        imm16 : bits(16) = undefined;
        imm32 : bits(32) = undefined;
        imm64 : bits(64) = undefined;
        d : range(0, 31) = undefined;
        regs : {'regs, 'regs == 1. int('regs)} = 1;
        match size {
          0b01 => {
              d = UInt(Vd @ D);
              let imm16 : bits(16) = VFPExpandImm(16, imm4H @ imm4L);
              imm32 = Zeros(16) @ imm16
          },
          0b10 => {
              d = UInt(Vd @ D);
              imm32 = VFPExpandImm(32, imm4H @ imm4L)
          },
          0b11 => {
              d = UInt(D @ Vd);
              imm64 = VFPExpandImm(64, imm4H @ imm4L);
              regs = 1
          },
          _ => ()
        };
        let 'regs = regs;
        let 'd = d;
        execute_aarch32_instrs_VMOV_i_Op_A_txt(advsimd, d, imm32, imm64, regs, single_register)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2819) = {
    SEE = 2819;
    let D = Slice(__opcode, 22, 1);
    let imm4H = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let imm4L = Slice(__opcode, 0, 4);
    if [__opcode[7]] != 0b0 | [__opcode[5]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMOV_i_T2enc_A_txt(D, imm4H, Vd, size, imm4L)
    }
}

val decode_aarch32_instrs_VMOV_i_T3enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_i_T3enc_A_txt (i, D, imm3, Vd, cmode, Q, op, imm4) = {
    if ConditionPassed() then {
        imm32 : bits(32) = undefined;
        if (op == 0b0 & [cmode[0]] == 0b1) & cmode[3 .. 2] != 0b11 then {
            throw(Error_See("VORR (immediate)"))
        };
        if op == 0b1 & cmode != 0b1110 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm32 = imm32;
        let single_register : bool = false;
        let advsimd : bool = true;
        let imm64 : bits(64) = AdvSIMDExpandImm(op, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMOV_i_Op_A_txt(advsimd, d, imm32, imm64, regs, single_register)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitzero, _, bitzero, bitzero, _, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2820) = {
    SEE = 2820;
    let i = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let op = Slice(__opcode, 5, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_i_T3enc_A_txt(i, D, imm3, Vd, cmode, Q, op, imm4)
}

val decode_aarch32_instrs_VMOV_i_T4enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_i_T4enc_A_txt (i, D, imm3, Vd, cmode, Q, op, imm4) = {
    if ConditionPassed() then {
        imm32 : bits(32) = undefined;
        if (op == 0b0 & [cmode[0]] == 0b1) & cmode[3 .. 2] != 0b11 then {
            throw(Error_See("VORR (immediate)"))
        };
        if op == 0b1 & cmode != 0b1110 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm32 = imm32;
        let single_register : bool = false;
        let advsimd : bool = true;
        let imm64 : bits(64) = AdvSIMDExpandImm(op, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMOV_i_Op_A_txt(advsimd, d, imm32, imm64, regs, single_register)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitone, _, _, bitzero, _, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2821) = {
    SEE = 2821;
    let i = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let op = Slice(__opcode, 5, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_i_T4enc_A_txt(i, D, imm3, Vd, cmode, Q, op, imm4)
}

val decode_aarch32_instrs_VMOV_i_T5enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_i_T5enc_A_txt (i, D, imm3, Vd, cmode, Q, op, imm4) = {
    if ConditionPassed() then {
        imm32 : bits(32) = undefined;
        if (op == 0b0 & [cmode[0]] == 0b1) & cmode[3 .. 2] != 0b11 then {
            throw(Error_See("VORR (immediate)"))
        };
        if op == 0b1 & cmode != 0b1110 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm32 = imm32;
        let single_register : bool = false;
        let advsimd : bool = true;
        let imm64 : bits(64) = AdvSIMDExpandImm(op, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMOV_i_Op_A_txt(advsimd, d, imm32, imm64, regs, single_register)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2822) = {
    SEE = 2822;
    let i = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let op = Slice(__opcode, 5, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_i_T5enc_A_txt(i, D, imm3, Vd, cmode, Q, op, imm4)
}

val execute_aarch32_instrs_VMOVL_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'esize in {0, 8, 16, 24, 32, 40, 48, 56} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VMOVL_Op_A_txt (d__arg, elements, esize, m, is_unsigned) = {
    d : int = d__arg;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        assert(constraint(('loop_e * 'esize <= 'loop_e * 'esize + 'esize - 1 | not(('loop_e >= 0 & ('loop_e + 1) * 'esize <= 64)))));
        result = asl_Int(Elem_read(Din_read(m), e, esize), is_unsigned);
        Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, result[2 * esize - 1 .. 0])
    }
}

val decode_aarch32_instrs_VMOVL_A1enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOVL_A1enc_A_txt (U, D, imm3H, Vd, M, Vm) = {
    if ConditionPassed() then {
        if imm3H == 0b000 then {
            throw(Error_See("Related encodings"))
        };
        if (imm3H != 0b001 & imm3H != 0b010) & imm3H != 0b100 then {
            throw(Error_See("VSHLL"))
        };
        if [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = 8 * UInt(imm3H);
        let is_unsigned : bool = U == 0b1;
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VMOVL_Op_A_txt(d, elements, esize, m, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if SEE < 2823) = {
    SEE = 2823;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3H = Slice(__opcode, 19, 3);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOVL_A1enc_A_txt(U, D, imm3H, Vd, M, Vm)
}

val decode_aarch32_instrs_VMOVL_T1enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOVL_T1enc_A_txt (U, D, imm3H, Vd, L, M, Vm) = {
    if ConditionPassed() then {
        if imm3H == 0b000 then {
            throw(Error_See("Related encodings"))
        };
        if (imm3H != 0b001 & imm3H != 0b010) & imm3H != 0b100 then {
            throw(Error_See("VSHLL"))
        };
        if [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = 8 * UInt(imm3H);
        let is_unsigned : bool = U == 0b1;
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VMOVL_Op_A_txt(d, elements, esize, m, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, _, bitzero, _, bitone, _, _, _, _] as __opcode)) if SEE < 2824) = {
    SEE = 2824;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3H = Slice(__opcode, 19, 3);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOVL_T1enc_A_txt(U, D, imm3H, Vd, L, M, Vm)
}

val execute_aarch32_instrs_VMOVN_Op_A_txt : forall 'd 'elements 'esize 'm,
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m)) -> unit

function execute_aarch32_instrs_VMOVN_Op_A_txt (d__arg, elements, esize, m) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        D_set(d) = Elem_set(D_read(d), e, esize, Elem_read(Qin_read((m >> 1)), e, 2 * esize)[esize - 1 .. 0])
    }
}

val decode_aarch32_instrs_VMOVN_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOVN_A1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VMOVN_Op_A_txt(d, elements, esize, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2825) = {
    SEE = 2825;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOVN_A1enc_A_txt(D, size, Vd, M, Vm)
}

val decode_aarch32_instrs_VMOVN_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOVN_T1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VMOVN_Op_A_txt(d, elements, esize, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2826) = {
    SEE = 2826;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOVN_T1enc_A_txt(D, size, Vd, M, Vm)
}

val execute_aarch32_instrs_VMOV_h_Op_A_txt : forall 'n 't ('to_arm_register : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 31).
  (int('n), int('t), bool('to_arm_register)) -> unit

function execute_aarch32_instrs_VMOV_h_Op_A_txt (n, t, to_arm_register) = {
    CheckVFPEnabled(true);
    if to_arm_register then {
        R_set(t) = Zeros(16) @ S_read(n)[15 .. 0]
    } else {
        S_set(n) = Zeros(16) @ R_read(t)[15 .. 0]
    }
}

val decode_aarch32_instrs_VMOV_h_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(1)) -> unit

function decode_aarch32_instrs_VMOV_h_A1enc_A_txt (cond, op, Vn, Rt, N) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let to_arm_register : bool = op == 0b1;
        let 't = UInt(Rt);
        let 'n = UInt(Vn @ N);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VMOV_h_Op_A_txt(n, t, to_arm_register)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2827) = {
    SEE = 2827;
    let cond = Slice(__opcode, 28, 4);
    let op = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    if (((([__opcode[5]] != 0b0 | [__opcode[6]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMOV_h_A1enc_A_txt(cond, op, Vn, Rt, N)
    }
}

val decode_aarch32_instrs_VMOV_h_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1)) -> unit

function decode_aarch32_instrs_VMOV_h_T1enc_A_txt (op, Vn, Rt, N) = {
    if ConditionPassed() then {
        if not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        let to_arm_register : bool = op == 0b1;
        let 't = UInt(Rt);
        let 'n = UInt(Vn @ N);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VMOV_h_Op_A_txt(n, t, to_arm_register)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2828) = {
    SEE = 2828;
    let op = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    if (((([__opcode[5]] != 0b0 | [__opcode[6]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMOV_h_T1enc_A_txt(op, Vn, Rt, N)
    }
}

val execute_aarch32_instrs_VMOV_r_Op_A_txt : forall ('advsimd : Bool) 'd 'm 'regs ('single_register : Bool),
  ('regs == 1 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (bool('advsimd), int('d), int('m), int('regs), bool('single_register)) -> unit

function execute_aarch32_instrs_VMOV_r_Op_A_txt (advsimd, d, m, regs, single_register) = {
    CheckAdvSIMDOrVFPEnabled(true, advsimd);
    if single_register then {
        S_set(d) = S_read(m)
    } else {
        foreach (r from 0 to (regs - 1) by 1 in inc) {
            D_set(d + r) = D_read(m + r)
        }
    }
}

val decode_aarch32_instrs_VMOV_r_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_r_A2enc_A_txt (cond, D, Vd, size, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        let single_register : bool = size == 0b10;
        let advsimd : bool = false;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        regs : {'regs, 'regs == 1. int('regs)} = 1;
        if single_register then {
            d = UInt(Vd @ D);
            m = UInt(Vm @ M)
        } else {
            d = UInt(D @ Vd);
            m = UInt(M @ Vm);
            regs = 1
        };
        let 'regs = regs;
        let 'm = m;
        let 'd = d;
        execute_aarch32_instrs_VMOV_r_Op_A_txt(advsimd, d, m, regs, single_register)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, _, _, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2829) = {
    SEE = 2829;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_r_A2enc_A_txt(cond, D, Vd, size, M, Vm)
}

val decode_aarch32_instrs_VMOV_r_T2enc_A_txt : (bits(1), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_r_T2enc_A_txt (D, Vd, size, M, Vm) = {
    if ConditionPassed() then {
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        let single_register : bool = size == 0b10;
        let advsimd : bool = false;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        regs : {'regs, 'regs == 1. int('regs)} = 1;
        if single_register then {
            d = UInt(Vd @ D);
            m = UInt(Vm @ M)
        } else {
            d = UInt(D @ Vd);
            m = UInt(M @ Vm);
            regs = 1
        };
        let 'regs = regs;
        let 'm = m;
        let 'd = d;
        execute_aarch32_instrs_VMOV_r_Op_A_txt(advsimd, d, m, regs, single_register)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, _, _, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2830) = {
    SEE = 2830;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_r_T2enc_A_txt(D, Vd, size, M, Vm)
}

val execute_aarch32_instrs_VMOV_rs_Op_A_txt : forall ('advsimd : Bool) 'd 'esize 'index 't,
  (0 <= 't & 't <= 15 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31).
  (bool('advsimd), int('d), int('esize), int('index), int('t)) -> unit

function execute_aarch32_instrs_VMOV_rs_Op_A_txt (advsimd, d__arg, esize, index, t) = {
    d : int = d__arg;
    CheckAdvSIMDOrVFPEnabled(true, advsimd);
    D_set(d) = Elem_set(D_read(d), index, esize, R_read(t)[esize - 1 .. 0])
}

val decode_aarch32_instrs_VMOV_rs_A1enc_A_txt : (bits(4), bits(2), bits(4), bits(4), bits(1), bits(2)) -> unit

function decode_aarch32_instrs_VMOV_rs_A1enc_A_txt (cond, opc1, Vd, Rt, D, opc2) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        advsimd : bool = undefined;
        esize : {|8, 16, 32|} = 8;
        index : int = undefined;
        match opc1 @ opc2 {
          [bitone, _, _, _] => {
              advsimd = true;
              esize = 8;
              index = UInt([opc1[0]] @ opc2)
          },
          [bitzero, _, _, bitone] => {
              advsimd = true;
              esize = 16;
              index = UInt([opc1[0]] @ [opc2[1]])
          },
          [bitzero, _, bitzero, bitzero] => {
              advsimd = false;
              esize = 32;
              index = UInt([opc1[0]])
          },
          [bitzero, _, bitone, bitzero] => {
              throw(Error_Undefined())
          }
        };
        let advsimd = advsimd;
        let 'index = index;
        let 'esize = esize;
        let 'd = UInt(D @ Vd);
        let 't = UInt(Rt);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        match esize {
          8 => {
              execute_aarch32_instrs_VMOV_rs_Op_A_txt(advsimd, d, 8, index, t)
          },
          16 => {
              execute_aarch32_instrs_VMOV_rs_Op_A_txt(advsimd, d, 16, index, t)
          },
          32 => {
              execute_aarch32_instrs_VMOV_rs_Op_A_txt(advsimd, d, 32, index, t)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2831) = {
    SEE = 2831;
    let cond = Slice(__opcode, 28, 4);
    let opc1 = Slice(__opcode, 21, 2);
    let Vd = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let D = Slice(__opcode, 7, 1);
    let opc2 = Slice(__opcode, 5, 2);
    if (([__opcode[0]] != 0b0 | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMOV_rs_A1enc_A_txt(cond, opc1, Vd, Rt, D, opc2)
    }
}

val decode_aarch32_instrs_VMOV_rs_T1enc_A_txt : (bits(2), bits(4), bits(4), bits(1), bits(2)) -> unit

function decode_aarch32_instrs_VMOV_rs_T1enc_A_txt (opc1, Vd, Rt, D, opc2) = {
    if ConditionPassed() then {
        advsimd : bool = undefined;
        esize : {|8, 16, 32|} = 8;
        index : int = undefined;
        match opc1 @ opc2 {
          [bitone, _, _, _] => {
              advsimd = true;
              esize = 8;
              index = UInt([opc1[0]] @ opc2)
          },
          [bitzero, _, _, bitone] => {
              advsimd = true;
              esize = 16;
              index = UInt([opc1[0]] @ [opc2[1]])
          },
          [bitzero, _, bitzero, bitzero] => {
              advsimd = false;
              esize = 32;
              index = UInt([opc1[0]])
          },
          [bitzero, _, bitone, bitzero] => {
              throw(Error_Undefined())
          }
        };
        let advsimd = advsimd;
        let 'index = index;
        let 'esize = esize;
        let 'd = UInt(D @ Vd);
        let 't = UInt(Rt);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        match esize {
          8 => {
              execute_aarch32_instrs_VMOV_rs_Op_A_txt(advsimd, d, 8, index, t)
          },
          16 => {
              execute_aarch32_instrs_VMOV_rs_Op_A_txt(advsimd, d, 16, index, t)
          },
          32 => {
              execute_aarch32_instrs_VMOV_rs_Op_A_txt(advsimd, d, 32, index, t)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2832) = {
    SEE = 2832;
    let opc1 = Slice(__opcode, 21, 2);
    let Vd = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let D = Slice(__opcode, 7, 1);
    let opc2 = Slice(__opcode, 5, 2);
    if (([__opcode[0]] != 0b0 | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMOV_rs_T1enc_A_txt(opc1, Vd, Rt, D, opc2)
    }
}

val execute_aarch32_instrs_VMOV_s_Op_A_txt : forall 'n 't ('to_arm_register : Bool),
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 31).
  (int('n), int('t), bool('to_arm_register)) -> unit

function execute_aarch32_instrs_VMOV_s_Op_A_txt (n, t, to_arm_register) = {
    CheckVFPEnabled(true);
    if to_arm_register then {
        R_set(t) = S_read(n)
    } else {
        S_set(n) = R_read(t)
    }
}

val decode_aarch32_instrs_VMOV_s_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(1)) -> unit

function decode_aarch32_instrs_VMOV_s_A1enc_A_txt (cond, op, Vn, Rt, N) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let to_arm_register : bool = op == 0b1;
        let 't = UInt(Rt);
        let 'n = UInt(Vn @ N);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VMOV_s_Op_A_txt(n, t, to_arm_register)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2833) = {
    SEE = 2833;
    let cond = Slice(__opcode, 28, 4);
    let op = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    if (((([__opcode[5]] != 0b0 | [__opcode[6]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMOV_s_A1enc_A_txt(cond, op, Vn, Rt, N)
    }
}

val decode_aarch32_instrs_VMOV_s_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1)) -> unit

function decode_aarch32_instrs_VMOV_s_T1enc_A_txt (op, Vn, Rt, N) = {
    if ConditionPassed() then {
        let to_arm_register : bool = op == 0b1;
        let 't = UInt(Rt);
        let 'n = UInt(Vn @ N);
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VMOV_s_Op_A_txt(n, t, to_arm_register)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2834) = {
    SEE = 2834;
    let op = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    if (((([__opcode[5]] != 0b0 | [__opcode[6]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMOV_s_T1enc_A_txt(op, Vn, Rt, N)
    }
}

val execute_aarch32_instrs_VMOV_sr_Op_A_txt : forall ('advsimd : Bool) 'esize 'index ('is_unsigned : Bool) 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32}).
  (bool('advsimd), int('esize), int('index), int('n), int('t), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VMOV_sr_Op_A_txt (advsimd, esize, index, n, t, is_unsigned) = {
    CheckAdvSIMDOrVFPEnabled(true, advsimd);
    if is_unsigned then {
        R_set(t) = ZeroExtend(Elem_read(D_read(n), index, esize), 32)
    } else {
        R_set(t) = SignExtend(Elem_read(D_read(n), index, esize), 32)
    }
}

val decode_aarch32_instrs_VMOV_sr_A1enc_A_txt : (bits(4), bits(1), bits(2), bits(4), bits(4), bits(1), bits(2)) -> unit

function decode_aarch32_instrs_VMOV_sr_A1enc_A_txt (cond, U, opc1, Vn, Rt, N, opc2) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        advsimd : bool = undefined;
        esize : {|8, 16, 32|} = 8;
        index : int = undefined;
        match (U @ opc1) @ opc2 {
          [_, bitone, _, _, _] => {
              advsimd = true;
              esize = 8;
              index = UInt([opc1[0]] @ opc2)
          },
          [_, bitzero, _, _, bitone] => {
              advsimd = true;
              esize = 16;
              index = UInt([opc1[0]] @ [opc2[1]])
          },
          [bitzero, bitzero, _, bitzero, bitzero] => {
              advsimd = false;
              esize = 32;
              index = UInt([opc1[0]])
          },
          [bitone, bitzero, _, bitzero, bitzero] => {
              throw(Error_Undefined())
          },
          [_, bitzero, _, bitone, bitzero] => {
              throw(Error_Undefined())
          }
        };
        let advsimd = advsimd;
        let 'index = index;
        let 'esize = esize;
        let 't = UInt(Rt);
        let 'n = UInt(N @ Vn);
        let is_unsigned : bool = U == 0b1;
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        match esize {
          8 => {
              execute_aarch32_instrs_VMOV_sr_Op_A_txt(advsimd, 8, index, n, t, is_unsigned)
          },
          16 => {
              execute_aarch32_instrs_VMOV_sr_Op_A_txt(advsimd, 16, index, n, t, is_unsigned)
          },
          32 => {
              execute_aarch32_instrs_VMOV_sr_Op_A_txt(advsimd, 32, index, n, t, is_unsigned)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, _, _, _, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2835) = {
    SEE = 2835;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let opc1 = Slice(__opcode, 21, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let opc2 = Slice(__opcode, 5, 2);
    if (([__opcode[0]] != 0b0 | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMOV_sr_A1enc_A_txt(cond, U, opc1, Vn, Rt, N, opc2)
    }
}

val decode_aarch32_instrs_VMOV_sr_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(2)) -> unit

function decode_aarch32_instrs_VMOV_sr_T1enc_A_txt (U, opc1, Vn, Rt, N, opc2) = {
    if ConditionPassed() then {
        advsimd : bool = undefined;
        esize : {|8, 16, 32|} = 8;
        index : int = undefined;
        match (U @ opc1) @ opc2 {
          [_, bitone, _, _, _] => {
              advsimd = true;
              esize = 8;
              index = UInt([opc1[0]] @ opc2)
          },
          [_, bitzero, _, _, bitone] => {
              advsimd = true;
              esize = 16;
              index = UInt([opc1[0]] @ [opc2[1]])
          },
          [bitzero, bitzero, _, bitzero, bitzero] => {
              advsimd = false;
              esize = 32;
              index = UInt([opc1[0]])
          },
          [bitone, bitzero, _, bitzero, bitzero] => {
              throw(Error_Undefined())
          },
          [_, bitzero, _, bitone, bitzero] => {
              throw(Error_Undefined())
          }
        };
        let advsimd = advsimd;
        let 'index = index;
        let 'esize = esize;
        let 't = UInt(Rt);
        let 'n = UInt(N @ Vn);
        let is_unsigned : bool = U == 0b1;
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        match esize {
          8 => {
              execute_aarch32_instrs_VMOV_sr_Op_A_txt(advsimd, 8, index, n, t, is_unsigned)
          },
          16 => {
              execute_aarch32_instrs_VMOV_sr_Op_A_txt(advsimd, 16, index, n, t, is_unsigned)
          },
          32 => {
              execute_aarch32_instrs_VMOV_sr_Op_A_txt(advsimd, 32, index, n, t, is_unsigned)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2836) = {
    SEE = 2836;
    let U = Slice(__opcode, 23, 1);
    let opc1 = Slice(__opcode, 21, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let opc2 = Slice(__opcode, 5, 2);
    if (([__opcode[0]] != 0b0 | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMOV_sr_T1enc_A_txt(U, opc1, Vn, Rt, N, opc2)
    }
}

val execute_aarch32_instrs_VMOV_ss_Op_A_txt : forall 'm 't 't2 ('to_arm_registers : Bool),
  (0 <= 't2 & 't2 <= 15 & 0 <= 't & 't <= 15 & 0 <= 'm & 'm <= 31).
  (int('m), int('t), int('t2), bool('to_arm_registers)) -> unit

function execute_aarch32_instrs_VMOV_ss_Op_A_txt (m, t, t2, to_arm_registers) = {
    CheckVFPEnabled(true);
    if to_arm_registers then {
        R_set(t) = S_read(m);
        R_set(t2) = S_read(m + 1)
    } else {
        S_set(m) = R_read(t);
        S_set(m + 1) = R_read(t2)
    }
}

val decode_aarch32_instrs_VMOV_ss_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_ss_A1enc_A_txt (cond, op, Rt2, Rt, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let to_arm_registers : bool = op == 0b1;
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'm = UInt(Vm @ M);
        if (t == 15 | t2 == 15) | m == 31 then {
            throw(Error_Unpredictable())
        };
        if to_arm_registers & t == t2 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VMOV_ss_Op_A_txt(m, t, t2, to_arm_registers)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2837) = {
    SEE = 2837;
    let cond = Slice(__opcode, 28, 4);
    let op = Slice(__opcode, 20, 1);
    let Rt2 = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_ss_A1enc_A_txt(cond, op, Rt2, Rt, M, Vm)
}

val decode_aarch32_instrs_VMOV_ss_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMOV_ss_T1enc_A_txt (op, Rt2, Rt, M, Vm) = {
    if ConditionPassed() then {
        let to_arm_registers : bool = op == 0b1;
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'm = UInt(Vm @ M);
        if (t == 15 | t2 == 15) | m == 31 then {
            throw(Error_Unpredictable())
        };
        if to_arm_registers & t == t2 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VMOV_ss_Op_A_txt(m, t, t2, to_arm_registers)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if SEE < 2838) = {
    SEE = 2838;
    let op = Slice(__opcode, 20, 1);
    let Rt2 = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMOV_ss_T1enc_A_txt(op, Rt2, Rt, M, Vm)
}

val execute_aarch32_instrs_VMUL_f_Op_A_txt : forall ('advsimd : Bool) 'd 'elements 'esize 'm 'n 'regs,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('advsimd), int('d), int('elements), int('esize), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VMUL_f_Op_A_txt (advsimd, d__arg, elements, esize, m, n, regs) = {
    d : int = d__arg;
    CheckAdvSIMDOrVFPEnabled(true, advsimd);
    if advsimd then {
        foreach (r from 0 to (regs - 1) by 1 in inc) {
            foreach (e from 0 to (elements - 1) by 1 in inc) {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPMul(Elem_read(D_read(n + r), e, esize), Elem_read(D_read(m + r), e, esize), StandardFPSCRValue()))
            }
        }
    } else {
        match esize {
          16 => {
              S_set(d) = Zeros(16) @ FPMul(S_read(n)[15 .. 0], S_read(m)[15 .. 0], FPSCR_read())
          },
          32 => {
              S_set(d) = FPMul(S_read(n), S_read(m), FPSCR_read())
          },
          64 => {
              D_set(d) = FPMul(D_read(n), D_read(m), FPSCR_read())
          },
          _ => ()
        }
    }
}

val decode_aarch32_instrs_VMUL_f_A1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMUL_f_A1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let advsimd : bool = true;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMUL_f_Op_A_txt(advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2839) = {
    SEE = 2839;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMUL_f_A1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VMUL_f_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMUL_f_A2enc_A_txt (cond, D, Vn, Vd, size, N, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        floating_point : bool = undefined;
        elements : int = undefined;
        regs : int = undefined;
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let regs = regs;
        let elements = elements;
        let floating_point = floating_point;
        let advsimd : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VMUL_f_Op_A_txt(advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2840) = {
    SEE = 2840;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMUL_f_A2enc_A_txt(cond, D, Vn, Vd, size, N, M, Vm)
}

val decode_aarch32_instrs_VMUL_f_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMUL_f_T1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let advsimd : bool = true;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMUL_f_Op_A_txt(advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2841) = {
    SEE = 2841;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMUL_f_T1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VMUL_f_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMUL_f_T2enc_A_txt (D, Vn, Vd, size, N, M, Vm) = {
    if ConditionPassed() then {
        floating_point : bool = undefined;
        elements : int = undefined;
        regs : int = undefined;
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let regs = regs;
        let elements = elements;
        let floating_point = floating_point;
        let advsimd : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VMUL_f_Op_A_txt(advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2842) = {
    SEE = 2842;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMUL_f_T2enc_A_txt(D, Vn, Vd, size, N, M, Vm)
}

val execute_aarch32_instrs_VMUL_i_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) ('long_destination : Bool) 'm 'n ('polynomial : Bool) 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('long_destination), int('m), int('n), bool('polynomial), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VMUL_i_Op_A_txt (d__arg, elements, esize, long_destination, m, n, polynomial, regs, is_unsigned) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    op1val : int = undefined;
    op2 : bits('esize) = undefined;
    op2val : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(Din_read(n + r), e, esize);
            op1val = asl_Int(op1, is_unsigned);
            op2 = Elem_read(Din_read(m + r), e, esize);
            op2val = asl_Int(op2, is_unsigned);
            product : bits(2 * 'esize) = undefined;
            if polynomial then {
                product = PolynomialMult(op1, op2)
            } else {
                product = (op1val * op2val)[2 * esize - 1 .. 0]
            };
            if long_destination then {
                Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, product)
            } else {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, product[esize - 1 .. 0])
            }
        }
    }
}

val decode_aarch32_instrs_VMUL_i_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMUL_i_A1enc_A_txt (op, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 | op == 0b1 & size != 0b00 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = false;
        let polynomial : bool = op == 0b1;
        let long_destination : bool = false;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMUL_i_Op_A_txt(d, elements, esize, long_destination, m, n, polynomial, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2843) = {
    SEE = 2843;
    let op = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMUL_i_A1enc_A_txt(op, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VMUL_i_A2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMUL_i_A2enc_A_txt (U, D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        let is_unsigned : bool = U == 0b1;
        let polynomial : bool = op == 0b1;
        let long_destination : bool = true;
        esize : {|8, 16, 32, 64|} = (8 << UInt(size));
        elements : int = DIV(64, esize);
        if polynomial then {
            if U == 0b1 | size == 0b01 then {
                throw(Error_Undefined())
            };
            if size == 0b10 then {
                if not_bool(HaveBit128PMULLExt()) then {
                    throw(Error_Undefined())
                };
                esize = 64;
                elements = 1
            };
            ()
        };
        let 'esize = esize;
        let 'elements = elements;
        if [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = 1;
        execute_aarch32_instrs_VMUL_i_Op_A_txt(d, elements, esize, long_destination, m, n, polynomial, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, _, bitzero, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2844) = {
    SEE = 2844;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 9, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMUL_i_A2enc_A_txt(U, D, size, Vn, Vd, op, N, M, Vm)
}

val decode_aarch32_instrs_VMUL_i_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMUL_i_T1enc_A_txt (op, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 | op == 0b1 & size != 0b00 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = false;
        let polynomial : bool = op == 0b1;
        let long_destination : bool = false;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMUL_i_Op_A_txt(d, elements, esize, long_destination, m, n, polynomial, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2845) = {
    SEE = 2845;
    let op = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMUL_i_T1enc_A_txt(op, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VMUL_i_T2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMUL_i_T2enc_A_txt (U, D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        let is_unsigned : bool = U == 0b1;
        let polynomial : bool = op == 0b1;
        let long_destination : bool = true;
        esize : {|8, 16, 32, 64|} = (8 << UInt(size));
        elements : int = DIV(64, esize);
        if polynomial then {
            if U == 0b1 | size == 0b01 then {
                throw(Error_Undefined())
            };
            if size == 0b10 then {
                if InITBlock() then {
                    throw(Error_Unpredictable())
                };
                if not_bool(HaveBit128PMULLExt()) then {
                    throw(Error_Undefined())
                };
                esize = 64;
                elements = 1
            };
            ()
        };
        let 'esize = esize;
        let 'elements = elements;
        if [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = 1;
        execute_aarch32_instrs_VMUL_i_Op_A_txt(d, elements, esize, long_destination, m, n, polynomial, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, _, bitzero, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2846) = {
    SEE = 2846;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 9, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMUL_i_T2enc_A_txt(U, D, size, Vn, Vd, op, N, M, Vm)
}

val execute_aarch32_instrs_VMUL_s_Op_A_txt : forall 'd 'elements 'esize ('floating_point : Bool) 'index ('is_unsigned : Bool) ('long_destination : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('floating_point), int('index), bool('long_destination), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VMUL_s_Op_A_txt (d__arg, elements, esize, floating_point, index, long_destination, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    op1val : int = undefined;
    CheckAdvSIMDEnabled();
    let op2 : bits('esize) = Elem_read(Din_read(m), index, esize);
    let 'op2val = asl_Int(op2, is_unsigned);
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(Din_read(n + r), e, esize);
            op1val = asl_Int(op1, is_unsigned);
            if floating_point then {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPMul(op1, op2, StandardFPSCRValue()))
            } else {
                if long_destination then {
                    Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, (op1val * op2val)[2 * esize - 1 .. 0])
                } else {
                    D_set(d + r) = Elem_set(D_read(d + r), e, esize, (op1val * op2val)[esize - 1 .. 0])
                }
            }
        }
    }
}

val decode_aarch32_instrs_VMUL_s_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMUL_s_A1enc_A_txt (Q, D, size, Vn, Vd, F, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | (F == 0b1 & size == 0b01) & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = false;
        let floating_point : bool = F == 0b1;
        let long_destination : bool = false;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3})));
        execute_aarch32_instrs_VMUL_s_Op_A_txt(d, elements, esize, floating_point, index, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2847) = {
    SEE = 2847;
    let Q = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 8, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMUL_s_A1enc_A_txt(Q, D, size, Vn, Vd, F, N, M, Vm)
}

val decode_aarch32_instrs_VMUL_s_A2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMUL_s_A2enc_A_txt (U, D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let long_destination : bool = true;
        let floating_point : bool = false;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'regs = 1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        index : int = undefined;
        m : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3})));
        execute_aarch32_instrs_VMUL_s_Op_A_txt(d, elements, esize, floating_point, index, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2848) = {
    SEE = 2848;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMUL_s_A2enc_A_txt(U, D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VMUL_s_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMUL_s_T1enc_A_txt (Q, D, size, Vn, Vd, F, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if (F == 0b1 & size == 0b01) & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if size == 0b00 | (F == 0b1 & size == 0b01) & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = false;
        let floating_point : bool = F == 0b1;
        let long_destination : bool = false;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3})));
        execute_aarch32_instrs_VMUL_s_Op_A_txt(d, elements, esize, floating_point, index, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2849) = {
    SEE = 2849;
    let Q = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 8, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMUL_s_T1enc_A_txt(Q, D, size, Vn, Vd, F, N, M, Vm)
}

val decode_aarch32_instrs_VMUL_s_T2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMUL_s_T2enc_A_txt (U, D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let long_destination : bool = true;
        let floating_point : bool = false;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'regs = 1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        index : int = undefined;
        m : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3})));
        execute_aarch32_instrs_VMUL_s_Op_A_txt(d, elements, esize, floating_point, index, long_destination, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2850) = {
    SEE = 2850;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMUL_s_T2enc_A_txt(U, D, size, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VMVN_i_Op_A_txt : forall 'd 'regs,
  ('regs in {1, 2} & 0 <= 'd & 'd <= 31).
  (int('d), bits(64), int('regs)) -> unit

function execute_aarch32_instrs_VMVN_i_Op_A_txt (d, imm64, regs) = {
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        D_set(d + r) = not_vec(imm64)
    }
}

val decode_aarch32_instrs_VMVN_i_A1enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMVN_i_A1enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b1 & cmode[3 .. 2] != 0b11 | cmode[3 .. 1] == 0b111 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b1, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMVN_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, bitzero, bitzero, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2851) = {
    SEE = 2851;
    let i = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMVN_i_A1enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val decode_aarch32_instrs_VMVN_i_A2enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMVN_i_A2enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b1 & cmode[3 .. 2] != 0b11 | cmode[3 .. 1] == 0b111 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b1, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMVN_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitzero, _, bitzero, bitzero, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2852) = {
    SEE = 2852;
    let i = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMVN_i_A2enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val decode_aarch32_instrs_VMVN_i_A3enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMVN_i_A3enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b1 & cmode[3 .. 2] != 0b11 | cmode[3 .. 1] == 0b111 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b1, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMVN_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitone, bitzero, _, bitzero, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2853) = {
    SEE = 2853;
    let i = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMVN_i_A3enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val decode_aarch32_instrs_VMVN_i_T1enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMVN_i_T1enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b1 & cmode[3 .. 2] != 0b11 | cmode[3 .. 1] == 0b111 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b1, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMVN_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, bitzero, bitzero, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2854) = {
    SEE = 2854;
    let i = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMVN_i_T1enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val decode_aarch32_instrs_VMVN_i_T2enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMVN_i_T2enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b1 & cmode[3 .. 2] != 0b11 | cmode[3 .. 1] == 0b111 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b1, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMVN_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitzero, _, bitzero, bitzero, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2855) = {
    SEE = 2855;
    let i = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMVN_i_T2enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val decode_aarch32_instrs_VMVN_i_T3enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMVN_i_T3enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b1 & cmode[3 .. 2] != 0b11 | cmode[3 .. 1] == 0b111 then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b1, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMVN_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitone, bitzero, _, bitzero, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2856) = {
    SEE = 2856;
    let i = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMVN_i_T3enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val execute_aarch32_instrs_VMVN_r_Op_A_txt : forall 'd 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VMVN_r_Op_A_txt (d, m, regs) = {
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        D_set(d + r) = not_vec(D_read(m + r))
    }
}

val decode_aarch32_instrs_VMVN_r_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMVN_r_A1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMVN_r_Op_A_txt(d, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2857) = {
    SEE = 2857;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMVN_r_A1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VMVN_r_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMVN_r_T1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VMVN_r_Op_A_txt(d, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2858) = {
    SEE = 2858;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMVN_r_T1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_VNEG_Op_A_txt : forall ('advsimd : Bool) 'd 'elements 'esize ('floating_point : Bool) 'm 'regs,
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('advsimd), int('d), int('elements), int('esize), bool('floating_point), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VNEG_Op_A_txt (advsimd, d__arg, elements, esize, floating_point, m, regs) = {
    d : int = d__arg;
    result : int = undefined;
    CheckAdvSIMDOrVFPEnabled(true, advsimd);
    if advsimd then {
        foreach (r from 0 to (regs - 1) by 1 in inc) {
            foreach (e from 0 to (elements - 1) by 1 in inc) {
                if floating_point then {
                    assert(constraint('esize in {16, 32, 64}));
                    D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPNeg(Elem_read(D_read(m + r), e, esize)))
                } else {
                    result = negate(SInt(Elem_read(D_read(m + r), e, esize)));
                    D_set(d + r) = Elem_set(D_read(d + r), e, esize, result[esize - 1 .. 0])
                }
            }
        }
    } else {
        match esize {
          16 => {
              S_set(d) = Zeros(16) @ FPNeg(S_read(m)[15 .. 0])
          },
          32 => {
              S_set(d) = FPNeg(S_read(m))
          },
          64 => {
              D_set(d) = FPNeg(D_read(m))
          },
          _ => ()
        }
    }
}

val decode_aarch32_instrs_VNEG_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VNEG_A1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let advsimd : bool = true;
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VNEG_Op_A_txt(advsimd, d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitone, bitone, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2859) = {
    SEE = 2859;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VNEG_A1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val decode_aarch32_instrs_VNEG_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VNEG_A2enc_A_txt (cond, D, Vd, size, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        floating_point : bool = undefined;
        elements : int = undefined;
        regs : int = undefined;
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        let regs = regs;
        let elements = elements;
        let floating_point = floating_point;
        let advsimd : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VNEG_Op_A_txt(advsimd, d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitzero, _, _, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2860) = {
    SEE = 2860;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VNEG_A2enc_A_txt(cond, D, Vd, size, M, Vm)
}

val decode_aarch32_instrs_VNEG_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VNEG_T1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if F == 0b1 & (size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00) then {
            throw(Error_Undefined())
        };
        if (F == 0b1 & size == 0b01) & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let advsimd : bool = true;
        let floating_point : bool = F == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VNEG_Op_A_txt(advsimd, d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, _, bitone, bitone, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2861) = {
    SEE = 2861;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 10, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VNEG_T1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val decode_aarch32_instrs_VNEG_T2enc_A_txt : (bits(1), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VNEG_T2enc_A_txt (D, Vd, size, M, Vm) = {
    if ConditionPassed() then {
        floating_point : bool = undefined;
        elements : int = undefined;
        regs : int = undefined;
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        let regs = regs;
        let elements = elements;
        let floating_point = floating_point;
        let advsimd : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VNEG_Op_A_txt(advsimd, d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitzero, _, _, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2862) = {
    SEE = 2862;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VNEG_T2enc_A_txt(D, Vd, size, M, Vm)
}

val execute_aarch32_instrs_VNMLA_Op_A_txt : forall 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('m), int('n), VFPNegMul) -> unit

function execute_aarch32_instrs_VNMLA_Op_A_txt (d, esize, m, n, vtype) = {
    product16 : bits(16) = undefined;
    product32 : bits(32) = undefined;
    product64 : bits(64) = undefined;
    CheckVFPEnabled(true);
    match esize {
      16 => {
          let product16 : bits(16) = FPMul(S_read(n)[15 .. 0], S_read(m)[15 .. 0], FPSCR_read());
          match vtype {
            VFPNegMul_VNMLA => {
                S_set(d) = Zeros(16) @ FPAdd(FPNeg(S_read(d)[15 .. 0]), FPNeg(product16), FPSCR_read())
            },
            VFPNegMul_VNMLS => {
                S_set(d) = Zeros(16) @ FPAdd(FPNeg(S_read(d)[15 .. 0]), product16, FPSCR_read())
            },
            VFPNegMul_VNMUL => {
                S_set(d) = Zeros(16) @ FPNeg(product16)
            }
          }
      },
      32 => {
          let product32 : bits(32) = FPMul(S_read(n), S_read(m), FPSCR_read());
          match vtype {
            VFPNegMul_VNMLA => {
                S_set(d) = FPAdd(FPNeg(S_read(d)), FPNeg(product32), FPSCR_read())
            },
            VFPNegMul_VNMLS => {
                S_set(d) = FPAdd(FPNeg(S_read(d)), product32, FPSCR_read())
            },
            VFPNegMul_VNMUL => {
                S_set(d) = FPNeg(product32)
            }
          }
      },
      64 => {
          let product64 : bits(64) = FPMul(D_read(n), D_read(m), FPSCR_read());
          match vtype {
            VFPNegMul_VNMLA => {
                D_set(d) = FPAdd(FPNeg(D_read(d)), FPNeg(product64), FPSCR_read())
            },
            VFPNegMul_VNMLS => {
                D_set(d) = FPAdd(FPNeg(D_read(d)), product64, FPSCR_read())
            },
            VFPNegMul_VNMUL => {
                D_set(d) = FPNeg(product64)
            }
          }
      },
      _ => ()
    }
}

val decode_aarch32_instrs_VNMLA_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VNMLA_A1enc_A_txt (cond, D, Vn, Vd, size, N, op, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let vtype : VFPNegMul = if op == 0b1 then VFPNegMul_VNMLA else
          VFPNegMul_VNMLS;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VNMLA_Op_A_txt(d, esize, m, n, vtype)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitzero, _, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2863) = {
    SEE = 2863;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let op = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VNMLA_A1enc_A_txt(cond, D, Vn, Vd, size, N, op, M, Vm)
}

val decode_aarch32_instrs_VNMLA_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VNMLA_A2enc_A_txt (cond, D, Vn, Vd, size, N, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let vtype : VFPNegMul = VFPNegMul_VNMUL;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VNMLA_Op_A_txt(d, esize, m, n, vtype)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2864) = {
    SEE = 2864;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VNMLA_A2enc_A_txt(cond, D, Vn, Vd, size, N, M, Vm)
}

val decode_aarch32_instrs_VNMLA_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VNMLA_T1enc_A_txt (D, Vn, Vd, size, N, op, M, Vm) = {
    if ConditionPassed() then {
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let vtype : VFPNegMul = if op == 0b1 then VFPNegMul_VNMLA else
          VFPNegMul_VNMLS;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VNMLA_Op_A_txt(d, esize, m, n, vtype)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2865) = {
    SEE = 2865;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let op = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VNMLA_T1enc_A_txt(D, Vn, Vd, size, N, op, M, Vm)
}

val decode_aarch32_instrs_VNMLA_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VNMLA_T2enc_A_txt (D, Vn, Vd, size, N, M, Vm) = {
    if ConditionPassed() then {
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let vtype : VFPNegMul = VFPNegMul_VNMUL;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VNMLA_Op_A_txt(d, esize, m, n, vtype)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2866) = {
    SEE = 2866;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VNMLA_T2enc_A_txt(D, Vn, Vd, size, N, M, Vm)
}

val execute_aarch32_instrs_VORN_r_Op_A_txt : forall 'd 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VORN_r_Op_A_txt (d, m, n, regs) = {
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        D_set(d + r) = D_read(n + r) | not_vec(D_read(m + r))
    }
}

val decode_aarch32_instrs_VORN_r_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VORN_r_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VORN_r_Op_A_txt(d, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2867) = {
    SEE = 2867;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VORN_r_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VORN_r_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VORN_r_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VORN_r_Op_A_txt(d, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2868) = {
    SEE = 2868;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VORN_r_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VORR_i_Op_A_txt : forall 'd 'regs,
  ('regs in {1, 2} & 0 <= 'd & 'd <= 31).
  (int('d), bits(64), int('regs)) -> unit

function execute_aarch32_instrs_VORR_i_Op_A_txt (d, imm64, regs) = {
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        D_set(d + r) = D_read(d + r) | imm64
    }
}

val decode_aarch32_instrs_VORR_i_A1enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VORR_i_A1enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b0 | cmode[3 .. 2] == 0b11 then {
            throw(Error_See("VMOV (immediate)"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b0, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VORR_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, bitone, bitzero, _, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2869) = {
    SEE = 2869;
    let i = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VORR_i_A1enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val decode_aarch32_instrs_VORR_i_A2enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VORR_i_A2enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b0 | cmode[3 .. 2] == 0b11 then {
            throw(Error_See("VMOV (immediate)"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b0, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VORR_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitzero, _, bitone, bitzero, _, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2870) = {
    SEE = 2870;
    let i = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VORR_i_A2enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val decode_aarch32_instrs_VORR_i_T1enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VORR_i_T1enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b0 | cmode[3 .. 2] == 0b11 then {
            throw(Error_See("VMOV (immediate)"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b0, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VORR_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, bitone, bitzero, _, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2871) = {
    SEE = 2871;
    let i = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VORR_i_T1enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val decode_aarch32_instrs_VORR_i_T2enc_A_txt : (bits(1), bits(1), bits(3), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VORR_i_T2enc_A_txt (i, D, imm3, Vd, cmode, Q, imm4) = {
    if ConditionPassed() then {
        if [cmode[0]] == 0b0 | cmode[3 .. 2] == 0b11 then {
            throw(Error_See("VMOV (immediate)"))
        };
        if Q == 0b1 & [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let imm64 : bits(64) = AdvSIMDExpandImm(0b0, cmode, (i @ imm3) @ imm4);
        let 'd = UInt(D @ Vd);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VORR_i_Op_A_txt(d, imm64, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, bitzero, _, bitone, bitzero, _, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2872) = {
    SEE = 2872;
    let i = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm3 = Slice(__opcode, 16, 3);
    let Vd = Slice(__opcode, 12, 4);
    let cmode = Slice(__opcode, 8, 4);
    let Q = Slice(__opcode, 6, 1);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VORR_i_T2enc_A_txt(i, D, imm3, Vd, cmode, Q, imm4)
}

val execute_aarch32_instrs_VORR_r_Op_A_txt : forall 'd 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VORR_r_Op_A_txt (d, m, n, regs) = {
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        D_set(d + r) = D_read(n + r) | D_read(m + r)
    }
}

val decode_aarch32_instrs_VORR_r_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VORR_r_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VORR_r_Op_A_txt(d, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2873) = {
    SEE = 2873;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VORR_r_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VORR_r_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VORR_r_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VORR_r_Op_A_txt(d, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2874) = {
    SEE = 2874;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VORR_r_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VPADAL_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VPADAL_Op_A_txt (d__arg, elements, esize, m, regs, is_unsigned) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    op2 : bits('esize) = undefined;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    let 'h = DIV(elements, 2);
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (h - 1) by 1 in inc) {
            op1 = Elem_read(D_read(m + r), 2 * e, esize);
            op2 = Elem_read(D_read(m + r), 2 * e + 1, esize);
            result = asl_Int(op1, is_unsigned) + asl_Int(op2, is_unsigned);
            D_set(d + r) = Elem_set(D_read(d + r), e, 2 * esize, Elem_read(D_read(d + r), e, 2 * esize) + result)
        }
    }
}

val decode_aarch32_instrs_VPADAL_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VPADAL_A1enc_A_txt (D, size, Vd, op, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = op == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VPADAL_Op_A_txt(d, elements, esize, m, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2875) = {
    SEE = 2875;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VPADAL_A1enc_A_txt(D, size, Vd, op, Q, M, Vm)
}

val decode_aarch32_instrs_VPADAL_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VPADAL_T1enc_A_txt (D, size, Vd, op, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = op == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VPADAL_Op_A_txt(d, elements, esize, m, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2876) = {
    SEE = 2876;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VPADAL_T1enc_A_txt(D, size, Vd, op, Q, M, Vm)
}

val execute_aarch32_instrs_VPADD_f_Op_A_txt : forall 'd 'elements 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n)) -> unit

function execute_aarch32_instrs_VPADD_f_Op_A_txt (d, elements, esize, m, n) = {
    CheckAdvSIMDEnabled();
    dest : bits(64) = undefined;
    let 'h = DIV(elements, 2);
    foreach (e from 0 to (h - 1) by 1 in inc) {
        dest = Elem_set(dest, e, esize, FPAdd(Elem_read(D_read(n), 2 * e, esize), Elem_read(D_read(n), 2 * e + 1, esize), StandardFPSCRValue()));
        dest = Elem_set(dest, e + h, esize, FPAdd(Elem_read(D_read(m), 2 * e, esize), Elem_read(D_read(m), 2 * e + 1, esize), StandardFPSCRValue()))
    };
    D_set(d) = dest
}

val decode_aarch32_instrs_VPADD_f_A1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VPADD_f_A1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VPADD_f_Op_A_txt(d, elements, esize, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2877) = {
    SEE = 2877;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VPADD_f_A1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VPADD_f_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VPADD_f_T1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VPADD_f_Op_A_txt(d, elements, esize, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2878) = {
    SEE = 2878;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VPADD_f_T1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VPADD_i_Op_A_txt : forall 'd 'elements 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n)) -> unit

function execute_aarch32_instrs_VPADD_i_Op_A_txt (d, elements, esize, m, n) = {
    CheckAdvSIMDEnabled();
    dest : bits(64) = undefined;
    let 'h = DIV(elements, 2);
    foreach (e from 0 to (h - 1) by 1 in inc) {
        dest = Elem_set(dest, e, esize, Elem_read(D_read(n), 2 * e, esize) + Elem_read(D_read(n), 2 * e + 1, esize));
        dest = Elem_set(dest, e + h, esize, Elem_read(D_read(m), 2 * e, esize) + Elem_read(D_read(m), 2 * e + 1, esize))
    };
    D_set(d) = dest
}

val decode_aarch32_instrs_VPADD_i_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VPADD_i_A1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 | Q == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VPADD_i_Op_A_txt(d, elements, esize, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2879) = {
    SEE = 2879;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VPADD_i_A1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VPADD_i_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VPADD_i_T1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 | Q == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VPADD_i_Op_A_txt(d, elements, esize, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2880) = {
    SEE = 2880;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VPADD_i_T1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VPADDL_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VPADDL_Op_A_txt (d__arg, elements, esize, m, regs, is_unsigned) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    op2 : bits('esize) = undefined;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    let 'h = DIV(elements, 2);
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (h - 1) by 1 in inc) {
            op1 = Elem_read(D_read(m + r), 2 * e, esize);
            op2 = Elem_read(D_read(m + r), 2 * e + 1, esize);
            result = asl_Int(op1, is_unsigned) + asl_Int(op2, is_unsigned);
            D_set(d + r) = Elem_set(D_read(d + r), e, 2 * esize, result[2 * esize - 1 .. 0])
        }
    }
}

val decode_aarch32_instrs_VPADDL_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VPADDL_A1enc_A_txt (D, size, Vd, op, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = op == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VPADDL_Op_A_txt(d, elements, esize, m, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2881) = {
    SEE = 2881;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VPADDL_A1enc_A_txt(D, size, Vd, op, Q, M, Vm)
}

val decode_aarch32_instrs_VPADDL_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VPADDL_T1enc_A_txt (D, size, Vd, op, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = op == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VPADDL_Op_A_txt(d, elements, esize, m, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2882) = {
    SEE = 2882;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VPADDL_T1enc_A_txt(D, size, Vd, op, Q, M, Vm)
}

val execute_aarch32_instrs_VPMAX_f_Op_A_txt : forall 'd 'elements 'esize 'm ('maximum : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), bool('maximum), int('n)) -> unit

function execute_aarch32_instrs_VPMAX_f_Op_A_txt (d, elements, esize, m, maximum, n) = {
    op1 : bits('esize) = undefined;
    op2 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    dest : bits(64) = undefined;
    let 'h = DIV(elements, 2);
    foreach (e from 0 to (h - 1) by 1 in inc) {
        op1 = Elem_read(D_read(n), 2 * e, esize);
        op2 = Elem_read(D_read(n), 2 * e + 1, esize);
        dest = Elem_set(dest, e, esize, if maximum then
          FPMax(op1, op2, StandardFPSCRValue())
        else
          FPMin(op1, op2, StandardFPSCRValue()));
        op1 = Elem_read(D_read(m), 2 * e, esize);
        op2 = Elem_read(D_read(m), 2 * e + 1, esize);
        dest = Elem_set(dest, e + h, esize, if maximum then
          FPMax(op1, op2, StandardFPSCRValue())
        else
          FPMin(op1, op2, StandardFPSCRValue()))
    };
    D_set(d) = dest
}

val decode_aarch32_instrs_VPMAX_f_A1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VPMAX_f_A1enc_A_txt (D, op, sz, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let maximum : bool = op == 0b0;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VPMAX_f_Op_A_txt(d, elements, esize, m, maximum, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2883) = {
    SEE = 2883;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 21, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VPMAX_f_A1enc_A_txt(D, op, sz, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VPMAX_f_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VPMAX_f_T1enc_A_txt (D, op, sz, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let maximum : bool = op == 0b0;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VPMAX_f_Op_A_txt(d, elements, esize, m, maximum, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2884) = {
    SEE = 2884;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 21, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VPMAX_f_T1enc_A_txt(D, op, sz, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VPMAX_i_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm ('maximum : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), bool('maximum), int('n), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VPMAX_i_Op_A_txt (d, elements, esize, m, maximum, n, is_unsigned) = {
    op1 : int = undefined;
    op2 : int = undefined;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    dest : bits(64) = undefined;
    let 'h = DIV(elements, 2);
    foreach (e from 0 to (h - 1) by 1 in inc) {
        op1 = asl_Int(Elem_read(D_read(n), 2 * e, esize), is_unsigned);
        op2 = asl_Int(Elem_read(D_read(n), 2 * e + 1, esize), is_unsigned);
        result = if maximum then Max(op1, op2) else Min(op1, op2);
        dest = Elem_set(dest, e, esize, result[esize - 1 .. 0]);
        op1 = asl_Int(Elem_read(D_read(m), 2 * e, esize), is_unsigned);
        op2 = asl_Int(Elem_read(D_read(m), 2 * e + 1, esize), is_unsigned);
        result = if maximum then Max(op1, op2) else Min(op1, op2);
        dest = Elem_set(dest, e + h, esize, result[esize - 1 .. 0])
    };
    D_set(d) = dest
}

val decode_aarch32_instrs_VPMAX_i_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VPMAX_i_A1enc_A_txt (U, D, size, Vn, Vd, N, M, op, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let maximum : bool = op == 0b0;
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VPMAX_i_Op_A_txt(d, elements, esize, m, maximum, n, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2885) = {
    SEE = 2885;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let op = Slice(__opcode, 4, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VPMAX_i_A1enc_A_txt(U, D, size, Vn, Vd, N, M, op, Vm)
}

val decode_aarch32_instrs_VPMAX_i_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VPMAX_i_T1enc_A_txt (U, D, size, Vn, Vd, N, M, op, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let maximum : bool = op == 0b0;
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VPMAX_i_Op_A_txt(d, elements, esize, m, maximum, n, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 2886) = {
    SEE = 2886;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let op = Slice(__opcode, 4, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VPMAX_i_T1enc_A_txt(U, D, size, Vn, Vd, N, M, op, Vm)
}

val execute_aarch32_instrs_VQABS_Op_A_txt : forall 'd 'elements 'esize 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VQABS_Op_A_txt (d__arg, elements, esize, m, regs) = {
    d : int = d__arg;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            result = Abs(SInt(Elem_read(D_read(m + r), e, esize)));
            sat : bool = undefined;
            let (__tup_0 : bits('esize), __tup_1 : bool) =
              SignedSatQ(result, esize)
            in
              {
                  D_set(d + r) = Elem_set(D_read(d + r), e, esize, __tup_0);
                  sat = __tup_1
              };
            if sat then {
                FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
            };
            ()
        }
    }
}

val decode_aarch32_instrs_VQABS_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQABS_A1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQABS_Op_A_txt(d, elements, esize, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, bitone, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2887) = {
    SEE = 2887;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQABS_A1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VQABS_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQABS_T1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQABS_Op_A_txt(d, elements, esize, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, bitone, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2888) = {
    SEE = 2888;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQABS_T1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_VQADD_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VQADD_Op_A_txt (d__arg, elements, esize, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    sum : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum = asl_Int(Elem_read(D_read(n + r), e, esize), is_unsigned) + asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned);
            sat : bool = undefined;
            let (__tup_0 : bits('esize), __tup_1 : bool) =
              SatQ(sum, esize, is_unsigned)
            in
              {
                  D_set(d + r) = Elem_set(D_read(d + r), e, esize, __tup_0);
                  sat = __tup_1
              };
            if sat then {
                FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
            };
            ()
        }
    }
}

val decode_aarch32_instrs_VQADD_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQADD_A1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQADD_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2889) = {
    SEE = 2889;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQADD_A1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VQADD_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQADD_T1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQADD_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2890) = {
    SEE = 2890;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQADD_T1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VQDMLAL_Op_A_txt : forall ('add : Bool) 'd 'elements 'esize 'index 'm 'n ('scalar_form : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('add), int('d), int('elements), int('esize), int('index), int('m), int('n), bool('scalar_form)) -> unit

function execute_aarch32_instrs_VQDMLAL_Op_A_txt (add, d__arg, elements, esize, index, m, n, scalar_form) = {
    d : int = d__arg;
    op1 : int = undefined;
    product : bits(2 * 'esize) = undefined;
    sat1 : bool = undefined;
    CheckAdvSIMDEnabled();
    op2 : int = undefined;
    if scalar_form then {
        op2 = SInt(Elem_read(Din_read(m), index, esize))
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if not_bool(scalar_form) then {
            op2 = SInt(Elem_read(Din_read(m), e, esize))
        };
        op1 = SInt(Elem_read(Din_read(n), e, esize));
        (product, sat1) = SignedSatQ(2 * op1 * op2, 2 * esize);
        result : int = undefined;
        if add then {
            result = SInt(Elem_read(Qin_read((d >> 1)), e, 2 * esize)) + SInt(product)
        } else {
            result = SInt(Elem_read(Qin_read((d >> 1)), e, 2 * esize)) - SInt(product)
        };
        let 'result = result;
        sat2 : bool = undefined;
        let (__tup_0 : bits(2 * 'esize), __tup_1 : bool) =
          SignedSatQ(result, 2 * esize)
        in
          {
              Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, __tup_0);
              sat2 = __tup_1
          };
        if sat1 | sat2 then {
            FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
        };
        ()
    }
}

val decode_aarch32_instrs_VQDMLAL_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMLAL_A1enc_A_txt (D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        index : int = undefined;
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let index = index;
        let add : bool = op == 0b0;
        let scalar_form : bool = false;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        execute_aarch32_instrs_VQDMLAL_Op_A_txt(add, d, elements, esize, index, m, n, scalar_form)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2891) = {
    SEE = 2891;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 9, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMLAL_A1enc_A_txt(D, size, Vn, Vd, op, N, M, Vm)
}

val decode_aarch32_instrs_VQDMLAL_A2enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMLAL_A2enc_A_txt (D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let add : bool = op == 0b0;
        let scalar_form : bool = true;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        esize : {|8, 16, 32|} = 8;
        elements : int = undefined;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 31)));
        execute_aarch32_instrs_VQDMLAL_Op_A_txt(add, d, elements, esize, index, m, n, scalar_form)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2892) = {
    SEE = 2892;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 10, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMLAL_A2enc_A_txt(D, size, Vn, Vd, op, N, M, Vm)
}

val decode_aarch32_instrs_VQDMLAL_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMLAL_T1enc_A_txt (D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        index : int = undefined;
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let index = index;
        let add : bool = op == 0b0;
        let scalar_form : bool = false;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        execute_aarch32_instrs_VQDMLAL_Op_A_txt(add, d, elements, esize, index, m, n, scalar_form)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2893) = {
    SEE = 2893;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 9, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMLAL_T1enc_A_txt(D, size, Vn, Vd, op, N, M, Vm)
}

val decode_aarch32_instrs_VQDMLAL_T2enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMLAL_T2enc_A_txt (D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let add : bool = op == 0b0;
        let scalar_form : bool = true;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        esize : {|8, 16, 32|} = 8;
        elements : int = undefined;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 31)));
        execute_aarch32_instrs_VQDMLAL_Op_A_txt(add, d, elements, esize, index, m, n, scalar_form)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2894) = {
    SEE = 2894;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 10, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMLAL_T2enc_A_txt(D, size, Vn, Vd, op, N, M, Vm)
}

val execute_aarch32_instrs_VQDMLSL_Op_A_txt : forall ('add : Bool) 'd 'elements 'esize 'index 'm 'n ('scalar_form : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('add), int('d), int('elements), int('esize), int('index), int('m), int('n), bool('scalar_form)) -> unit

function execute_aarch32_instrs_VQDMLSL_Op_A_txt (add, d__arg, elements, esize, index, m, n, scalar_form) = {
    d : int = d__arg;
    op1 : int = undefined;
    product : bits(2 * 'esize) = undefined;
    sat1 : bool = undefined;
    CheckAdvSIMDEnabled();
    op2 : int = undefined;
    if scalar_form then {
        op2 = SInt(Elem_read(Din_read(m), index, esize))
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if not_bool(scalar_form) then {
            op2 = SInt(Elem_read(Din_read(m), e, esize))
        };
        op1 = SInt(Elem_read(Din_read(n), e, esize));
        (product, sat1) = SignedSatQ(2 * op1 * op2, 2 * esize);
        result : int = undefined;
        if add then {
            result = SInt(Elem_read(Qin_read((d >> 1)), e, 2 * esize)) + SInt(product)
        } else {
            result = SInt(Elem_read(Qin_read((d >> 1)), e, 2 * esize)) - SInt(product)
        };
        let 'result = result;
        sat2 : bool = undefined;
        let (__tup_0 : bits(2 * 'esize), __tup_1 : bool) =
          SignedSatQ(result, 2 * esize)
        in
          {
              Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, __tup_0);
              sat2 = __tup_1
          };
        if sat1 | sat2 then {
            FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
        };
        ()
    }
}

val decode_aarch32_instrs_VQDMLSL_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMLSL_A1enc_A_txt (D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        index : int = undefined;
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let index = index;
        let add : bool = op == 0b0;
        let scalar_form : bool = false;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        execute_aarch32_instrs_VQDMLSL_Op_A_txt(add, d, elements, esize, index, m, n, scalar_form)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2895) = {
    SEE = 2895;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 9, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMLSL_A1enc_A_txt(D, size, Vn, Vd, op, N, M, Vm)
}

val decode_aarch32_instrs_VQDMLSL_A2enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMLSL_A2enc_A_txt (D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let add : bool = op == 0b0;
        let scalar_form : bool = true;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        esize : {|8, 16, 32|} = 8;
        elements : int = undefined;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 31)));
        execute_aarch32_instrs_VQDMLSL_Op_A_txt(add, d, elements, esize, index, m, n, scalar_form)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2896) = {
    SEE = 2896;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 10, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMLSL_A2enc_A_txt(D, size, Vn, Vd, op, N, M, Vm)
}

val decode_aarch32_instrs_VQDMLSL_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMLSL_T1enc_A_txt (D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        index : int = undefined;
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let index = index;
        let add : bool = op == 0b0;
        let scalar_form : bool = false;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        execute_aarch32_instrs_VQDMLSL_Op_A_txt(add, d, elements, esize, index, m, n, scalar_form)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2897) = {
    SEE = 2897;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 9, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMLSL_T1enc_A_txt(D, size, Vn, Vd, op, N, M, Vm)
}

val decode_aarch32_instrs_VQDMLSL_T2enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMLSL_T2enc_A_txt (D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let add : bool = op == 0b0;
        let scalar_form : bool = true;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        esize : {|8, 16, 32|} = 8;
        elements : int = undefined;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 31)));
        execute_aarch32_instrs_VQDMLSL_Op_A_txt(add, d, elements, esize, index, m, n, scalar_form)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2898) = {
    SEE = 2898;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 10, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMLSL_T2enc_A_txt(D, size, Vn, Vd, op, N, M, Vm)
}

val execute_aarch32_instrs_VQDMULH_Op_A_txt : forall 'd 'elements 'esize 'index 'm 'n 'regs ('scalar_form : Bool),
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('index), int('m), int('n), int('regs), bool('scalar_form)) -> unit

function execute_aarch32_instrs_VQDMULH_Op_A_txt (d__arg, elements, esize, index, m, n, regs, scalar_form) = {
    d : int = d__arg;
    op1 : int = undefined;
    result : bits('esize) = undefined;
    sat : bool = undefined;
    CheckAdvSIMDEnabled();
    op2 : int = undefined;
    if scalar_form then {
        op2 = SInt(Elem_read(D_read(m), index, esize))
    };
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if not_bool(scalar_form) then {
                op2 = SInt(Elem_read(D_read(m + r), e, esize))
            };
            op1 = SInt(Elem_read(D_read(n + r), e, esize));
            (result, sat) = SignedSatQ(((2 * op1 * op2) >> esize), esize);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result);
            if sat then {
                FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
            };
            ()
        }
    }
}

val decode_aarch32_instrs_VQDMULH_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMULH_A1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        index : int = undefined;
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b11 then {
            throw(Error_Undefined())
        };
        let index = index;
        let scalar_form : bool = false;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQDMULH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2899) = {
    SEE = 2899;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMULH_A1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VQDMULH_A2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMULH_A2enc_A_txt (Q, D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let scalar_form : bool = true;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        esize : {|8, 16, 32|} = 8;
        elements : int = undefined;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 31)));
        execute_aarch32_instrs_VQDMULH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2900) = {
    SEE = 2900;
    let Q = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMULH_A2enc_A_txt(Q, D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VQDMULH_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMULH_T1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        index : int = undefined;
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b11 then {
            throw(Error_Undefined())
        };
        let index = index;
        let scalar_form : bool = false;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQDMULH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2901) = {
    SEE = 2901;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMULH_T1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VQDMULH_T2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMULH_T2enc_A_txt (Q, D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let scalar_form : bool = true;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        esize : {|8, 16, 32|} = 8;
        elements : int = undefined;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 31)));
        execute_aarch32_instrs_VQDMULH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2902) = {
    SEE = 2902;
    let Q = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMULH_T2enc_A_txt(Q, D, size, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VQDMULL_Op_A_txt : forall 'd 'elements 'esize 'index 'm 'n ('scalar_form : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('index), int('m), int('n), bool('scalar_form)) -> unit

function execute_aarch32_instrs_VQDMULL_Op_A_txt (d__arg, elements, esize, index, m, n, scalar_form) = {
    d : int = d__arg;
    op1 : int = undefined;
    product : bits(2 * 'esize) = undefined;
    sat : bool = undefined;
    CheckAdvSIMDEnabled();
    op2 : int = undefined;
    if scalar_form then {
        op2 = SInt(Elem_read(Din_read(m), index, esize))
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if not_bool(scalar_form) then {
            op2 = SInt(Elem_read(Din_read(m), e, esize))
        };
        op1 = SInt(Elem_read(Din_read(n), e, esize));
        (product, sat) = SignedSatQ(2 * op1 * op2, 2 * esize);
        Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, product);
        if sat then {
            FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
        };
        ()
    }
}

val decode_aarch32_instrs_VQDMULL_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMULL_A1enc_A_txt (D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        index : int = undefined;
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let index = index;
        let scalar_form : bool = false;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        execute_aarch32_instrs_VQDMULL_Op_A_txt(d, elements, esize, index, m, n, scalar_form)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2903) = {
    SEE = 2903;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMULL_A1enc_A_txt(D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VQDMULL_A2enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMULL_A2enc_A_txt (D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let scalar_form : bool = true;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        esize : {|8, 16, 32|} = 8;
        elements : int = undefined;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 31)));
        execute_aarch32_instrs_VQDMULL_Op_A_txt(d, elements, esize, index, m, n, scalar_form)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2904) = {
    SEE = 2904;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMULL_A2enc_A_txt(D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VQDMULL_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMULL_T1enc_A_txt (D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        index : int = undefined;
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let index = index;
        let scalar_form : bool = false;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        execute_aarch32_instrs_VQDMULL_Op_A_txt(d, elements, esize, index, m, n, scalar_form)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2905) = {
    SEE = 2905;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMULL_T1enc_A_txt(D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VQDMULL_T2enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQDMULL_T2enc_A_txt (D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let scalar_form : bool = true;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        esize : {|8, 16, 32|} = 8;
        elements : int = undefined;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 31)));
        execute_aarch32_instrs_VQDMULL_Op_A_txt(d, elements, esize, index, m, n, scalar_form)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2906) = {
    SEE = 2906;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQDMULL_T2enc_A_txt(D, size, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VQMOVN_Op_A_txt : forall 'd ('dest_unsigned : Bool) 'elements 'esize 'm ('src_unsigned : Bool),
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), bool('dest_unsigned), int('elements), int('esize), int('m), bool('src_unsigned)) -> unit

function execute_aarch32_instrs_VQMOVN_Op_A_txt (d__arg, dest_unsigned, elements, esize, m, src_unsigned) = {
    d : int = d__arg;
    operand : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        operand = asl_Int(Elem_read(Qin_read((m >> 1)), e, 2 * esize), src_unsigned);
        sat : bool = undefined;
        let (__tup_0 : bits('esize), __tup_1 : bool) =
          SatQ(operand, esize, dest_unsigned)
        in
          {
              D_set(d) = Elem_set(D_read(d), e, esize, __tup_0);
              sat = __tup_1
          };
        if sat then {
            FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
        };
        ()
    }
}

val decode_aarch32_instrs_VQMOVN_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQMOVN_A1enc_A_txt (D, size, Vd, op, M, Vm) = {
    if ConditionPassed() then {
        if op == 0b00 then {
            throw(Error_See("VMOVN"))
        };
        if size == 0b11 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let src_unsigned : bool = op == 0b11;
        let dest_unsigned : bool = [op[0]] == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VQMOVN_Op_A_txt(d, dest_unsigned, elements, esize, m, src_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2907) = {
    SEE = 2907;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 6, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQMOVN_A1enc_A_txt(D, size, Vd, op, M, Vm)
}

val decode_aarch32_instrs_VQMOVN_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQMOVN_T1enc_A_txt (D, size, Vd, op, M, Vm) = {
    if ConditionPassed() then {
        if op == 0b00 then {
            throw(Error_See("VMOVN"))
        };
        if size == 0b11 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let src_unsigned : bool = op == 0b11;
        let dest_unsigned : bool = [op[0]] == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VQMOVN_Op_A_txt(d, dest_unsigned, elements, esize, m, src_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2908) = {
    SEE = 2908;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 6, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQMOVN_T1enc_A_txt(D, size, Vd, op, M, Vm)
}

val execute_aarch32_instrs_VQNEG_Op_A_txt : forall 'd 'elements 'esize 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VQNEG_Op_A_txt (d__arg, elements, esize, m, regs) = {
    d : int = d__arg;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            result = negate(SInt(Elem_read(D_read(m + r), e, esize)));
            sat : bool = undefined;
            let (__tup_0 : bits('esize), __tup_1 : bool) =
              SignedSatQ(result, esize)
            in
              {
                  D_set(d + r) = Elem_set(D_read(d + r), e, esize, __tup_0);
                  sat = __tup_1
              };
            if sat then {
                FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
            };
            ()
        }
    }
}

val decode_aarch32_instrs_VQNEG_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQNEG_A1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQNEG_Op_A_txt(d, elements, esize, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, bitone, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2909) = {
    SEE = 2909;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQNEG_A1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VQNEG_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQNEG_T1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQNEG_Op_A_txt(d, elements, esize, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, bitone, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2910) = {
    SEE = 2910;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQNEG_T1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_VQRDMULH_Op_A_txt : forall 'd 'elements 'esize 'index 'm 'n 'regs ('scalar_form : Bool),
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('index), int('m), int('n), int('regs), bool('scalar_form)) -> unit

function execute_aarch32_instrs_VQRDMULH_Op_A_txt (d__arg, elements, esize, index, m, n, regs, scalar_form) = {
    d : int = d__arg;
    op1 : int = undefined;
    result : bits('esize) = undefined;
    sat : bool = undefined;
    CheckAdvSIMDEnabled();
    let 'round_const = (1 << (esize - 1));
    op2 : int = undefined;
    if scalar_form then {
        op2 = SInt(Elem_read(D_read(m), index, esize))
    };
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = SInt(Elem_read(D_read(n + r), e, esize));
            if not_bool(scalar_form) then {
                op2 = SInt(Elem_read(D_read(m + r), e, esize))
            };
            (result, sat) = SignedSatQ(((2 * op1 * op2 + round_const) >> esize), esize);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result);
            if sat then {
                FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
            };
            ()
        }
    }
}

val decode_aarch32_instrs_VQRDMULH_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRDMULH_A1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        index : int = undefined;
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b11 then {
            throw(Error_Undefined())
        };
        let index = index;
        let scalar_form : bool = false;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQRDMULH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2911) = {
    SEE = 2911;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRDMULH_A1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VQRDMULH_A2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRDMULH_A2enc_A_txt (Q, D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let scalar_form : bool = true;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        esize : {|8, 16, 32|} = 8;
        elements : int = undefined;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 31)));
        execute_aarch32_instrs_VQRDMULH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2912) = {
    SEE = 2912;
    let Q = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRDMULH_A2enc_A_txt(Q, D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VQRDMULH_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRDMULH_T1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        index : int = undefined;
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b11 then {
            throw(Error_Undefined())
        };
        let index = index;
        let scalar_form : bool = false;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQRDMULH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2913) = {
    SEE = 2913;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRDMULH_T1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VQRDMULH_T2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRDMULH_T2enc_A_txt (Q, D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if size == 0b00 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let scalar_form : bool = true;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        esize : {|8, 16, 32|} = 8;
        elements : int = undefined;
        m : int = undefined;
        index : int = undefined;
        if size == 0b01 then {
            esize = 16;
            elements = 4;
            m = UInt(Vm[2 .. 0]);
            index = UInt(M @ [Vm[3]])
        };
        if size == 0b10 then {
            esize = 32;
            elements = 2;
            m = UInt(Vm);
            index = UInt(M)
        };
        let 'm = m;
        let 'index = index;
        let 'esize = esize;
        let 'elements = elements;
        assert(constraint((0 <= 'm & 'm <= 31)));
        execute_aarch32_instrs_VQRDMULH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2914) = {
    SEE = 2914;
    let Q = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRDMULH_T2enc_A_txt(Q, D, size, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VQRDMLAH_Op_A_txt : forall 'd 'elements 'esize 'index 'm 'n 'regs ('scalar_form : Bool),
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('index), int('m), int('n), int('regs), bool('scalar_form)) -> unit

function execute_aarch32_instrs_VQRDMLAH_Op_A_txt (d__arg, elements, esize, index, m, n, regs, scalar_form) = {
    d : int = d__arg;
    op1 : int = undefined;
    op3 : int = undefined;
    result : bits('esize) = undefined;
    sat : bool = undefined;
    CheckAdvSIMDEnabled();
    let 'round_const = (1 << (esize - 1));
    op2 : int = undefined;
    if scalar_form then {
        op2 = SInt(Elem_read(D_read(m), index, esize))
    };
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = SInt(Elem_read(D_read(n + r), e, esize));
            op3 = (SInt(Elem_read(D_read(d + r), e, esize)) << esize);
            if not_bool(scalar_form) then {
                op2 = SInt(Elem_read(D_read(m + r), e, esize))
            };
            (result, sat) = SignedSatQ(((op3 + 2 * (op1 * op2) + round_const) >> esize), esize);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result);
            if sat then {
                FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
            };
            ()
        }
    }
}

val decode_aarch32_instrs_VQRDMLAH_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRDMLAH_A1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    index : int = undefined;
    if not_bool(HaveQRDMLAHExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let index = index;
    let add : bool = true;
    let scalar_form : bool = false;
    let 'esize = (8 << UInt(size));
    let 'elements = DIV(64, esize);
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    execute_aarch32_instrs_VQRDMLAH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2915) = {
    SEE = 2915;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRDMLAH_A1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VQRDMLAH_A2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRDMLAH_A2enc_A_txt (Q, D, size, Vn, Vd, N, M, Vm) = {
    if not_bool(HaveQRDMLAHExt()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_See("Related encodings"))
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let add : bool = true;
    let scalar_form : bool = true;
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'regs = if Q == 0b0 then 1 else 2;
    esize : {|8, 16, 32|} = 8;
    elements : int = undefined;
    m : int = undefined;
    index : int = undefined;
    if size == 0b01 then {
        esize = 16;
        elements = 4;
        m = UInt(Vm[2 .. 0]);
        index = UInt(M @ [Vm[3]])
    };
    if size == 0b10 then {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M)
    };
    let 'm = m;
    let 'index = index;
    let 'esize = esize;
    let 'elements = elements;
    assert(constraint((0 <= 'm & 'm <= 31)));
    execute_aarch32_instrs_VQRDMLAH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2916) = {
    SEE = 2916;
    let Q = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRDMLAH_A2enc_A_txt(Q, D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VQRDMLAH_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRDMLAH_T1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    index : int = undefined;
    if not_bool(HaveQRDMLAHExt()) then {
        throw(Error_Undefined())
    };
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let index = index;
    let add : bool = true;
    let scalar_form : bool = false;
    let 'esize = (8 << UInt(size));
    let 'elements = DIV(64, esize);
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    execute_aarch32_instrs_VQRDMLAH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2917) = {
    SEE = 2917;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRDMLAH_T1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VQRDMLAH_T2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRDMLAH_T2enc_A_txt (Q, D, size, Vn, Vd, N, M, Vm) = {
    if not_bool(HaveQRDMLAHExt()) then {
        throw(Error_Undefined())
    };
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if size == 0b11 then {
        throw(Error_See("Related encodings"))
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let add : bool = true;
    let scalar_form : bool = true;
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'regs = if Q == 0b0 then 1 else 2;
    esize : {|8, 16, 32|} = 8;
    elements : int = undefined;
    m : int = undefined;
    index : int = undefined;
    if size == 0b01 then {
        esize = 16;
        elements = 4;
        m = UInt(Vm[2 .. 0]);
        index = UInt(M @ [Vm[3]])
    };
    if size == 0b10 then {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M)
    };
    let 'm = m;
    let 'index = index;
    let 'esize = esize;
    let 'elements = elements;
    assert(constraint((0 <= 'm & 'm <= 31)));
    execute_aarch32_instrs_VQRDMLAH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2918) = {
    SEE = 2918;
    let Q = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRDMLAH_T2enc_A_txt(Q, D, size, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VQRDMLSH_Op_A_txt : forall 'd 'elements 'esize 'index 'm 'n 'regs ('scalar_form : Bool),
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('index), int('m), int('n), int('regs), bool('scalar_form)) -> unit

function execute_aarch32_instrs_VQRDMLSH_Op_A_txt (d__arg, elements, esize, index, m, n, regs, scalar_form) = {
    d : int = d__arg;
    op1 : int = undefined;
    op3 : int = undefined;
    result : bits('esize) = undefined;
    sat : bool = undefined;
    CheckAdvSIMDEnabled();
    let 'round_const = (1 << (esize - 1));
    op2 : int = undefined;
    if scalar_form then {
        op2 = SInt(Elem_read(D_read(m), index, esize))
    };
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = SInt(Elem_read(D_read(n + r), e, esize));
            op3 = (SInt(Elem_read(D_read(d + r), e, esize)) << esize);
            if not_bool(scalar_form) then {
                op2 = SInt(Elem_read(D_read(m + r), e, esize))
            };
            (result, sat) = SignedSatQ(((op3 - 2 * (op1 * op2) + round_const) >> esize), esize);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result);
            if sat then {
                FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
            };
            ()
        }
    }
}

val decode_aarch32_instrs_VQRDMLSH_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRDMLSH_A1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    index : int = undefined;
    if not_bool(HaveQRDMLAHExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let index = index;
    let add : bool = false;
    let scalar_form : bool = false;
    let 'esize = (8 << UInt(size));
    let 'elements = DIV(64, esize);
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    execute_aarch32_instrs_VQRDMLSH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2919) = {
    SEE = 2919;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRDMLSH_A1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VQRDMLSH_A2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRDMLSH_A2enc_A_txt (Q, D, size, Vn, Vd, N, M, Vm) = {
    if not_bool(HaveQRDMLAHExt()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_See("Related encodings"))
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let add : bool = false;
    let scalar_form : bool = true;
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'regs = if Q == 0b0 then 1 else 2;
    esize : {|8, 16, 32|} = 8;
    elements : int = undefined;
    m : int = undefined;
    index : int = undefined;
    if size == 0b01 then {
        esize = 16;
        elements = 4;
        m = UInt(Vm[2 .. 0]);
        index = UInt(M @ [Vm[3]])
    };
    if size == 0b10 then {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M)
    };
    let 'm = m;
    let 'index = index;
    let 'esize = esize;
    let 'elements = elements;
    assert(constraint((0 <= 'm & 'm <= 31)));
    execute_aarch32_instrs_VQRDMLSH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2920) = {
    SEE = 2920;
    let Q = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRDMLSH_A2enc_A_txt(Q, D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VQRDMLSH_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRDMLSH_T1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    index : int = undefined;
    if not_bool(HaveQRDMLAHExt()) then {
        throw(Error_Undefined())
    };
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let index = index;
    let add : bool = false;
    let scalar_form : bool = false;
    let 'esize = (8 << UInt(size));
    let 'elements = DIV(64, esize);
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    execute_aarch32_instrs_VQRDMLSH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2921) = {
    SEE = 2921;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRDMLSH_T1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VQRDMLSH_T2enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRDMLSH_T2enc_A_txt (Q, D, size, Vn, Vd, N, M, Vm) = {
    if not_bool(HaveQRDMLAHExt()) then {
        throw(Error_Undefined())
    };
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if size == 0b11 then {
        throw(Error_See("Related encodings"))
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let add : bool = false;
    let scalar_form : bool = true;
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'regs = if Q == 0b0 then 1 else 2;
    esize : {|8, 16, 32|} = 8;
    m : int = undefined;
    index : int = undefined;
    elements : int = undefined;
    if size == 0b01 then {
        esize = 16;
        elements = 4;
        m = UInt(Vm[2 .. 0]);
        index = UInt(M @ [Vm[3]])
    };
    if size == 0b10 then {
        esize = 32;
        elements = 2;
        m = UInt(Vm);
        index = UInt(M)
    };
    let 'm = m;
    let 'index = index;
    let 'esize = esize;
    let 'elements = elements;
    assert(constraint((0 <= 'm & 'm <= 31)));
    execute_aarch32_instrs_VQRDMLSH_Op_A_txt(d, elements, esize, index, m, n, regs, scalar_form)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2922) = {
    SEE = 2922;
    let Q = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRDMLSH_T2enc_A_txt(Q, D, size, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VQRSHL_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VQRSHL_Op_A_txt (d__arg, elements, esize, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    operand : int = undefined;
    result : bits('esize) = undefined;
    round_const : int = undefined;
    sat : bool = undefined;
    shift : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            shift = SInt(Elem_read(D_read(n + r), e, esize)[7 .. 0]);
            round_const = (1 << (negate(1) - shift));
            operand = asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned);
            (result, sat) = SatQ(((operand + round_const) << shift), esize, is_unsigned);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result);
            if sat then {
                FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
            };
            ()
        }
    }
}

val decode_aarch32_instrs_VQRSHL_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRSHL_A1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vm[0]] == 0b1) | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQRSHL_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2923) = {
    SEE = 2923;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRSHL_A1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VQRSHL_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRSHL_T1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vm[0]] == 0b1) | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQRSHL_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2924) = {
    SEE = 2924;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRSHL_T1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VQRSHRN_Op_A_txt : forall 'd ('dest_unsigned : Bool) 'elements 'esize 'm 'shift_amount ('src_unsigned : Bool),
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32} & 'elements in {2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), bool('dest_unsigned), int('elements), int('esize), int('m), int('shift_amount), bool('src_unsigned)) -> unit

function execute_aarch32_instrs_VQRSHRN_Op_A_txt (d__arg, dest_unsigned, elements, esize, m, shift_amount, src_unsigned) = {
    d : int = d__arg;
    operand : int = undefined;
    result : bits('esize) = undefined;
    sat : bool = undefined;
    CheckAdvSIMDEnabled();
    let 'round_const = (1 << (shift_amount - 1));
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        operand = asl_Int(Elem_read(Qin_read((m >> 1)), e, 2 * esize), src_unsigned);
        (result, sat) = SatQ(((operand + round_const) >> shift_amount), esize, dest_unsigned);
        D_set(d) = Elem_set(D_read(d), e, esize, result);
        if sat then {
            FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
        };
        ()
    }
}

val decode_aarch32_instrs_VQRSHRN_A1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRSHRN_A1enc_A_txt (U, D, imm6, Vd, op, M, Vm) = {
    if ConditionPassed() then {
        if (match imm6 {
          [bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if U == 0b0 & op == 0b0 then {
            throw(Error_See("VRSHRN"))
        };
        if [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        shift_amount : int = undefined;
        match imm6 {
          [bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let src_unsigned : bool = U == 0b1 & op == 0b1;
        let dest_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VQRSHRN_Op_A_txt(d, dest_unsigned, elements, esize, m, shift_amount, src_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, bitzero, bitone, _, bitone, _, _, _, _] as __opcode)) if SEE < 2925) = {
    SEE = 2925;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRSHRN_A1enc_A_txt(U, D, imm6, Vd, op, M, Vm)
}

val decode_aarch32_instrs_VQRSHRN_T1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQRSHRN_T1enc_A_txt (U, D, imm6, Vd, op, M, Vm) = {
    if ConditionPassed() then {
        if (match imm6 {
          [bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if U == 0b0 & op == 0b0 then {
            throw(Error_See("VRSHRN"))
        };
        if [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        shift_amount : int = undefined;
        match imm6 {
          [bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let src_unsigned : bool = U == 0b1 & op == 0b1;
        let dest_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VQRSHRN_Op_A_txt(d, dest_unsigned, elements, esize, m, shift_amount, src_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, bitzero, bitone, _, bitone, _, _, _, _] as __opcode)) if SEE < 2926) = {
    SEE = 2926;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQRSHRN_T1enc_A_txt(U, D, imm6, Vd, op, M, Vm)
}

val execute_aarch32_instrs_VQSHL_i_Op_A_txt : forall 'd ('dest_unsigned : Bool) 'elements 'esize 'm 'regs 'shift_amount ('src_unsigned : Bool),
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 'elements in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), bool('dest_unsigned), int('elements), int('esize), int('m), int('regs), int('shift_amount), bool('src_unsigned)) -> unit

function execute_aarch32_instrs_VQSHL_i_Op_A_txt (d__arg, dest_unsigned, elements, esize, m, regs, shift_amount, src_unsigned) = {
    d : int = d__arg;
    operand : int = undefined;
    result : bits('esize) = undefined;
    sat : bool = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            operand = asl_Int(Elem_read(D_read(m + r), e, esize), src_unsigned);
            (result, sat) = SatQ((operand << shift_amount), esize, dest_unsigned);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result);
            if sat then {
                FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
            };
            ()
        }
    }
}

val decode_aarch32_instrs_VQSHL_i_A1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQSHL_i_A1enc_A_txt (U, D, imm6, Vd, op, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if U == 0b0 & op == 0b0 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = UInt(imm6) - 8
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = UInt(imm6) - 16
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = UInt(imm6) - 32
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let src_unsigned : bool = U == 0b1 & op == 0b1;
        let dest_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VQSHL_i_Op_A_txt(d, dest_unsigned, elements, 8, m, regs, shift_amount, src_unsigned)
          },
          16 => {
              execute_aarch32_instrs_VQSHL_i_Op_A_txt(d, dest_unsigned, elements, 16, m, regs, shift_amount, src_unsigned)
          },
          32 => {
              execute_aarch32_instrs_VQSHL_i_Op_A_txt(d, dest_unsigned, elements, 32, m, regs, shift_amount, src_unsigned)
          },
          64 => {
              execute_aarch32_instrs_VQSHL_i_Op_A_txt(d, dest_unsigned, elements, 64, m, regs, shift_amount, src_unsigned)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2927) = {
    SEE = 2927;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 1);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQSHL_i_A1enc_A_txt(U, D, imm6, Vd, op, L, Q, M, Vm)
}

val decode_aarch32_instrs_VQSHL_i_T1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQSHL_i_T1enc_A_txt (U, D, imm6, Vd, op, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if U == 0b0 & op == 0b0 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = UInt(imm6) - 8
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = UInt(imm6) - 16
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = UInt(imm6) - 32
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let src_unsigned : bool = U == 0b1 & op == 0b1;
        let dest_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VQSHL_i_Op_A_txt(d, dest_unsigned, elements, 8, m, regs, shift_amount, src_unsigned)
          },
          16 => {
              execute_aarch32_instrs_VQSHL_i_Op_A_txt(d, dest_unsigned, elements, 16, m, regs, shift_amount, src_unsigned)
          },
          32 => {
              execute_aarch32_instrs_VQSHL_i_Op_A_txt(d, dest_unsigned, elements, 32, m, regs, shift_amount, src_unsigned)
          },
          64 => {
              execute_aarch32_instrs_VQSHL_i_Op_A_txt(d, dest_unsigned, elements, 64, m, regs, shift_amount, src_unsigned)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2928) = {
    SEE = 2928;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 1);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQSHL_i_T1enc_A_txt(U, D, imm6, Vd, op, L, Q, M, Vm)
}

val execute_aarch32_instrs_VQSHL_r_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VQSHL_r_Op_A_txt (d__arg, elements, esize, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    operand : int = undefined;
    result : bits('esize) = undefined;
    sat : bool = undefined;
    shift : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            shift = SInt(Elem_read(D_read(n + r), e, esize)[7 .. 0]);
            operand = asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned);
            (result, sat) = SatQ((operand << shift), esize, is_unsigned);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result);
            if sat then {
                FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
            };
            ()
        }
    }
}

val decode_aarch32_instrs_VQSHL_r_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQSHL_r_A1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vm[0]] == 0b1) | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQSHL_r_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2929) = {
    SEE = 2929;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQSHL_r_A1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VQSHL_r_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQSHL_r_T1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vm[0]] == 0b1) | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQSHL_r_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2930) = {
    SEE = 2930;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQSHL_r_T1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VQSHRN_Op_A_txt : forall 'd ('dest_unsigned : Bool) 'elements 'esize 'm 'shift_amount ('src_unsigned : Bool),
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32} & 'elements in {2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), bool('dest_unsigned), int('elements), int('esize), int('m), int('shift_amount), bool('src_unsigned)) -> unit

function execute_aarch32_instrs_VQSHRN_Op_A_txt (d__arg, dest_unsigned, elements, esize, m, shift_amount, src_unsigned) = {
    d : int = d__arg;
    operand : int = undefined;
    result : bits('esize) = undefined;
    sat : bool = undefined;
    CheckAdvSIMDEnabled();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        operand = asl_Int(Elem_read(Qin_read((m >> 1)), e, 2 * esize), src_unsigned);
        (result, sat) = SatQ((operand >> shift_amount), esize, dest_unsigned);
        D_set(d) = Elem_set(D_read(d), e, esize, result);
        if sat then {
            FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
        };
        ()
    }
}

val decode_aarch32_instrs_VQSHRN_A1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQSHRN_A1enc_A_txt (U, D, imm6, Vd, op, M, Vm) = {
    if ConditionPassed() then {
        if (match imm6 {
          [bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if U == 0b0 & op == 0b0 then {
            throw(Error_See("VSHRN"))
        };
        if [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        shift_amount : int = undefined;
        match imm6 {
          [bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let src_unsigned : bool = U == 0b1 & op == 0b1;
        let dest_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VQSHRN_Op_A_txt(d, dest_unsigned, elements, esize, m, shift_amount, src_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if SEE < 2931) = {
    SEE = 2931;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQSHRN_A1enc_A_txt(U, D, imm6, Vd, op, M, Vm)
}

val decode_aarch32_instrs_VQSHRN_T1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQSHRN_T1enc_A_txt (U, D, imm6, Vd, op, M, Vm) = {
    if ConditionPassed() then {
        if (match imm6 {
          [bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if U == 0b0 & op == 0b0 then {
            throw(Error_See("VSHRN"))
        };
        if [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        shift_amount : int = undefined;
        match imm6 {
          [bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let src_unsigned : bool = U == 0b1 & op == 0b1;
        let dest_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VQSHRN_Op_A_txt(d, dest_unsigned, elements, esize, m, shift_amount, src_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if SEE < 2932) = {
    SEE = 2932;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQSHRN_T1enc_A_txt(U, D, imm6, Vd, op, M, Vm)
}

val execute_aarch32_instrs_VQSUB_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VQSUB_Op_A_txt (d__arg, elements, esize, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    diff : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            diff = asl_Int(Elem_read(D_read(n + r), e, esize), is_unsigned) - asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned);
            sat : bool = undefined;
            let (__tup_0 : bits('esize), __tup_1 : bool) =
              SatQ(diff, esize, is_unsigned)
            in
              {
                  D_set(d + r) = Elem_set(D_read(d + r), e, esize, __tup_0);
                  sat = __tup_1
              };
            if sat then {
                FPSCR_write() = [FPSCR_read__1() with QC = 0b1]
            };
            ()
        }
    }
}

val decode_aarch32_instrs_VQSUB_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQSUB_A1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQSUB_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2933) = {
    SEE = 2933;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQSUB_A1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VQSUB_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VQSUB_T1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VQSUB_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2934) = {
    SEE = 2934;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VQSUB_T1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VRADDHN_Op_A_txt : forall 'd 'elements 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n)) -> unit

function execute_aarch32_instrs_VRADDHN_Op_A_txt (d__arg, elements, esize, m, n) = {
    d : int = d__arg;
    result : bits(2 * 'esize) = undefined;
    CheckAdvSIMDEnabled();
    let 'round_const = (1 << (esize - 1));
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_read(Qin_read((n >> 1)), e, 2 * esize) + Elem_read(Qin_read((m >> 1)), e, 2 * esize) + round_const;
        D_set(d) = Elem_set(D_read(d), e, esize, result[2 * esize - 1 .. esize])
    }
}

val decode_aarch32_instrs_VRADDHN_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRADDHN_A1enc_A_txt (D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vn[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VRADDHN_Op_A_txt(d, elements, esize, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2935) = {
    SEE = 2935;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRADDHN_A1enc_A_txt(D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VRADDHN_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRADDHN_T1enc_A_txt (D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vn[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VRADDHN_Op_A_txt(d, elements, esize, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2936) = {
    SEE = 2936;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRADDHN_T1enc_A_txt(D, size, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VRECPE_Op_A_txt : forall 'd 'elements 'esize ('floating_point : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('floating_point), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VRECPE_Op_A_txt (d__arg, elements, esize, floating_point, m, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if floating_point then {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPRecipEstimate(Elem_read(D_read(m + r), e, esize), StandardFPSCRValue()))
            } else {
                assert(constraint('esize == 32));
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, UnsignedRecipEstimate(Elem_read(D_read(m + r), e, esize)))
            }
        }
    }
}

val decode_aarch32_instrs_VRECPE_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRECPE_A1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & (not_bool(HaveFP16Ext()) | F == 0b0) | size == 0b00 | size == 0b11 then {
            throw(Error_Undefined())
        };
        let floating_point : bool = F == 0b1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match size {
          0b01 => {
              esize = 16;
              elements = 4
          },
          0b10 => {
              esize = 32;
              elements = 2
          },
          _ => ()
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VRECPE_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, _, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2937) = {
    SEE = 2937;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 8, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRECPE_A1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val decode_aarch32_instrs_VRECPE_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRECPE_T1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & (not_bool(HaveFP16Ext()) | F == 0b0) | size == 0b00 | size == 0b11 then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let floating_point : bool = F == 0b1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match size {
          0b01 => {
              esize = 16;
              elements = 4
          },
          0b10 => {
              esize = 32;
              elements = 2
          },
          _ => ()
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VRECPE_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, _, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2938) = {
    SEE = 2938;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 8, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRECPE_T1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val execute_aarch32_instrs_VRECPS_Op_A_txt : forall 'd 'elements 'esize 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VRECPS_Op_A_txt (d__arg, elements, esize, m, n, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPRecipStep(Elem_read(D_read(n + r), e, esize), Elem_read(D_read(m + r), e, esize)))
        }
    }
}

val decode_aarch32_instrs_VRECPS_A1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRECPS_A1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VRECPS_Op_A_txt(d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2939) = {
    SEE = 2939;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRECPS_A1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VRECPS_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRECPS_T1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VRECPS_Op_A_txt(d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2940) = {
    SEE = 2940;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRECPS_T1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VREV16_Op_A_txt : forall 'containers 'd 'elements_per_container 'esize 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('containers), int('d), int('elements_per_container), int('esize), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VREV16_Op_A_txt (containers, d, elements_per_container, esize, m, regs) = {
    CheckAdvSIMDEnabled();
    result : bits(64) = undefined;
    element : int = undefined;
    rev_element : int = undefined;
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        element = 0;
        foreach (c from 0 to (containers - 1) by 1 in inc) {
            rev_element = element + elements_per_container - 1;
            foreach (e from 0 to (elements_per_container - 1) by 1 in inc) {
                let 'rev_element = rev_element in
                  {
                      let 'element = element;
                      result = Elem_set(result, rev_element, esize, Elem_read(D_read(m + r), element, esize))
                  };
                element = element + 1;
                rev_element = rev_element - 1
            }
        };
        D_set(d + r) = result
    }
}

val decode_aarch32_instrs_VREV16_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VREV16_A1enc_A_txt (D, size, Vd, op, Q, M, Vm) = {
    if ConditionPassed() then {
        if UInt(op) + UInt(size) >= 3 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        container_size : {|16, 32, 64|} = 16;
        match op {
          0b10 => {
              container_size = 16
          },
          0b01 => {
              container_size = 32
          },
          0b00 => {
              container_size = 64
          },
          _ => ()
        };
        let 'container_size = container_size;
        let 'containers = DIV(64, container_size);
        let 'elements_per_container = DIV(container_size, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VREV16_Op_A_txt(containers, d, elements_per_container, esize, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2941) = {
    SEE = 2941;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 7, 2);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VREV16_A1enc_A_txt(D, size, Vd, op, Q, M, Vm)
}

val decode_aarch32_instrs_VREV16_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VREV16_T1enc_A_txt (D, size, Vd, op, Q, M, Vm) = {
    if ConditionPassed() then {
        if UInt(op) + UInt(size) >= 3 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        container_size : {|16, 32, 64|} = 16;
        match op {
          0b10 => {
              container_size = 16
          },
          0b01 => {
              container_size = 32
          },
          0b00 => {
              container_size = 64
          },
          _ => ()
        };
        let 'container_size = container_size;
        let 'containers = DIV(64, container_size);
        let 'elements_per_container = DIV(container_size, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VREV16_Op_A_txt(containers, d, elements_per_container, esize, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2942) = {
    SEE = 2942;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 7, 2);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VREV16_T1enc_A_txt(D, size, Vd, op, Q, M, Vm)
}

val execute_aarch32_instrs_VRHADD_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VRHADD_Op_A_txt (d__arg, elements, esize, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    op1 : int = undefined;
    op2 : int = undefined;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = asl_Int(Elem_read(D_read(n + r), e, esize), is_unsigned);
            op2 = asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned);
            result = op1 + op2 + 1;
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result[esize .. 1])
        }
    }
}

val decode_aarch32_instrs_VRHADD_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRHADD_A1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VRHADD_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2943) = {
    SEE = 2943;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRHADD_A1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VRHADD_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRHADD_T1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VRHADD_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2944) = {
    SEE = 2944;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRHADD_T1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VRSHL_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VRSHL_Op_A_txt (d__arg, elements, esize, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    result : int = undefined;
    round_const : int = undefined;
    shift : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            shift = SInt(Elem_read(D_read(n + r), e, esize)[7 .. 0]);
            round_const = (1 << (negate(shift) - 1));
            result = ((asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned) + round_const) << shift);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result[esize - 1 .. 0])
        }
    }
}

val decode_aarch32_instrs_VRSHL_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSHL_A1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vm[0]] == 0b1) | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VRSHL_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2945) = {
    SEE = 2945;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSHL_A1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VRSHL_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSHL_T1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vm[0]] == 0b1) | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VRSHL_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2946) = {
    SEE = 2946;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSHL_T1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VRSHR_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'regs 'shift_amount,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 'elements in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs), int('shift_amount), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VRSHR_Op_A_txt (d__arg, elements, esize, m, regs, shift_amount, is_unsigned) = {
    d : int = d__arg;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    let 'round_const = (1 << (shift_amount - 1));
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            result = ((asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned) + round_const) >> shift_amount);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result[esize - 1 .. 0])
        }
    }
}

val decode_aarch32_instrs_VRSHR_A1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSHR_A1enc_A_txt (U, D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let is_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VRSHR_Op_A_txt(d, elements, 8, m, regs, shift_amount, is_unsigned)
          },
          16 => {
              execute_aarch32_instrs_VRSHR_Op_A_txt(d, elements, 16, m, regs, shift_amount, is_unsigned)
          },
          32 => {
              execute_aarch32_instrs_VRSHR_Op_A_txt(d, elements, 32, m, regs, shift_amount, is_unsigned)
          },
          64 => {
              execute_aarch32_instrs_VRSHR_Op_A_txt(d, elements, 64, m, regs, shift_amount, is_unsigned)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2947) = {
    SEE = 2947;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSHR_A1enc_A_txt(U, D, imm6, Vd, L, Q, M, Vm)
}

val decode_aarch32_instrs_VRSHR_T1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSHR_T1enc_A_txt (U, D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let is_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VRSHR_Op_A_txt(d, elements, 8, m, regs, shift_amount, is_unsigned)
          },
          16 => {
              execute_aarch32_instrs_VRSHR_Op_A_txt(d, elements, 16, m, regs, shift_amount, is_unsigned)
          },
          32 => {
              execute_aarch32_instrs_VRSHR_Op_A_txt(d, elements, 32, m, regs, shift_amount, is_unsigned)
          },
          64 => {
              execute_aarch32_instrs_VRSHR_Op_A_txt(d, elements, 64, m, regs, shift_amount, is_unsigned)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2948) = {
    SEE = 2948;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSHR_T1enc_A_txt(U, D, imm6, Vd, L, Q, M, Vm)
}

val execute_aarch32_instrs_VRSHRN_Op_A_txt : forall 'd 'elements 'esize 'm 'shift_amount,
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32} & 'elements in {2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('shift_amount)) -> unit

function execute_aarch32_instrs_VRSHRN_Op_A_txt (d__arg, elements, esize, m, shift_amount) = {
    d : int = d__arg;
    result : bits(2 * 'esize) = undefined;
    CheckAdvSIMDEnabled();
    let 'round_const = (1 << (shift_amount - 1));
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = LSR(Elem_read(Qin_read((m >> 1)), e, 2 * esize) + round_const, shift_amount);
        D_set(d) = Elem_set(D_read(d), e, esize, result[esize - 1 .. 0])
    }
}

val decode_aarch32_instrs_VRSHRN_A1enc_A_txt : (bits(1), bits(6), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSHRN_A1enc_A_txt (D, imm6, Vd, M, Vm) = {
    if ConditionPassed() then {
        if (match imm6 {
          [bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        shift_amount : int = undefined;
        match imm6 {
          [bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VRSHRN_Op_A_txt(d, elements, esize, m, shift_amount)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, bitone, _, _, _, _] as __opcode)) if SEE < 2949) = {
    SEE = 2949;
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSHRN_A1enc_A_txt(D, imm6, Vd, M, Vm)
}

val decode_aarch32_instrs_VRSHRN_T1enc_A_txt : (bits(1), bits(6), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSHRN_T1enc_A_txt (D, imm6, Vd, M, Vm) = {
    if ConditionPassed() then {
        if (match imm6 {
          [bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        shift_amount : int = undefined;
        match imm6 {
          [bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VRSHRN_Op_A_txt(d, elements, esize, m, shift_amount)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, bitone, _, _, _, _] as __opcode)) if SEE < 2950) = {
    SEE = 2950;
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSHRN_T1enc_A_txt(D, imm6, Vd, M, Vm)
}

val execute_aarch32_instrs_VRSQRTE_Op_A_txt : forall 'd 'elements 'esize ('floating_point : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('floating_point), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VRSQRTE_Op_A_txt (d__arg, elements, esize, floating_point, m, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if floating_point then {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPRSqrtEstimate(Elem_read(D_read(m + r), e, esize), StandardFPSCRValue()))
            } else {
                assert(constraint('esize == 32));
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, UnsignedRSqrtEstimate(Elem_read(D_read(m + r), e, esize)))
            }
        }
    }
}

val decode_aarch32_instrs_VRSQRTE_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSQRTE_A1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & (not_bool(HaveFP16Ext()) | F == 0b0) | size == 0b00 | size == 0b11 then {
            throw(Error_Undefined())
        };
        let floating_point : bool = F == 0b1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match size {
          0b01 => {
              esize = 16;
              elements = 4
          },
          0b10 => {
              esize = 32;
              elements = 2
          },
          _ => ()
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VRSQRTE_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, _, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2951) = {
    SEE = 2951;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 8, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSQRTE_A1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val decode_aarch32_instrs_VRSQRTE_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSQRTE_T1enc_A_txt (D, size, Vd, F, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & (not_bool(HaveFP16Ext()) | F == 0b0) | size == 0b00 | size == 0b11 then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let floating_point : bool = F == 0b1;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match size {
          0b01 => {
              esize = 16;
              elements = 4
          },
          0b10 => {
              esize = 32;
              elements = 2
          },
          _ => ()
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VRSQRTE_Op_A_txt(d, elements, esize, floating_point, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, _, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2952) = {
    SEE = 2952;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let F = Slice(__opcode, 8, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSQRTE_T1enc_A_txt(D, size, Vd, F, Q, M, Vm)
}

val execute_aarch32_instrs_VRSQRTS_Op_A_txt : forall 'd 'elements 'esize 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VRSQRTS_Op_A_txt (d__arg, elements, esize, m, n, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPRSqrtStep(Elem_read(D_read(n + r), e, esize), Elem_read(D_read(m + r), e, esize)))
        }
    }
}

val decode_aarch32_instrs_VRSQRTS_A1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSQRTS_A1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VRSQRTS_Op_A_txt(d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2953) = {
    SEE = 2953;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSQRTS_A1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VRSQRTS_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSQRTS_T1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VRSQRTS_Op_A_txt(d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2954) = {
    SEE = 2954;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSQRTS_T1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VRSRA_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'regs 'shift_amount,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 'elements in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs), int('shift_amount), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VRSRA_Op_A_txt (d__arg, elements, esize, m, regs, shift_amount, is_unsigned) = {
    d : int = d__arg;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    let 'round_const = (1 << (shift_amount - 1));
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            result = ((asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned) + round_const) >> shift_amount);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, Elem_read(D_read(d + r), e, esize) + result)
        }
    }
}

val decode_aarch32_instrs_VRSRA_A1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSRA_A1enc_A_txt (U, D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let is_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VRSRA_Op_A_txt(d, elements, 8, m, regs, shift_amount, is_unsigned)
          },
          16 => {
              execute_aarch32_instrs_VRSRA_Op_A_txt(d, elements, 16, m, regs, shift_amount, is_unsigned)
          },
          32 => {
              execute_aarch32_instrs_VRSRA_Op_A_txt(d, elements, 32, m, regs, shift_amount, is_unsigned)
          },
          64 => {
              execute_aarch32_instrs_VRSRA_Op_A_txt(d, elements, 64, m, regs, shift_amount, is_unsigned)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2955) = {
    SEE = 2955;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSRA_A1enc_A_txt(U, D, imm6, Vd, L, Q, M, Vm)
}

val decode_aarch32_instrs_VRSRA_T1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSRA_T1enc_A_txt (U, D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let is_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VRSRA_Op_A_txt(d, elements, 8, m, regs, shift_amount, is_unsigned)
          },
          16 => {
              execute_aarch32_instrs_VRSRA_Op_A_txt(d, elements, 16, m, regs, shift_amount, is_unsigned)
          },
          32 => {
              execute_aarch32_instrs_VRSRA_Op_A_txt(d, elements, 32, m, regs, shift_amount, is_unsigned)
          },
          64 => {
              execute_aarch32_instrs_VRSRA_Op_A_txt(d, elements, 64, m, regs, shift_amount, is_unsigned)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2956) = {
    SEE = 2956;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSRA_T1enc_A_txt(U, D, imm6, Vd, L, Q, M, Vm)
}

val execute_aarch32_instrs_VRSUBHN_Op_A_txt : forall 'd 'elements 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n)) -> unit

function execute_aarch32_instrs_VRSUBHN_Op_A_txt (d__arg, elements, esize, m, n) = {
    d : int = d__arg;
    result : bits(2 * 'esize) = undefined;
    CheckAdvSIMDEnabled();
    let 'round_const = (1 << (esize - 1));
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_read(Qin_read((n >> 1)), e, 2 * esize) - Elem_read(Qin_read((m >> 1)), e, 2 * esize) + round_const;
        D_set(d) = Elem_set(D_read(d), e, esize, result[2 * esize - 1 .. esize])
    }
}

val decode_aarch32_instrs_VRSUBHN_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSUBHN_A1enc_A_txt (D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vn[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VRSUBHN_Op_A_txt(d, elements, esize, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2957) = {
    SEE = 2957;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSUBHN_A1enc_A_txt(D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VRSUBHN_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRSUBHN_T1enc_A_txt (D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vn[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VRSUBHN_Op_A_txt(d, elements, esize, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2958) = {
    SEE = 2958;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRSUBHN_T1enc_A_txt(D, size, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VSHL_i_Op_A_txt : forall 'd 'elements 'esize 'm 'regs 'shift_amount,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 'elements in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs), int('shift_amount)) -> unit

function execute_aarch32_instrs_VSHL_i_Op_A_txt (d__arg, elements, esize, m, regs, shift_amount) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, LSL(Elem_read(D_read(m + r), e, esize), shift_amount))
        }
    }
}

val decode_aarch32_instrs_VSHL_i_A1enc_A_txt : (bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSHL_i_A1enc_A_txt (D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = UInt(imm6) - 8
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = UInt(imm6) - 16
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = UInt(imm6) - 32
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VSHL_i_Op_A_txt(d, elements, 8, m, regs, shift_amount)
          },
          16 => {
              execute_aarch32_instrs_VSHL_i_Op_A_txt(d, elements, 16, m, regs, shift_amount)
          },
          32 => {
              execute_aarch32_instrs_VSHL_i_Op_A_txt(d, elements, 32, m, regs, shift_amount)
          },
          64 => {
              execute_aarch32_instrs_VSHL_i_Op_A_txt(d, elements, 64, m, regs, shift_amount)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2959) = {
    SEE = 2959;
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSHL_i_A1enc_A_txt(D, imm6, Vd, L, Q, M, Vm)
}

val decode_aarch32_instrs_VSHL_i_T1enc_A_txt : (bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSHL_i_T1enc_A_txt (D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = UInt(imm6) - 8
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = UInt(imm6) - 16
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = UInt(imm6) - 32
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VSHL_i_Op_A_txt(d, elements, 8, m, regs, shift_amount)
          },
          16 => {
              execute_aarch32_instrs_VSHL_i_Op_A_txt(d, elements, 16, m, regs, shift_amount)
          },
          32 => {
              execute_aarch32_instrs_VSHL_i_Op_A_txt(d, elements, 32, m, regs, shift_amount)
          },
          64 => {
              execute_aarch32_instrs_VSHL_i_Op_A_txt(d, elements, 64, m, regs, shift_amount)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2960) = {
    SEE = 2960;
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSHL_i_T1enc_A_txt(D, imm6, Vd, L, Q, M, Vm)
}

val execute_aarch32_instrs_VSHLL_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'shift_amount,
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('shift_amount), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VSHLL_Op_A_txt (d__arg, elements, esize, m, shift_amount, is_unsigned) = {
    d : int = d__arg;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = (asl_Int(Elem_read(Din_read(m), e, esize), is_unsigned) << shift_amount);
        Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, result[2 * esize - 1 .. 0])
    }
}

val decode_aarch32_instrs_VSHLL_A1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSHLL_A1enc_A_txt (U, D, imm6, Vd, M, Vm) = {
    if ConditionPassed() then {
        if (match imm6 {
          [bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        shift_amount : int = undefined;
        match imm6 {
          [bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = UInt(imm6) - 8
          },
          [bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = UInt(imm6) - 16
          },
          [bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = UInt(imm6) - 32
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        if shift_amount == 0 then {
            throw(Error_See("VMOVL"))
        };
        let shift_amount = shift_amount;
        let is_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VSHLL_Op_A_txt(d, elements, esize, m, shift_amount, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if SEE < 2961) = {
    SEE = 2961;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSHLL_A1enc_A_txt(U, D, imm6, Vd, M, Vm)
}

val decode_aarch32_instrs_VSHLL_A2enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSHLL_A2enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'shift_amount = esize;
        let is_unsigned : bool = false;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VSHLL_Op_A_txt(d, elements, esize, m, shift_amount, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2962) = {
    SEE = 2962;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSHLL_A2enc_A_txt(D, size, Vd, M, Vm)
}

val decode_aarch32_instrs_VSHLL_T1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSHLL_T1enc_A_txt (U, D, imm6, Vd, M, Vm) = {
    if ConditionPassed() then {
        if (match imm6 {
          [bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        shift_amount : int = undefined;
        match imm6 {
          [bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = UInt(imm6) - 8
          },
          [bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = UInt(imm6) - 16
          },
          [bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = UInt(imm6) - 32
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        if shift_amount == 0 then {
            throw(Error_See("VMOVL"))
        };
        let shift_amount = shift_amount;
        let is_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VSHLL_Op_A_txt(d, elements, esize, m, shift_amount, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if SEE < 2963) = {
    SEE = 2963;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSHLL_T1enc_A_txt(U, D, imm6, Vd, M, Vm)
}

val decode_aarch32_instrs_VSHLL_T2enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSHLL_T2enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 | [Vd[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'shift_amount = esize;
        let is_unsigned : bool = false;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VSHLL_Op_A_txt(d, elements, esize, m, shift_amount, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2964) = {
    SEE = 2964;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSHLL_T2enc_A_txt(D, size, Vd, M, Vm)
}

val execute_aarch32_instrs_VSHL_r_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VSHL_r_Op_A_txt (d__arg, elements, esize, m, n, regs, is_unsigned) = {
    d : int = d__arg;
    result : int = undefined;
    shift : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            shift = SInt(Elem_read(D_read(n + r), e, esize)[7 .. 0]);
            result = (asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned) << shift);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result[esize - 1 .. 0])
        }
    }
}

val decode_aarch32_instrs_VSHL_r_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSHL_r_A1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vm[0]] == 0b1) | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VSHL_r_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2965) = {
    SEE = 2965;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSHL_r_A1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VSHL_r_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSHL_r_T1enc_A_txt (U, D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vm[0]] == 0b1) | [Vn[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'n = UInt(N @ Vn);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VSHL_r_Op_A_txt(d, elements, esize, m, n, regs, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2966) = {
    SEE = 2966;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSHL_r_T1enc_A_txt(U, D, size, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VSHR_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'regs 'shift_amount,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 'elements in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs), int('shift_amount), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VSHR_Op_A_txt (d__arg, elements, esize, m, regs, shift_amount, is_unsigned) = {
    d : int = d__arg;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            result = (asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned) >> shift_amount);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result[esize - 1 .. 0])
        }
    }
}

val decode_aarch32_instrs_VSHR_A1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSHR_A1enc_A_txt (U, D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let is_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VSHR_Op_A_txt(d, elements, 8, m, regs, shift_amount, is_unsigned)
          },
          16 => {
              execute_aarch32_instrs_VSHR_Op_A_txt(d, elements, 16, m, regs, shift_amount, is_unsigned)
          },
          32 => {
              execute_aarch32_instrs_VSHR_Op_A_txt(d, elements, 32, m, regs, shift_amount, is_unsigned)
          },
          64 => {
              execute_aarch32_instrs_VSHR_Op_A_txt(d, elements, 64, m, regs, shift_amount, is_unsigned)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2967) = {
    SEE = 2967;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSHR_A1enc_A_txt(U, D, imm6, Vd, L, Q, M, Vm)
}

val decode_aarch32_instrs_VSHR_T1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSHR_T1enc_A_txt (U, D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let is_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VSHR_Op_A_txt(d, elements, 8, m, regs, shift_amount, is_unsigned)
          },
          16 => {
              execute_aarch32_instrs_VSHR_Op_A_txt(d, elements, 16, m, regs, shift_amount, is_unsigned)
          },
          32 => {
              execute_aarch32_instrs_VSHR_Op_A_txt(d, elements, 32, m, regs, shift_amount, is_unsigned)
          },
          64 => {
              execute_aarch32_instrs_VSHR_Op_A_txt(d, elements, 64, m, regs, shift_amount, is_unsigned)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2968) = {
    SEE = 2968;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSHR_T1enc_A_txt(U, D, imm6, Vd, L, Q, M, Vm)
}

val execute_aarch32_instrs_VSHRN_Op_A_txt : forall 'd 'elements 'esize 'm 'shift_amount,
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32} & 'elements in {2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('shift_amount)) -> unit

function execute_aarch32_instrs_VSHRN_Op_A_txt (d__arg, elements, esize, m, shift_amount) = {
    d : int = d__arg;
    result : bits(2 * 'esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = LSR(Elem_read(Qin_read((m >> 1)), e, 2 * esize), shift_amount);
        D_set(d) = Elem_set(D_read(d), e, esize, result[esize - 1 .. 0])
    }
}

val decode_aarch32_instrs_VSHRN_A1enc_A_txt : (bits(1), bits(6), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSHRN_A1enc_A_txt (D, imm6, Vd, M, Vm) = {
    if ConditionPassed() then {
        if (match imm6 {
          [bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        shift_amount : int = undefined;
        match imm6 {
          [bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VSHRN_Op_A_txt(d, elements, esize, m, shift_amount)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if SEE < 2969) = {
    SEE = 2969;
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSHRN_A1enc_A_txt(D, imm6, Vd, M, Vm)
}

val decode_aarch32_instrs_VSHRN_T1enc_A_txt : (bits(1), bits(6), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSHRN_T1enc_A_txt (D, imm6, Vd, M, Vm) = {
    if ConditionPassed() then {
        if (match imm6 {
          [bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32|} = 8;
        elements : {|2, 4, 8|} = 2;
        shift_amount : int = undefined;
        match imm6 {
          [bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VSHRN_Op_A_txt(d, elements, esize, m, shift_amount)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, bitone, _, _, _, _] as __opcode)) if SEE < 2970) = {
    SEE = 2970;
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSHRN_T1enc_A_txt(D, imm6, Vd, M, Vm)
}

val execute_aarch32_instrs_VSLI_Op_A_txt : forall 'd 'elements 'esize 'm 'regs 'shift_amount,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 'elements in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs), int('shift_amount)) -> unit

function execute_aarch32_instrs_VSLI_Op_A_txt (d__arg, elements, esize, m, regs, shift_amount) = {
    d : int = d__arg;
    shifted_op : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    let mask : bits('esize) = LSL(Ones(esize), shift_amount);
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            shifted_op = LSL(Elem_read(D_read(m + r), e, esize), shift_amount);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, Elem_read(D_read(d + r), e, esize) & not_vec(mask) | shifted_op)
        }
    }
}

val decode_aarch32_instrs_VSLI_A1enc_A_txt : (bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSLI_A1enc_A_txt (D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = UInt(imm6) - 8
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = UInt(imm6) - 16
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = UInt(imm6) - 32
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VSLI_Op_A_txt(d, elements, 8, m, regs, shift_amount)
          },
          16 => {
              execute_aarch32_instrs_VSLI_Op_A_txt(d, elements, 16, m, regs, shift_amount)
          },
          32 => {
              execute_aarch32_instrs_VSLI_Op_A_txt(d, elements, 32, m, regs, shift_amount)
          },
          64 => {
              execute_aarch32_instrs_VSLI_Op_A_txt(d, elements, 64, m, regs, shift_amount)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2971) = {
    SEE = 2971;
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSLI_A1enc_A_txt(D, imm6, Vd, L, Q, M, Vm)
}

val decode_aarch32_instrs_VSLI_T1enc_A_txt : (bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSLI_T1enc_A_txt (D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = UInt(imm6) - 8
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = UInt(imm6) - 16
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = UInt(imm6) - 32
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VSLI_Op_A_txt(d, elements, 8, m, regs, shift_amount)
          },
          16 => {
              execute_aarch32_instrs_VSLI_Op_A_txt(d, elements, 16, m, regs, shift_amount)
          },
          32 => {
              execute_aarch32_instrs_VSLI_Op_A_txt(d, elements, 32, m, regs, shift_amount)
          },
          64 => {
              execute_aarch32_instrs_VSLI_Op_A_txt(d, elements, 64, m, regs, shift_amount)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2972) = {
    SEE = 2972;
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSLI_T1enc_A_txt(D, imm6, Vd, L, Q, M, Vm)
}

val execute_aarch32_instrs_VSQRT_Op_A_txt : forall 'd 'esize 'm,
  (0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('m)) -> unit

function execute_aarch32_instrs_VSQRT_Op_A_txt (d, esize, m) = {
    CheckVFPEnabled(true);
    match esize {
      16 => {
          S_set(d) = Zeros(16) @ FPSqrt(S_read(m)[15 .. 0], FPSCR_read())
      },
      32 => {
          S_set(d) = FPSqrt(S_read(m), FPSCR_read())
      },
      64 => {
          D_set(d) = FPSqrt(D_read(m), FPSCR_read())
      },
      _ => ()
    }
}

val decode_aarch32_instrs_VSQRT_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSQRT_A1enc_A_txt (cond, D, Vd, size, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VSQRT_Op_A_txt(d, esize, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitzero, _, _, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 2973) = {
    SEE = 2973;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSQRT_A1enc_A_txt(cond, D, Vd, size, M, Vm)
}

val decode_aarch32_instrs_VSQRT_T1enc_A_txt : (bits(1), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSQRT_T1enc_A_txt (D, Vd, size, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VSQRT_Op_A_txt(d, esize, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitzero, _, _, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2974) = {
    SEE = 2974;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSQRT_T1enc_A_txt(D, Vd, size, M, Vm)
}

val execute_aarch32_instrs_VSRA_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'regs 'shift_amount,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 'elements in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs), int('shift_amount), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VSRA_Op_A_txt (d__arg, elements, esize, m, regs, shift_amount, is_unsigned) = {
    d : int = d__arg;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            result = (asl_Int(Elem_read(D_read(m + r), e, esize), is_unsigned) >> shift_amount);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, Elem_read(D_read(d + r), e, esize) + result)
        }
    }
}

val decode_aarch32_instrs_VSRA_A1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSRA_A1enc_A_txt (U, D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let is_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VSRA_Op_A_txt(d, elements, 8, m, regs, shift_amount, is_unsigned)
          },
          16 => {
              execute_aarch32_instrs_VSRA_Op_A_txt(d, elements, 16, m, regs, shift_amount, is_unsigned)
          },
          32 => {
              execute_aarch32_instrs_VSRA_Op_A_txt(d, elements, 32, m, regs, shift_amount, is_unsigned)
          },
          64 => {
              execute_aarch32_instrs_VSRA_Op_A_txt(d, elements, 64, m, regs, shift_amount, is_unsigned)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2975) = {
    SEE = 2975;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSRA_A1enc_A_txt(U, D, imm6, Vd, L, Q, M, Vm)
}

val decode_aarch32_instrs_VSRA_T1enc_A_txt : (bits(1), bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSRA_T1enc_A_txt (U, D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let is_unsigned : bool = U == 0b1;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VSRA_Op_A_txt(d, elements, 8, m, regs, shift_amount, is_unsigned)
          },
          16 => {
              execute_aarch32_instrs_VSRA_Op_A_txt(d, elements, 16, m, regs, shift_amount, is_unsigned)
          },
          32 => {
              execute_aarch32_instrs_VSRA_Op_A_txt(d, elements, 32, m, regs, shift_amount, is_unsigned)
          },
          64 => {
              execute_aarch32_instrs_VSRA_Op_A_txt(d, elements, 64, m, regs, shift_amount, is_unsigned)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2976) = {
    SEE = 2976;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSRA_T1enc_A_txt(U, D, imm6, Vd, L, Q, M, Vm)
}

val execute_aarch32_instrs_VSRI_Op_A_txt : forall 'd 'elements 'esize 'm 'regs 'shift_amount,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 'elements in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs), int('shift_amount)) -> unit

function execute_aarch32_instrs_VSRI_Op_A_txt (d__arg, elements, esize, m, regs, shift_amount) = {
    d : int = d__arg;
    shifted_op : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    let mask : bits('esize) = LSR(Ones(esize), shift_amount);
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            shifted_op = LSR(Elem_read(D_read(m + r), e, esize), shift_amount);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, Elem_read(D_read(d + r), e, esize) & not_vec(mask) | shifted_op)
        }
    }
}

val decode_aarch32_instrs_VSRI_A1enc_A_txt : (bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSRI_A1enc_A_txt (D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VSRI_Op_A_txt(d, elements, 8, m, regs, shift_amount)
          },
          16 => {
              execute_aarch32_instrs_VSRI_Op_A_txt(d, elements, 16, m, regs, shift_amount)
          },
          32 => {
              execute_aarch32_instrs_VSRI_Op_A_txt(d, elements, 32, m, regs, shift_amount)
          },
          64 => {
              execute_aarch32_instrs_VSRI_Op_A_txt(d, elements, 64, m, regs, shift_amount)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2977) = {
    SEE = 2977;
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSRI_A1enc_A_txt(D, imm6, Vd, L, Q, M, Vm)
}

val decode_aarch32_instrs_VSRI_T1enc_A_txt : (bits(1), bits(6), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSRI_T1enc_A_txt (D, imm6, Vd, L, Q, M, Vm) = {
    if ConditionPassed() then {
        if (match L @ imm6 {
          [bitzero, bitzero, bitzero, bitzero, _, _, _] => true,
          _ => false
        }) : bool then {
            throw(Error_See("Related encodings"))
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        esize : {|8, 16, 32, 64|} = 8;
        elements : {|1, 2, 4, 8|} = 1;
        shift_amount : int = undefined;
        match L @ imm6 {
          [bitzero, bitzero, bitzero, bitone, _, _, _] => {
              esize = 8;
              elements = 8;
              shift_amount = 16 - UInt(imm6)
          },
          [bitzero, bitzero, bitone, _, _, _, _] => {
              esize = 16;
              elements = 4;
              shift_amount = 32 - UInt(imm6)
          },
          [bitzero, bitone, _, _, _, _, _] => {
              esize = 32;
              elements = 2;
              shift_amount = 64 - UInt(imm6)
          },
          [bitone, _, _, _, _, _, _] => {
              esize = 64;
              elements = 1;
              shift_amount = 64 - UInt(imm6)
          },
          _ => ()
        };
        let 'shift_amount = shift_amount;
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        match esize {
          8 => {
              execute_aarch32_instrs_VSRI_Op_A_txt(d, elements, 8, m, regs, shift_amount)
          },
          16 => {
              execute_aarch32_instrs_VSRI_Op_A_txt(d, elements, 16, m, regs, shift_amount)
          },
          32 => {
              execute_aarch32_instrs_VSRI_Op_A_txt(d, elements, 32, m, regs, shift_amount)
          },
          64 => {
              execute_aarch32_instrs_VSRI_Op_A_txt(d, elements, 64, m, regs, shift_amount)
          },
          _ => {
              assert(false)
          }
        }
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 2978) = {
    SEE = 2978;
    let D = Slice(__opcode, 22, 1);
    let imm6 = Slice(__opcode, 16, 6);
    let Vd = Slice(__opcode, 12, 4);
    let L = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSRI_T1enc_A_txt(D, imm6, Vd, L, Q, M, Vm)
}

val execute_aarch32_instrs_VST1_1_Op_A_txt : forall 'alignment 'd 'ebytes 'index 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'ebytes in {1, 2, 4} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 2, 4}).
  (int('alignment), int('d), int('ebytes), int('index), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VST1_1_Op_A_txt (alignment, d, ebytes, index, m, n, register_index, wback) = {
    CheckAdvSIMDEnabled();
    let address : bits(32) = R_read(n);
    let iswrite : bool = true;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    MemU_set(address, ebytes) = Elem_read__1(8 * ebytes, D_read(d), index);
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + ebytes
        }
    };
    ()
}

val decode_aarch32_instrs_VST1_1_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST1_1_A1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [index_align[0]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'alignment = 1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST1_1_Op_A_txt(alignment, d, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2979) = {
    SEE = 2979;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_1_A1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST1_1_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST1_1_A2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [index_align[1]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST1_1_Op_A_txt(alignment, d, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2980) = {
    SEE = 2980;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_1_A2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST1_1_A3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST1_1_A3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [index_align[2]] != 0b0 then {
            throw(Error_Undefined())
        };
        if index_align[1 .. 0] != 0b00 & index_align[1 .. 0] != 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'alignment = if index_align[1 .. 0] == 0b00 then 1 else 4;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST1_1_Op_A_txt(alignment, d, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2981) = {
    SEE = 2981;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_1_A3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST1_1_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST1_1_T1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [index_align[0]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'alignment = 1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST1_1_Op_A_txt(alignment, d, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2982) = {
    SEE = 2982;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_1_T1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST1_1_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST1_1_T2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [index_align[1]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST1_1_Op_A_txt(alignment, d, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2983) = {
    SEE = 2983;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_1_T2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST1_1_T3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST1_1_T3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [index_align[2]] != 0b0 then {
            throw(Error_Undefined())
        };
        if index_align[1 .. 0] != 0b00 & index_align[1 .. 0] != 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'alignment = if index_align[1 .. 0] == 0b00 then 1 else 4;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST1_1_Op_A_txt(alignment, d, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2984) = {
    SEE = 2984;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_1_T3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val execute_aarch32_instrs_VST1_m_Op_A_txt : forall 'alignment 'd 'ebytes 'elements 'm 'n ('register_index : Bool) 'regs ('wback : Bool),
  ('regs in {1, 2, 3, 4} & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'ebytes in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 4, 8, 16, 32}).
  (int('alignment), int('d), int('ebytes), int('elements), int('m), int('n), bool('register_index), int('regs), bool('wback)) -> unit

function execute_aarch32_instrs_VST1_m_Op_A_txt (alignment, d, ebytes, elements, m, n, register_index, regs, wback) = {
    CheckAdvSIMDEnabled();
    address : bits(32) = R_read(n);
    let iswrite : bool = true;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ebytes != 8 then {
                MemU_set(address, ebytes) = Elem_read__1(8 * ebytes, D_read(d + r), e)
            } else {
                let _ =
                  AArch32_CheckAlignment(address, ebytes, AccType_NORMAL, iswrite)
                in
                  ();
                let data : bits(64) = Elem_read__1(64, D_read(d + r), e);
                MemU_set(address, 4) = if BigEndian(AccType_NORMAL) then
                  data[63 .. 32]
                else
                  data[31 .. 0];
                MemU_set(address + 4, 4) = if BigEndian(AccType_NORMAL) then
                  data[31 .. 0]
                else
                  data[63 .. 32]
            };
            address = address + ebytes
        }
    };
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 8 * regs
        }
    };
    ()
}

val decode_aarch32_instrs_VST1_m_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST1_m_A1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 1;
        if [align[1]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2985) = {
    SEE = 2985;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_m_A1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VST1_m_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST1_m_A2enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 2;
        if align == 0b11 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2986) = {
    SEE = 2986;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_m_A2enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VST1_m_A3enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST1_m_A3enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 3;
        if [align[1]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2987) = {
    SEE = 2987;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_m_A3enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VST1_m_A4enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST1_m_A4enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 4;
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2988) = {
    SEE = 2988;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_m_A4enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VST1_m_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST1_m_T1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 1;
        if [align[1]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2989) = {
    SEE = 2989;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_m_T1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VST1_m_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST1_m_T2enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 2;
        if align == 0b11 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2990) = {
    SEE = 2990;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_m_T2enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VST1_m_T3enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST1_m_T3enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 3;
        if [align[1]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2991) = {
    SEE = 2991;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_m_T3enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VST1_m_T4enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST1_m_T4enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'regs = 4;
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST1_m_Op_A_txt(alignment, d, ebytes, elements, m, n, register_index, regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2992) = {
    SEE = 2992;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST1_m_T4enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val execute_aarch32_instrs_VST2_1_Op_A_txt : forall 'alignment 'd 'd2 'ebytes 'index 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'ebytes in {1, 2, 4} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 2, 4, 8}).
  (int('alignment), int('d), int('d2), int('ebytes), int('index), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VST2_1_Op_A_txt (alignment, d, d2, ebytes, index, m, n, register_index, wback) = {
    CheckAdvSIMDEnabled();
    let address : bits(32) = R_read(n);
    let iswrite : bool = true;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    MemU_set(address, ebytes) = Elem_read__1(8 * ebytes, D_read(d), index);
    MemU_set(address + ebytes, ebytes) = Elem_read__1(8 * ebytes, D_read(d2), index);
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 2 * ebytes
        }
    };
    ()
}

val decode_aarch32_instrs_VST2_1_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST2_1_A1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'inc_name = 1;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST2_1_Op_A_txt(alignment, d, d2, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2993) = {
    SEE = 2993;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST2_1_A1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST2_1_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST2_1_A2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'inc_name = if [index_align[1]] == 0b0 then 1 else 2;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 4;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST2_1_Op_A_txt(alignment, d, d2, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2994) = {
    SEE = 2994;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST2_1_A2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST2_1_A3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST2_1_A3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [index_align[1]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'inc_name = if [index_align[2]] == 0b0 then 1 else 2;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 8;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST2_1_Op_A_txt(alignment, d, d2, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2995) = {
    SEE = 2995;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST2_1_A3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST2_1_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST2_1_T1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'inc_name = 1;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST2_1_Op_A_txt(alignment, d, d2, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2996) = {
    SEE = 2996;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST2_1_T1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST2_1_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST2_1_T2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'inc_name = if [index_align[1]] == 0b0 then 1 else 2;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 4;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST2_1_Op_A_txt(alignment, d, d2, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2997) = {
    SEE = 2997;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST2_1_T2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST2_1_T3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST2_1_T3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [index_align[1]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'inc_name = if [index_align[2]] == 0b0 then 1 else 2;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 8;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST2_1_Op_A_txt(alignment, d, d2, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2998) = {
    SEE = 2998;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST2_1_T3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val execute_aarch32_instrs_VST2_m_Op_A_txt : forall 'alignment 'd 'd2 'ebytes 'elements 'm 'n 'pairs ('register_index : Bool) ('wback : Bool),
  ('pairs in {1, 2} & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'ebytes in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 4, 8, 16, 32}).
  (int('alignment), int('d), int('d2), int('ebytes), int('elements), int('m), int('n), int('pairs), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VST2_m_Op_A_txt (alignment, d, d2, ebytes, elements, m, n, pairs, register_index, wback) = {
    CheckAdvSIMDEnabled();
    address : bits(32) = R_read(n);
    let iswrite : bool = true;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    foreach (r from 0 to (pairs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            MemU_set(address, ebytes) = Elem_read__1(8 * ebytes, D_read(d + r), e);
            MemU_set(address + ebytes, ebytes) = Elem_read__1(8 * ebytes, D_read(d2 + r), e);
            address = address + 2 * ebytes
        }
    };
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 16 * pairs
        }
    };
    ()
}

val decode_aarch32_instrs_VST2_m_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST2_m_A1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'pairs = 1;
        if align == 0b11 then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'inc_name = if itype == 0b1001 then 2 else 1;
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 + pairs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST2_m_Op_A_txt(alignment, d, d2, ebytes, elements, m, n, pairs, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2999) = {
    SEE = 2999;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST2_m_A1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VST2_m_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST2_m_A2enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'pairs = 2;
        let 'inc_name = 2;
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 + pairs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST2_m_Op_A_txt(alignment, d, d2, ebytes, elements, m, n, pairs, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3000) = {
    SEE = 3000;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST2_m_A2enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VST2_m_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST2_m_T1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'pairs = 1;
        if align == 0b11 then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'inc_name = if itype == 0b1001 then 2 else 1;
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 + pairs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST2_m_Op_A_txt(alignment, d, d2, ebytes, elements, m, n, pairs, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3001) = {
    SEE = 3001;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST2_m_T1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VST2_m_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST2_m_T2enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        let 'pairs = 2;
        let 'inc_name = 2;
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d2 + pairs > 32 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST2_m_Op_A_txt(alignment, d, d2, ebytes, elements, m, n, pairs, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3002) = {
    SEE = 3002;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST2_m_T2enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val execute_aarch32_instrs_VST3_1_Op_A_txt : forall 'd 'd2 'd3 'ebytes 'index 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'ebytes in {1, 2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('d2), int('d3), int('ebytes), int('index), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VST3_1_Op_A_txt (d, d2, d3, ebytes, index, m, n, register_index, wback) = {
    CheckAdvSIMDEnabled();
    let address : bits(32) = R_read(n);
    MemU_set(address, ebytes) = Elem_read__1(8 * ebytes, D_read(d), index);
    MemU_set(address + ebytes, ebytes) = Elem_read__1(8 * ebytes, D_read(d2), index);
    MemU_set(address + 2 * ebytes, ebytes) = Elem_read__1(8 * ebytes, D_read(d3), index);
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 3 * ebytes
        }
    };
    ()
}

val decode_aarch32_instrs_VST3_1_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST3_1_A1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [index_align[0]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'inc_name = 1;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST3_1_Op_A_txt(d, d2, d3, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3003) = {
    SEE = 3003;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST3_1_A1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST3_1_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST3_1_A2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [index_align[0]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'inc_name = if [index_align[1]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST3_1_Op_A_txt(d, d2, d3, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3004) = {
    SEE = 3004;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST3_1_A2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST3_1_A3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST3_1_A3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if index_align[1 .. 0] != 0b00 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'inc_name = if [index_align[2]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST3_1_Op_A_txt(d, d2, d3, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3005) = {
    SEE = 3005;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST3_1_A3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST3_1_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST3_1_T1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [index_align[0]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'inc_name = 1;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST3_1_Op_A_txt(d, d2, d3, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3006) = {
    SEE = 3006;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST3_1_T1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST3_1_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST3_1_T2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if [index_align[0]] != 0b0 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'inc_name = if [index_align[1]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST3_1_Op_A_txt(d, d2, d3, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3007) = {
    SEE = 3007;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST3_1_T2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST3_1_T3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST3_1_T3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if index_align[1 .. 0] != 0b00 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'inc_name = if [index_align[2]] == 0b0 then 1 else 2;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST3_1_Op_A_txt(d, d2, d3, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3008) = {
    SEE = 3008;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST3_1_T3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val execute_aarch32_instrs_VST3_m_Op_A_txt : forall 'alignment 'd 'd2 'd3 'ebytes 'elements 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'ebytes in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 8}).
  (int('alignment), int('d), int('d2), int('d3), int('ebytes), int('elements), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VST3_m_Op_A_txt (alignment, d, d2, d3, ebytes, elements, m, n, register_index, wback) = {
    CheckAdvSIMDEnabled();
    address : bits(32) = R_read(n);
    let iswrite : bool = true;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        MemU_set(address, ebytes) = Elem_read__1(8 * ebytes, D_read(d), e);
        MemU_set(address + ebytes, ebytes) = Elem_read__1(8 * ebytes, D_read(d2), e);
        MemU_set(address + 2 * ebytes, ebytes) = Elem_read__1(8 * ebytes, D_read(d3), e);
        address = address + 3 * ebytes
    };
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 24
        }
    };
    ()
}

val decode_aarch32_instrs_VST3_m_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST3_m_A1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 | [align[1]] == 0b1 then {
            throw(Error_Undefined())
        };
        inc_name : {|1, 2|} = 1;
        match itype {
          0b0100 => {
              inc_name = 1
          },
          0b0101 => {
              inc_name = 2
          },
          _ => {
              throw(Error_See("Related encodings"))
          }
        };
        let 'inc_name = inc_name;
        let 'alignment = if [align[0]] == 0b0 then 1 else 8;
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST3_m_Op_A_txt(alignment, d, d2, d3, ebytes, elements, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3009) = {
    SEE = 3009;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST3_m_A1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VST3_m_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST3_m_T1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 | [align[1]] == 0b1 then {
            throw(Error_Undefined())
        };
        inc_name : {|1, 2|} = 1;
        match itype {
          0b0100 => {
              inc_name = 1
          },
          0b0101 => {
              inc_name = 2
          },
          _ => {
              throw(Error_See("Related encodings"))
          }
        };
        let 'inc_name = inc_name;
        let 'alignment = if [align[0]] == 0b0 then 1 else 8;
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d3 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST3_m_Op_A_txt(alignment, d, d2, d3, ebytes, elements, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3010) = {
    SEE = 3010;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST3_m_T1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val execute_aarch32_instrs_VST4_1_Op_A_txt : forall 'alignment 'd 'd2 'd3 'd4 'ebytes 'index 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'ebytes in {1, 2, 4} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 4, 8, 16, 32}).
  (int('alignment), int('d), int('d2), int('d3), int('d4), int('ebytes), int('index), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VST4_1_Op_A_txt (alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback) = {
    CheckAdvSIMDEnabled();
    let address : bits(32) = R_read(n);
    let iswrite : bool = true;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    MemU_set(address, ebytes) = Elem_read__1(8 * ebytes, D_read(d), index);
    MemU_set(address + ebytes, ebytes) = Elem_read__1(8 * ebytes, D_read(d2), index);
    MemU_set(address + 2 * ebytes, ebytes) = Elem_read__1(8 * ebytes, D_read(d3), index);
    MemU_set(address + 3 * ebytes, ebytes) = Elem_read__1(8 * ebytes, D_read(d4), index);
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 4 * ebytes
        }
    };
    ()
}

val decode_aarch32_instrs_VST4_1_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST4_1_A1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if size != 0b00 then {
            throw(Error_See("Related encodings"))
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'inc_name = 1;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 4;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST4_1_Op_A_txt(alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3011) = {
    SEE = 3011;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST4_1_A1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST4_1_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST4_1_A2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if size != 0b01 then {
            throw(Error_See("Related encodings"))
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'inc_name = if [index_align[1]] == 0b0 then 1 else 2;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 8;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST4_1_Op_A_txt(alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3012) = {
    SEE = 3012;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST4_1_A2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST4_1_A3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST4_1_A3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if size != 0b10 then {
            throw(Error_See("Related encodings"))
        };
        if index_align[1 .. 0] == 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'inc_name = if [index_align[2]] == 0b0 then 1 else 2;
        let 'alignment = if index_align[1 .. 0] == 0b00 then 1 else
          (4 << UInt(index_align[1 .. 0]));
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST4_1_Op_A_txt(alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3013) = {
    SEE = 3013;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST4_1_A3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST4_1_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST4_1_T1enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if size != 0b00 then {
            throw(Error_See("Related encodings"))
        };
        let 'ebytes = 1;
        let 'index = UInt(index_align[3 .. 1]);
        let 'inc_name = 1;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 4;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST4_1_Op_A_txt(alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3014) = {
    SEE = 3014;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST4_1_T1enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST4_1_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST4_1_T2enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if size != 0b01 then {
            throw(Error_See("Related encodings"))
        };
        let 'ebytes = 2;
        let 'index = UInt(index_align[3 .. 2]);
        let 'inc_name = if [index_align[1]] == 0b0 then 1 else 2;
        let 'alignment = if [index_align[0]] == 0b0 then 1 else 8;
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VST4_1_Op_A_txt(alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3015) = {
    SEE = 3015;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST4_1_T2enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val decode_aarch32_instrs_VST4_1_T3enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VST4_1_T3enc_A_txt (D, Rn, Vd, size, index_align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if size != 0b10 then {
            throw(Error_See("Related encodings"))
        };
        if index_align[1 .. 0] == 0b11 then {
            throw(Error_Undefined())
        };
        let 'ebytes = 4;
        let 'index = UInt([index_align[3]]);
        let 'inc_name = if [index_align[2]] == 0b0 then 1 else 2;
        let 'alignment = if index_align[1 .. 0] == 0b00 then 1 else
          (4 << UInt(index_align[1 .. 0]));
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST4_1_Op_A_txt(alignment, d, d2, d3, d4, ebytes, index, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3016) = {
    SEE = 3016;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 10, 2);
    let index_align = Slice(__opcode, 4, 4);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST4_1_T3enc_A_txt(D, Rn, Vd, size, index_align, Rm)
}

val execute_aarch32_instrs_VST4_m_Op_A_txt : forall 'alignment 'd 'd2 'd3 'd4 'ebytes 'elements 'm 'n ('register_index : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'ebytes in {1, 2, 4, 8} & 0 <= 'd & 'd <= 31 & 'alignment in {1, 4, 8, 16, 32}).
  (int('alignment), int('d), int('d2), int('d3), int('d4), int('ebytes), int('elements), int('m), int('n), bool('register_index), bool('wback)) -> unit

function execute_aarch32_instrs_VST4_m_Op_A_txt (alignment, d, d2, d3, d4, ebytes, elements, m, n, register_index, wback) = {
    CheckAdvSIMDEnabled();
    address : bits(32) = R_read(n);
    let iswrite : bool = true;
    let _ = AArch32_CheckAlignment(address, alignment, AccType_VEC, iswrite) in
      ();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        MemU_set(address, ebytes) = Elem_read__1(8 * ebytes, D_read(d), e);
        MemU_set(address + ebytes, ebytes) = Elem_read__1(8 * ebytes, D_read(d2), e);
        MemU_set(address + 2 * ebytes, ebytes) = Elem_read__1(8 * ebytes, D_read(d3), e);
        MemU_set(address + 3 * ebytes, ebytes) = Elem_read__1(8 * ebytes, D_read(d4), e);
        address = address + 4 * ebytes
    };
    if wback then {
        if register_index then {
            R_set(n) = R_read(n) + R_read(m)
        } else {
            R_set(n) = R_read(n) + 32
        }
    };
    ()
}

val decode_aarch32_instrs_VST4_m_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST4_m_A1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        inc_name : {|1, 2|} = 1;
        match itype {
          0b0000 => {
              inc_name = 1
          },
          0b0001 => {
              inc_name = 2
          },
          _ => {
              throw(Error_See("Related encodings"))
          }
        };
        let 'inc_name = inc_name;
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST4_m_Op_A_txt(alignment, d, d2, d3, d4, ebytes, elements, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3017) = {
    SEE = 3017;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST4_m_A1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val decode_aarch32_instrs_VST4_m_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(4), bits(2), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_VST4_m_T1enc_A_txt (D, Rn, Vd, itype, size, align, Rm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        inc_name : {|1, 2|} = 1;
        match itype {
          0b0000 => {
              inc_name = 1
          },
          0b0001 => {
              inc_name = 2
          },
          _ => {
              throw(Error_See("Related encodings"))
          }
        };
        let 'inc_name = inc_name;
        let 'alignment = if align == 0b00 then 1 else (4 << UInt(align));
        let 'ebytes = (1 << UInt(size));
        let 'elements = DIV(8, ebytes);
        let 'd = UInt(D @ Vd);
        let 'd2 = d + inc_name;
        let 'd3 = d2 + inc_name;
        let 'd4 = d3 + inc_name;
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let wback : bool = m != 15;
        let register_index : bool = m != 15 & m != 13;
        if n == 15 | d4 > 31 then {
            throw(Error_Unpredictable())
        };
        assert(constraint('alignment in {1, 4, 8, 16, 32}));
        execute_aarch32_instrs_VST4_m_Op_A_txt(alignment, d, d2, d3, d4, ebytes, elements, m, n, register_index, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3018) = {
    SEE = 3018;
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let itype = Slice(__opcode, 8, 4);
    let size = Slice(__opcode, 6, 2);
    let align = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VST4_m_T1enc_A_txt(D, Rn, Vd, itype, size, align, Rm)
}

val execute_aarch32_instrs_VSTM_Op_A_txt : forall ('add : Bool) 'd 'n 'regs ('single_regs : Bool) ('wback : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 31).
  (bool('add), int('d), bits(32), int('n), int('regs), bool('single_regs), bool('wback)) -> unit

function execute_aarch32_instrs_VSTM_Op_A_txt (add, d, imm32, n, regs, single_regs, wback) = {
    CheckVFPEnabled(true);
    address : bits(32) = if add then R_read(n) else R_read(n) - imm32;
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        if single_regs then {
            MemA_set(address, 4) = S_read(d + r);
            address = address + 4
        } else {
            MemA_set(address, 4) = if BigEndian(AccType_ATOMIC) then
              D_read(d + r)[63 .. 32]
            else
              D_read(d + r)[31 .. 0];
            MemA_set(address + 4, 4) = if BigEndian(AccType_ATOMIC) then
              D_read(d + r)[31 .. 0]
            else
              D_read(d + r)[63 .. 32];
            address = address + 8
        }
    };
    if wback then {
        R_set(n) = if add then R_read(n) + imm32 else R_read(n) - imm32
    };
    ()
}

val decode_aarch32_instrs_VSTM_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(1), bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_VSTM_A1enc_A_txt (cond, P, U, D, W, Rn, Vd, imm8) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_See("Related encodings"))
        };
        if P == 0b1 & W == 0b0 then {
            throw(Error_See("VSTR"))
        };
        if P == U & W == 0b1 then {
            throw(Error_Undefined())
        };
        let single_regs : bool = false;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let 'regs = DIV(UInt(imm8), 2);
        if n == 15 & (wback | CurrentInstrSet() != InstrSet_A32) then {
            throw(Error_Unpredictable())
        };
        if (regs == 0 | regs > 16) | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        if [imm8[0]] == 0b1 & d + regs > 16 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VSTM_Op_A_txt(add, d, imm32, n, regs, single_regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3019) = {
    SEE = 3019;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_VSTM_A1enc_A_txt(cond, P, U, D, W, Rn, Vd, imm8)
}

val decode_aarch32_instrs_VSTM_A2enc_A_txt : (bits(4), bits(1), bits(1), bits(1), bits(1), bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_VSTM_A2enc_A_txt (cond, P, U, D, W, Rn, Vd, imm8) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_See("Related encodings"))
        };
        if P == 0b1 & W == 0b0 then {
            throw(Error_See("VSTR"))
        };
        if P == U & W == 0b1 then {
            throw(Error_Undefined())
        };
        let single_regs : bool = true;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        let 'd = UInt(Vd @ D);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let 'regs = UInt(imm8);
        if n == 15 & (wback | CurrentInstrSet() != InstrSet_A32) then {
            throw(Error_Unpredictable())
        };
        if regs == 0 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VSTM_Op_A_txt(add, d, imm32, n, regs, single_regs, wback)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3020) = {
    SEE = 3020;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_VSTM_A2enc_A_txt(cond, P, U, D, W, Rn, Vd, imm8)
}

val decode_aarch32_instrs_VSTM_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(1), bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_VSTM_T1enc_A_txt (P, U, D, W, Rn, Vd, imm8) = {
    if ConditionPassed() then {
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_See("Related encodings"))
        };
        if P == 0b1 & W == 0b0 then {
            throw(Error_See("VSTR"))
        };
        if P == U & W == 0b1 then {
            throw(Error_Undefined())
        };
        let single_regs : bool = false;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let 'regs = DIV(UInt(imm8), 2);
        if n == 15 & (wback | CurrentInstrSet() != InstrSet_A32) then {
            throw(Error_Unpredictable())
        };
        if (regs == 0 | regs > 16) | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        if [imm8[0]] == 0b1 & d + regs > 16 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VSTM_Op_A_txt(add, d, imm32, n, regs, single_regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3021) = {
    SEE = 3021;
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_VSTM_T1enc_A_txt(P, U, D, W, Rn, Vd, imm8)
}

val decode_aarch32_instrs_VSTM_T2enc_A_txt : (bits(1), bits(1), bits(1), bits(1), bits(4), bits(4), bits(8)) -> unit

function decode_aarch32_instrs_VSTM_T2enc_A_txt (P, U, D, W, Rn, Vd, imm8) = {
    if ConditionPassed() then {
        if (P == 0b0 & U == 0b0) & W == 0b0 then {
            throw(Error_See("Related encodings"))
        };
        if P == 0b1 & W == 0b0 then {
            throw(Error_See("VSTR"))
        };
        if P == U & W == 0b1 then {
            throw(Error_Undefined())
        };
        let single_regs : bool = true;
        let add : bool = U == 0b1;
        let wback : bool = W == 0b1;
        let 'd = UInt(Vd @ D);
        let 'n = UInt(Rn);
        let imm32 : bits(32) = ZeroExtend(imm8 @ 0b00, 32);
        let 'regs = UInt(imm8);
        if n == 15 & (wback | CurrentInstrSet() != InstrSet_A32) then {
            throw(Error_Unpredictable())
        };
        if regs == 0 | d + regs > 32 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VSTM_Op_A_txt(add, d, imm32, n, regs, single_regs, wback)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3022) = {
    SEE = 3022;
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_VSTM_T2enc_A_txt(P, U, D, W, Rn, Vd, imm8)
}

val execute_aarch32_instrs_VSTR_Op_A_txt : forall ('add : Bool) 'd 'esize 'n,
  (0 <= 'n & 'n <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('add), int('d), int('esize), bits(32), int('n)) -> unit

function execute_aarch32_instrs_VSTR_Op_A_txt (add, d, esize, imm32, n) = {
    CheckVFPEnabled(true);
    let address : bits(32) = if add then R_read(n) + imm32 else
      R_read(n) - imm32;
    match esize {
      16 => {
          MemA_set(address, 2) = S_read(d)[15 .. 0]
      },
      32 => {
          MemA_set(address, 4) = S_read(d)
      },
      64 => {
          MemA_set(address, 4) = if BigEndian(AccType_ATOMIC) then
            D_read(d)[63 .. 32]
          else
            D_read(d)[31 .. 0];
          MemA_set(address + 4, 4) = if BigEndian(AccType_ATOMIC) then
            D_read(d)[31 .. 0]
          else
            D_read(d)[63 .. 32]
      },
      _ => ()
    }
}

val decode_aarch32_instrs_VSTR_A1enc_A_txt : (bits(4), bits(1), bits(1), bits(4), bits(4), bits(2), bits(8)) -> unit

function decode_aarch32_instrs_VSTR_A1enc_A_txt (cond, U, D, Rn, Vd, size, imm8) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let 'esize = (8 << UInt(size));
        let add : bool = U == 0b1;
        let imm32 : bits(32) = if esize == 16 then ZeroExtend(imm8 @ 0b0, 32)
        else
          ZeroExtend(imm8 @ 0b00, 32);
        d : range(0, 31) = undefined;
        match size {
          0b01 => {
              d = UInt(Vd @ D)
          },
          0b10 => {
              d = UInt(Vd @ D)
          },
          0b11 => {
              d = UInt(D @ Vd)
          },
          _ => ()
        };
        let 'd = d;
        let 'n = UInt(Rn);
        if n == 15 & CurrentInstrSet() != InstrSet_A32 then {
            throw(Error_Unpredictable())
        };
        let d = d;
        execute_aarch32_instrs_VSTR_Op_A_txt(add, d, esize, imm32, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitzero, bitone, _, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3023) = {
    SEE = 3023;
    let cond = Slice(__opcode, 28, 4);
    let U = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_VSTR_A1enc_A_txt(cond, U, D, Rn, Vd, size, imm8)
}

val decode_aarch32_instrs_VSTR_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(2), bits(8)) -> unit

function decode_aarch32_instrs_VSTR_T1enc_A_txt (U, D, Rn, Vd, size, imm8) = {
    if ConditionPassed() then {
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let 'esize = (8 << UInt(size));
        let add : bool = U == 0b1;
        let imm32 : bits(32) = if esize == 16 then ZeroExtend(imm8 @ 0b0, 32)
        else
          ZeroExtend(imm8 @ 0b00, 32);
        d : range(0, 31) = undefined;
        match size {
          0b01 => {
              d = UInt(Vd @ D)
          },
          0b10 => {
              d = UInt(Vd @ D)
          },
          0b11 => {
              d = UInt(D @ Vd)
          },
          _ => ()
        };
        let 'd = d;
        let 'n = UInt(Rn);
        if n == 15 & CurrentInstrSet() != InstrSet_A32 then {
            throw(Error_Unpredictable())
        };
        let d = d;
        execute_aarch32_instrs_VSTR_Op_A_txt(add, d, esize, imm32, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3024) = {
    SEE = 3024;
    let U = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let imm8 = Slice(__opcode, 0, 8);
    decode_aarch32_instrs_VSTR_T1enc_A_txt(U, D, Rn, Vd, size, imm8)
}

val execute_aarch32_instrs_VSUB_f_Op_A_txt : forall ('advsimd : Bool) 'd 'elements 'esize 'm 'n 'regs,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('advsimd), int('d), int('elements), int('esize), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VSUB_f_Op_A_txt (advsimd, d__arg, elements, esize, m, n, regs) = {
    d : int = d__arg;
    CheckAdvSIMDOrVFPEnabled(true, advsimd);
    if advsimd then {
        foreach (r from 0 to (regs - 1) by 1 in inc) {
            foreach (e from 0 to (elements - 1) by 1 in inc) {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPSub(Elem_read(D_read(n + r), e, esize), Elem_read(D_read(m + r), e, esize), StandardFPSCRValue()))
            }
        }
    } else {
        match esize {
          16 => {
              S_set(d) = Zeros(16) @ FPSub(S_read(n)[15 .. 0], S_read(m)[15 .. 0], FPSCR_read())
          },
          32 => {
              S_set(d) = FPSub(S_read(n), S_read(m), FPSCR_read())
          },
          64 => {
              D_set(d) = FPSub(D_read(n), D_read(m), FPSCR_read())
          },
          _ => ()
        }
    }
}

val decode_aarch32_instrs_VSUB_f_A1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSUB_f_A1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        let advsimd : bool = true;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VSUB_f_Op_A_txt(advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3025) = {
    SEE = 3025;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSUB_f_A1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VSUB_f_A2enc_A_txt : (bits(4), bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSUB_f_A2enc_A_txt (cond, D, Vn, Vd, size, N, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        elements : int = undefined;
        regs : int = undefined;
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let regs = regs;
        let elements = elements;
        let advsimd : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VSUB_f_Op_A_txt(advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3026) = {
    SEE = 3026;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSUB_f_A2enc_A_txt(cond, D, Vn, Vd, size, N, M, Vm)
}

val decode_aarch32_instrs_VSUB_f_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSUB_f_T1enc_A_txt (D, sz, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if sz == 0b1 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let advsimd : bool = true;
        esize : {|16, 32|} = 16;
        elements : {|2, 4|} = 2;
        match sz {
          0b0 => {
              esize = 32;
              elements = 2
          },
          0b1 => {
              esize = 16;
              elements = 4
          }
        };
        let 'esize = esize;
        let 'elements = elements;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VSUB_f_Op_A_txt(advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3027) = {
    SEE = 3027;
    let D = Slice(__opcode, 22, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSUB_f_T1enc_A_txt(D, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VSUB_f_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSUB_f_T2enc_A_txt (D, Vn, Vd, size, N, M, Vm) = {
    if ConditionPassed() then {
        elements : int = undefined;
        regs : int = undefined;
        if FPSCR_read__1()[length] != 0b000 | FPSCR_read__1()[Stride] != 0b00 then {
            throw(Error_Undefined())
        };
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let regs = regs;
        let elements = elements;
        let advsimd : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        n : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              n = UInt(Vn @ N);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              n = UInt(N @ Vn);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'n = n;
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VSUB_f_Op_A_txt(advsimd, d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3028) = {
    SEE = 3028;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSUB_f_T2enc_A_txt(D, Vn, Vd, size, N, M, Vm)
}

val execute_aarch32_instrs_VSUBHN_Op_A_txt : forall 'd 'elements 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n)) -> unit

function execute_aarch32_instrs_VSUBHN_Op_A_txt (d__arg, elements, esize, m, n) = {
    d : int = d__arg;
    result : bits(2 * 'esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_read(Qin_read((n >> 1)), e, 2 * esize) - Elem_read(Qin_read((m >> 1)), e, 2 * esize);
        D_set(d) = Elem_set(D_read(d), e, esize, result[2 * esize - 1 .. esize])
    }
}

val decode_aarch32_instrs_VSUBHN_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSUBHN_A1enc_A_txt (D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vn[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VSUBHN_Op_A_txt(d, elements, esize, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3029) = {
    SEE = 3029;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSUBHN_A1enc_A_txt(D, size, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VSUBHN_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSUBHN_T1enc_A_txt (D, size, Vn, Vd, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vn[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VSUBHN_Op_A_txt(d, elements, esize, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3030) = {
    SEE = 3030;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSUBHN_T1enc_A_txt(D, size, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VSUB_i_Op_A_txt : forall 'd 'elements 'esize 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VSUB_i_Op_A_txt (d__arg, elements, esize, m, n, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, Elem_read(D_read(n + r), e, esize) - Elem_read(D_read(m + r), e, esize))
        }
    }
}

val decode_aarch32_instrs_VSUB_i_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSUB_i_A1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VSUB_i_Op_A_txt(d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3031) = {
    SEE = 3031;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSUB_i_A1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VSUB_i_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSUB_i_T1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VSUB_i_Op_A_txt(d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3032) = {
    SEE = 3032;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSUB_i_T1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VSUBL_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) ('is_vsubw : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('is_vsubw), int('m), int('n), bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VSUBL_Op_A_txt (d__arg, elements, esize, is_vsubw, m, n, is_unsigned) = {
    d : int = d__arg;
    result : int = undefined;
    CheckAdvSIMDEnabled();
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        op1 : int = undefined;
        if is_vsubw then {
            op1 = asl_Int(Elem_read(Qin_read((n >> 1)), e, 2 * esize), is_unsigned)
        } else {
            op1 = asl_Int(Elem_read(Din_read(n), e, esize), is_unsigned)
        };
        let 'op1 = op1;
        result = op1 - asl_Int(Elem_read(Din_read(m), e, esize), is_unsigned);
        Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, 2 * esize, result[2 * esize - 1 .. 0])
    }
}

val decode_aarch32_instrs_VSUBL_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSUBL_A1enc_A_txt (U, D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vd[0]] == 0b1 | op == 0b1 & [Vn[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let is_vsubw : bool = op == 0b1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VSUBL_Op_A_txt(d, elements, esize, is_vsubw, m, n, is_unsigned)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, _, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3033) = {
    SEE = 3033;
    let U = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSUBL_A1enc_A_txt(U, D, size, Vn, Vd, op, N, M, Vm)
}

val decode_aarch32_instrs_VSUBL_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSUBL_T1enc_A_txt (U, D, size, Vn, Vd, op, N, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_See("Related encodings"))
        };
        if [Vd[0]] == 0b1 | op == 0b1 & [Vn[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let is_unsigned : bool = U == 0b1;
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let is_vsubw : bool = op == 0b1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VSUBL_Op_A_txt(d, elements, esize, is_vsubw, m, n, is_unsigned)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, _, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3034) = {
    SEE = 3034;
    let U = Slice(__opcode, 28, 1);
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 8, 1);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSUBL_T1enc_A_txt(U, D, size, Vn, Vd, op, N, M, Vm)
}

val execute_aarch32_instrs_VSWP_Op_A_txt : forall 'd 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VSWP_Op_A_txt (d, m, regs) = {
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        if d == m then {
            D_set(d + r) = __UNKNOWN_bits(64)
        } else {
            D_set(d + r) = Din_read(m + r);
            D_set(m + r) = Din_read(d + r)
        }
    }
}

val decode_aarch32_instrs_VSWP_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSWP_A1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VSWP_Op_A_txt(d, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3035) = {
    SEE = 3035;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSWP_A1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VSWP_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSWP_T1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VSWP_Op_A_txt(d, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3036) = {
    SEE = 3036;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSWP_T1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_VTBL_Op_A_txt : forall 'd ('is_vtbl : Bool) 'length 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'length in {1, 2, 3, 4} & 0 <= 'd & 'd <= 31).
  (int('d), bool('is_vtbl), int('length), int('m), int('n)) -> unit

function execute_aarch32_instrs_VTBL_Op_A_txt (d__arg, is_vtbl, length, m, n) = {
    d : int = d__arg;
    index : int = undefined;
    CheckAdvSIMDEnabled();
    let table3 : bits(64) = if length == 4 then D_read(n + 3) else Zeros(64);
    let table2 : bits(64) = if length >= 3 then D_read(n + 2) else Zeros(64);
    let table1 : bits(64) = if length >= 2 then D_read(n + 1) else Zeros(64);
    let table : bits(256) = ((table3 @ table2) @ table1) @ D_read(n);
    foreach (i from 0 to 7 by 1 in inc) {
        index = UInt(Elem_read(D_read(m), i, 8));
        let 'index = index in
          {
              if index < 8 * length then {
                  D_set(d) = Elem_set(D_read(d), i, 8, Elem_read(table, index, 8))
              } else {
                  if is_vtbl then {
                      D_set(d) = Elem_set(D_read(d), i, 8, Zeros(8))
                  };
                  ()
              }
          };
        ()
    }
}

val decode_aarch32_instrs_VTBL_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VTBL_A1enc_A_txt (D, Vn, Vd, len, N, op, M, Vm) = {
    if ConditionPassed() then {
        let is_vtbl : bool = op == 0b0;
        let 'length = UInt(len) + 1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        if n + length > 32 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VTBL_Op_A_txt(d, is_vtbl, length, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3037) = {
    SEE = 3037;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let len = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let op = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VTBL_A1enc_A_txt(D, Vn, Vd, len, N, op, M, Vm)
}

val decode_aarch32_instrs_VTBL_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VTBL_T1enc_A_txt (D, Vn, Vd, len, N, op, M, Vm) = {
    if ConditionPassed() then {
        let is_vtbl : bool = op == 0b0;
        let 'length = UInt(len) + 1;
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        if n + length > 32 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VTBL_Op_A_txt(d, is_vtbl, length, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3038) = {
    SEE = 3038;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let len = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let op = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VTBL_T1enc_A_txt(D, Vn, Vd, len, N, op, M, Vm)
}

val execute_aarch32_instrs_VTRN_Op_A_txt : forall 'd 'elements 'esize 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs)) -> unit

function execute_aarch32_instrs_VTRN_Op_A_txt (d__arg, elements, esize, m__arg, regs) = {
    d : int = d__arg;
    m : int = m__arg;
    CheckAdvSIMDEnabled();
    let 'h = DIV(elements, 2);
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        if d == m then {
            D_set(d + r) = __UNKNOWN_bits(64)
        } else {
            foreach (e from 0 to (h - 1) by 1 in inc) {
                D_set(d + r) = Elem_set(D_read(d + r), 2 * e + 1, esize, Elem_read(Din_read(m + r), 2 * e, esize));
                D_set(m + r) = Elem_set(D_read(m + r), 2 * e, esize, Elem_read(Din_read(d + r), 2 * e + 1, esize))
            }
        }
    }
}

val decode_aarch32_instrs_VTRN_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VTRN_A1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VTRN_Op_A_txt(d, elements, esize, m, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3039) = {
    SEE = 3039;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VTRN_A1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VTRN_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VTRN_T1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VTRN_Op_A_txt(d, elements, esize, m, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3040) = {
    SEE = 3040;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VTRN_T1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_VTST_Op_A_txt : forall 'd 'elements 'esize 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VTST_Op_A_txt (d__arg, elements, esize, m, n, regs) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if not_bool(IsZero(Elem_read(D_read(n + r), e, esize) & Elem_read(D_read(m + r), e, esize))) then {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, Ones(esize))
            } else {
                D_set(d + r) = Elem_set(D_read(d + r), e, esize, Zeros(esize))
            }
        }
    }
}

val decode_aarch32_instrs_VTST_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VTST_A1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VTST_Op_A_txt(d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 3041) = {
    SEE = 3041;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VTST_A1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VTST_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VTST_T1enc_A_txt (D, size, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        if size == 0b11 then {
            throw(Error_Undefined())
        };
        let 'esize = (8 << UInt(size));
        let 'elements = DIV(64, esize);
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        let 'regs = if Q == 0b0 then 1 else 2;
        execute_aarch32_instrs_VTST_Op_A_txt(d, elements, esize, m, n, regs)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 3042) = {
    SEE = 3042;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VTST_T1enc_A_txt(D, size, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VUZP_Op_A_txt : forall 'd 'esize 'm ('quadword_operation : Bool),
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('m), bool('quadword_operation)) -> unit

function execute_aarch32_instrs_VUZP_Op_A_txt (d__arg, esize, m__arg, quadword_operation) = {
    d : int = d__arg;
    m : int = m__arg;
    zipped_d : bits(128) = undefined;
    zipped_q : bits(256) = undefined;
    CheckAdvSIMDEnabled();
    if quadword_operation then {
        if d == m then {
            Q_set((d >> 1)) = __UNKNOWN_bits(128)
        } else {
            let zipped_q : bits(256) = Q_read((m >> 1)) @ Q_read((d >> 1));
            foreach (e from 0 to (DIV(128, esize) - 1) by 1 in inc) {
                Q_set((d >> 1)) = Elem_set(Q_read((d >> 1)), e, esize, Elem_read(zipped_q, 2 * e, esize));
                Q_set((m >> 1)) = Elem_set(Q_read((m >> 1)), e, esize, Elem_read(zipped_q, 2 * e + 1, esize))
            }
        }
    } else {
        if d == m then {
            D_set(d) = __UNKNOWN_bits(64)
        } else {
            let zipped_d : bits(128) = D_read(m) @ D_read(d);
            foreach (e from 0 to (DIV(64, esize) - 1) by 1 in inc) {
                D_set(d) = Elem_set(D_read(d), e, esize, Elem_read(zipped_d, 2 * e, esize));
                D_set(m) = Elem_set(D_read(m), e, esize, Elem_read(zipped_d, 2 * e + 1, esize))
            }
        }
    }
}

val decode_aarch32_instrs_VUZP_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VUZP_A1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 | Q == 0b0 & size == 0b10 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let quadword_operation : bool = Q == 0b1;
        let 'esize = (8 << UInt(size));
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VUZP_Op_A_txt(d, esize, m, quadword_operation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3043) = {
    SEE = 3043;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VUZP_A1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VUZP_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VUZP_T1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 | Q == 0b0 & size == 0b10 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let quadword_operation : bool = Q == 0b1;
        let 'esize = (8 << UInt(size));
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VUZP_Op_A_txt(d, esize, m, quadword_operation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3044) = {
    SEE = 3044;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VUZP_T1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_VZIP_Op_A_txt : forall 'd 'esize 'm ('quadword_operation : Bool),
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('m), bool('quadword_operation)) -> unit

function execute_aarch32_instrs_VZIP_Op_A_txt (d, esize, m, quadword_operation) = {
    CheckAdvSIMDEnabled();
    if quadword_operation then {
        if d == m then {
            Q_set((d >> 1)) = __UNKNOWN_bits(128)
        } else {
            zipped_q : bits(256) = undefined;
            foreach (e from 0 to (DIV(128, esize) - 1) by 1 in inc) {
                zipped_q = Elem_set(zipped_q, 2 * e, esize, Elem_read(Q_read((d >> 1)), e, esize));
                zipped_q = Elem_set(zipped_q, 2 * e + 1, esize, Elem_read(Q_read((m >> 1)), e, esize))
            };
            Q_set((d >> 1)) = zipped_q[127 .. 0];
            Q_set((m >> 1)) = zipped_q[255 .. 128]
        }
    } else {
        if d == m then {
            D_set(d) = __UNKNOWN_bits(64)
        } else {
            zipped_d : bits(128) = undefined;
            foreach (e from 0 to (DIV(64, esize) - 1) by 1 in inc) {
                zipped_d = Elem_set(zipped_d, 2 * e, esize, Elem_read(D_read(d), e, esize));
                zipped_d = Elem_set(zipped_d, 2 * e + 1, esize, Elem_read(D_read(m), e, esize))
            };
            D_set(d) = zipped_d[63 .. 0];
            D_set(m) = zipped_d[127 .. 64]
        }
    }
}

val decode_aarch32_instrs_VZIP_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VZIP_A1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 | Q == 0b0 & size == 0b10 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let quadword_operation : bool = Q == 0b1;
        let 'esize = (8 << UInt(size));
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VZIP_Op_A_txt(d, esize, m, quadword_operation)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3045) = {
    SEE = 3045;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VZIP_A1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VZIP_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VZIP_T1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b11 | Q == 0b0 & size == 0b10 then {
            throw(Error_Undefined())
        };
        if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
            throw(Error_Undefined())
        };
        let quadword_operation : bool = Q == 0b1;
        let 'esize = (8 << UInt(size));
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_VZIP_Op_A_txt(d, esize, m, quadword_operation)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3046) = {
    SEE = 3046;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VZIP_T1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_WFE_Op_A_txt : unit -> unit

function execute_aarch32_instrs_WFE_Op_A_txt () = {
    if IsEventRegisterSet() then {
        ClearEventRegister()
    } else {
        if PSTATE.EL == EL0 then {
            AArch32_CheckForWFxTrap(EL1, WFxType_WFE)
        };
        if ((PSTATE.EL == EL0 | PSTATE.EL == EL1) & EL2Enabled()) & not_bool(IsInHost()) then {
            AArch32_CheckForWFxTrap(EL2, WFxType_WFE)
        };
        if HaveEL(EL3) & PSTATE.M != M32_Monitor then {
            AArch32_CheckForWFxTrap(EL3, WFxType_WFE)
        };
        let 'localtimeout = (1 << 64);
        WaitForEvent(localtimeout)
    }
}

val decode_aarch32_instrs_WFE_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_WFE_A1enc_A_txt cond = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        execute_aarch32_instrs_WFE_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3047) = {
    SEE = 3047;
    let cond = Slice(__opcode, 28, 4);
    if (((((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_WFE_A1enc_A_txt(cond)
    }
}

val decode_aarch32_instrs_WFE_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_WFE_T1enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_WFE_Op_A_txt()
    };
    ()
}

function clause __DecodeT16 ((pc, (0b1011111100100000 as __opcode)) if SEE < 3048) = {
    SEE = 3048;
    decode_aarch32_instrs_WFE_T1enc_A_txt()
}

val decode_aarch32_instrs_WFE_T2enc_A_txt : unit -> unit

function decode_aarch32_instrs_WFE_T2enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_WFE_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101011111000000000000010 as __opcode)) if SEE < 3049) = {
    SEE = 3049;
    if (((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_WFE_T2enc_A_txt()
    }
}

val execute_aarch32_instrs_WFI_Op_A_txt : unit -> unit

function execute_aarch32_instrs_WFI_Op_A_txt () = {
    if not_bool(InterruptPending()) then {
        if PSTATE.EL == EL0 then {
            AArch32_CheckForWFxTrap(EL1, WFxType_WFI)
        };
        if ((PSTATE.EL == EL0 | PSTATE.EL == EL1) & EL2Enabled()) & not_bool(IsInHost()) then {
            AArch32_CheckForWFxTrap(EL2, WFxType_WFI)
        };
        if HaveEL(EL3) & PSTATE.M != M32_Monitor then {
            AArch32_CheckForWFxTrap(EL3, WFxType_WFI)
        };
        let 'localtimeout = (1 << 64);
        WaitForInterrupt(localtimeout)
    };
    ()
}

val decode_aarch32_instrs_WFI_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_WFI_A1enc_A_txt cond = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        execute_aarch32_instrs_WFI_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3050) = {
    SEE = 3050;
    let cond = Slice(__opcode, 28, 4);
    if (((((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_WFI_A1enc_A_txt(cond)
    }
}

val decode_aarch32_instrs_WFI_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_WFI_T1enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_WFI_Op_A_txt()
    };
    ()
}

function clause __DecodeT16 ((pc, (0b1011111100110000 as __opcode)) if SEE < 3051) = {
    SEE = 3051;
    decode_aarch32_instrs_WFI_T1enc_A_txt()
}

val decode_aarch32_instrs_WFI_T2enc_A_txt : unit -> unit

function decode_aarch32_instrs_WFI_T2enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_WFI_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101011111000000000000011 as __opcode)) if SEE < 3052) = {
    SEE = 3052;
    if (((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_WFI_T2enc_A_txt()
    }
}

val execute_aarch32_instrs_YIELD_Op_A_txt : unit -> unit

function execute_aarch32_instrs_YIELD_Op_A_txt () = {
    Hint_Yield()
}

val decode_aarch32_instrs_YIELD_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_YIELD_A1enc_A_txt cond = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        execute_aarch32_instrs_YIELD_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3053) = {
    SEE = 3053;
    let cond = Slice(__opcode, 28, 4);
    if (((((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_YIELD_A1enc_A_txt(cond)
    }
}

val decode_aarch32_instrs_YIELD_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_YIELD_T1enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_YIELD_Op_A_txt()
    };
    ()
}

function clause __DecodeT16 ((pc, (0b1011111100010000 as __opcode)) if SEE < 3054) = {
    SEE = 3054;
    decode_aarch32_instrs_YIELD_T1enc_A_txt()
}

val decode_aarch32_instrs_YIELD_T2enc_A_txt : unit -> unit

function decode_aarch32_instrs_YIELD_T2enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_YIELD_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101011111000000000000001 as __opcode)) if SEE < 3055) = {
    SEE = 3055;
    if (((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_YIELD_T2enc_A_txt()
    }
}

val execute_aarch32_instrs_CPS_OpT_AS_txt : forall ('affectA : Bool) ('affectF : Bool) ('affectI : Bool) ('changemode : Bool) ('disable : Bool) ('enable : Bool).
  (bool('affectA), bool('affectF), bool('affectI), bool('changemode), bool('disable), bool('enable), bits(5)) -> unit

function execute_aarch32_instrs_CPS_OpT_AS_txt (affectA, affectF, affectI, changemode, disable, enable, mode) = {
    if PSTATE.EL != EL0 then {
        if enable then {
            if affectA then {
                PSTATE.A = 0b0
            };
            if affectI then {
                PSTATE.I = 0b0
            };
            if affectF then {
                PSTATE.F = 0b0
            };
            ()
        };
        if disable then {
            if affectA then {
                PSTATE.A = 0b1
            };
            if affectI then {
                PSTATE.I = 0b1
            };
            if affectF then {
                PSTATE.F = 0b1
            };
            ()
        };
        if changemode then {
            AArch32_WriteModeByInstr(mode)
        };
        ()
    };
    ()
}

val decode_aarch32_instrs_CPS_A1enc_AS_txt : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(5)) -> unit

function decode_aarch32_instrs_CPS_A1enc_AS_txt (imod, M, A, I, F, mode) = {
    if mode != 0b00000 & M == 0b0 then {
        throw(Error_Unpredictable())
    };
    if [imod[1]] == 0b1 & ((A @ I) @ F) == 0b000 | [imod[1]] == 0b0 & ((A @ I) @ F) != 0b000 then {
        throw(Error_Unpredictable())
    };
    let enable : bool = imod == 0b10;
    let disable : bool = imod == 0b11;
    let changemode : bool = M == 0b1;
    let affectA : bool = A == 0b1;
    let affectI : bool = I == 0b1;
    let affectF : bool = F == 0b1;
    if imod == 0b00 & M == 0b0 | imod == 0b01 then {
        throw(Error_Unpredictable())
    };
    execute_aarch32_instrs_CPS_OpT_AS_txt(affectA, affectF, affectI, changemode, disable, enable, mode)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 3056) = {
    SEE = 3056;
    let imod = Slice(__opcode, 18, 2);
    let M = Slice(__opcode, 17, 1);
    let A = Slice(__opcode, 8, 1);
    let I = Slice(__opcode, 7, 1);
    let F = Slice(__opcode, 6, 1);
    let mode = Slice(__opcode, 0, 5);
    if ((((([__opcode[9]] != 0b0 | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CPS_A1enc_AS_txt(imod, M, A, I, F, mode)
    }
}

val decode_aarch32_instrs_CPS_T1enc_AS_txt : (bits(1), bits(1), bits(1), bits(1)) -> unit

function decode_aarch32_instrs_CPS_T1enc_AS_txt (im, A, I, F) = {
    mode : bits(5) = undefined;
    if ((A @ I) @ F) == 0b000 then {
        throw(Error_Unpredictable())
    };
    let mode = mode;
    let enable : bool = im == 0b0;
    let disable : bool = im == 0b1;
    let changemode : bool = false;
    let affectA : bool = A == 0b1;
    let affectI : bool = I == 0b1;
    let affectF : bool = F == 0b1;
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    execute_aarch32_instrs_CPS_OpT_AS_txt(affectA, affectF, affectI, changemode, disable, enable, mode)
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, _, bitzero, _, _, _] as __opcode)) if SEE < 3057) = {
    SEE = 3057;
    let im = Slice(__opcode, 4, 1);
    let A = Slice(__opcode, 2, 1);
    let I = Slice(__opcode, 1, 1);
    let F = Slice(__opcode, 0, 1);
    decode_aarch32_instrs_CPS_T1enc_AS_txt(im, A, I, F)
}

val decode_aarch32_instrs_CPS_T2enc_AS_txt : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(5)) -> unit

function decode_aarch32_instrs_CPS_T2enc_AS_txt (imod, M, A, I, F, mode) = {
    if imod == 0b00 & M == 0b0 then {
        throw(Error_See("Hint instructions"))
    };
    if mode != 0b00000 & M == 0b0 then {
        throw(Error_Unpredictable())
    };
    if [imod[1]] == 0b1 & ((A @ I) @ F) == 0b000 | [imod[1]] == 0b0 & ((A @ I) @ F) != 0b000 then {
        throw(Error_Unpredictable())
    };
    let enable : bool = imod == 0b10;
    let disable : bool = imod == 0b11;
    let changemode : bool = M == 0b1;
    let affectA : bool = A == 0b1;
    let affectI : bool = I == 0b1;
    let affectF : bool = F == 0b1;
    if imod == 0b01 | InITBlock() then {
        throw(Error_Unpredictable())
    };
    execute_aarch32_instrs_CPS_OpT_AS_txt(affectA, affectF, affectI, changemode, disable, enable, mode)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3058) = {
    SEE = 3058;
    let imod = Slice(__opcode, 9, 2);
    let M = Slice(__opcode, 8, 1);
    let A = Slice(__opcode, 7, 1);
    let I = Slice(__opcode, 6, 1);
    let F = Slice(__opcode, 5, 1);
    let mode = Slice(__opcode, 0, 5);
    if (((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CPS_T2enc_AS_txt(imod, M, A, I, F, mode)
    }
}

val execute_aarch32_instrs_ERET_Op_AS_txt : unit -> unit

function execute_aarch32_instrs_ERET_Op_AS_txt () = {
    new_pc_value : ELR_hyp_Type = undefined;
    if not_bool(Halted()) then {
        if PSTATE.M == M32_User | PSTATE.M == M32_System then {
            throw(Error_Unpredictable())
        } else {
            let new_pc_value : ELR_hyp_Type = if PSTATE.EL == EL2 then
              ELR_hyp_read()
            else
              R_read(14);
            AArch32_ExceptionReturn(new_pc_value, SPSR_read(32))
        }
    } else {
        if PSTATE.M == M32_User then {
            throw(Error_Undefined())
        } else if PSTATE.M == M32_System then {
            throw(Error_Unpredictable())
        } else {
            SynchronizeContext();
            DebugRestorePSR()
        }
    }
}

val decode_aarch32_instrs_ERET_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_ERET_A1enc_A_txt cond = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        execute_aarch32_instrs_ERET_Op_AS_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3059) = {
    SEE = 3059;
    let cond = Slice(__opcode, 28, 4);
    if (((((((((((((([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0) | [__opcode[16]] != 0b0) | [__opcode[17]] != 0b0) | [__opcode[18]] != 0b0) | [__opcode[19]] != 0b0) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_ERET_A1enc_A_txt(cond)
    }
}

val decode_aarch32_instrs_ERET_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_ERET_T1enc_A_txt () = {
    if ConditionPassed() then {
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ERET_Op_AS_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011110111101000111100000000 as __opcode)) if SEE < 3060) = {
    SEE = 3060;
    if ((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b0) | [__opcode[13]] != 0b0) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_ERET_T1enc_A_txt()
    }
}

val execute_aarch32_instrs_HVC_Op_AS_txt : bits(16) -> unit

function execute_aarch32_instrs_HVC_Op_AS_txt imm16 = {
    if (not_bool(HaveEL(EL2)) | PSTATE.EL == EL0) | IsSecure() & not_bool(IsSecureEL2Enabled()) then {
        throw(Error_Undefined())
    };
    hvc_enable : bits(1) = undefined;
    if HaveEL(EL3) then {
        if (ELUsingAArch32(EL3) & SCR[HCE] == 0b0) & PSTATE.EL == EL2 then {
            throw(Error_Unpredictable())
        } else {
            hvc_enable = SCR_GEN_read()[HCE]
        }
    } else {
        hvc_enable = if ELUsingAArch32(EL2) then not_vec(HCR_read()[HCD]) else
          not_vec(HCR_EL2[HCD])
    };
    if hvc_enable == 0b0 then {
        throw(Error_Undefined())
    } else {
        AArch32_CallHypervisor(imm16)
    }
}

val decode_aarch32_instrs_HVC_A1enc_A_txt : (bits(4), bits(12), bits(4)) -> unit

function decode_aarch32_instrs_HVC_A1enc_A_txt (cond, imm12, imm4) = {
    assert(cond != 0b1111);
    if cond != 0b1110 then {
        throw(Error_Unpredictable())
    };
    let imm16 : bits(16) = imm12 @ imm4;
    execute_aarch32_instrs_HVC_Op_AS_txt(imm16)
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3061) = {
    SEE = 3061;
    let cond = Slice(__opcode, 28, 4);
    let imm12 = Slice(__opcode, 8, 12);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_HVC_A1enc_A_txt(cond, imm12, imm4)
}

val decode_aarch32_instrs_HVC_T1enc_A_txt : (bits(4), bits(12)) -> unit

function decode_aarch32_instrs_HVC_T1enc_A_txt (imm4, imm12) = {
    let imm16 : bits(16) = imm4 @ imm12;
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    execute_aarch32_instrs_HVC_Op_AS_txt(imm16)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3062) = {
    SEE = 3062;
    let imm4 = Slice(__opcode, 16, 4);
    let imm12 = Slice(__opcode, 0, 12);
    decode_aarch32_instrs_HVC_T1enc_A_txt(imm4, imm12)
}

val execute_aarch32_instrs_LDM_e_Op_AS_txt : forall ('increment_name : Bool) 'n ('wback : Bool) ('wordhigher : Bool),
  (0 <= 'n & 'n <= 15).
  (bool('increment_name), int('n), bits(15), bool('wback), bool('wordhigher)) -> unit

function execute_aarch32_instrs_LDM_e_Op_AS_txt (increment_name, n, registers, wback, wordhigher) = {
    address : bits(32) = undefined;
    length : int = undefined;
    new_pc_value : bits(32) = undefined;
    if PSTATE.EL == EL2 then {
        throw(Error_Undefined())
    } else if PSTATE.M == M32_User | PSTATE.M == M32_System then {
        throw(Error_Unpredictable())
    } else {
        let 'length = 4 * BitCount(registers) + 4;
        address : bits(32) = if increment_name then R_read(n) else
          R_read(n) - length;
        if wordhigher then {
            address = address + 4
        };
        foreach (i from 0 to 14 by 1 in inc) {
            if [registers[i]] == 0b1 then {
                R_set(i) = MemS_read(address, 4);
                address = address + 4
            };
            ()
        };
        let new_pc_value : bits(32) = MemS_read(address, 4);
        assert(constraint('n < 15));
        if wback & [registers[n]] == 0b0 then {
            R_set(n) = if increment_name then R_read(n) + length else
              R_read(n) - length
        };
        if wback & [registers[n]] == 0b1 then {
            R_set(n) = __UNKNOWN_bits(32)
        };
        AArch32_ExceptionReturn(new_pc_value, SPSR_read(32))
    }
}

val decode_aarch32_instrs_LDM_e_A1enc_AS_txt : (bits(4), bits(1), bits(1), bits(1), bits(4), bits(15)) -> unit

function decode_aarch32_instrs_LDM_e_A1enc_AS_txt (cond, P, U, W, Rn, register_list) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let registers : bits(15) = register_list;
        let wback : bool = W == 0b1;
        let increment_name : bool = U == 0b1;
        let wordhigher : bool = P == U;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        if wback & [registers[n]] == 0b1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDM_e_Op_AS_txt(increment_name, n, registers, wback, wordhigher)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitzero, _, _, bitone, _, bitone, _, _, _, _, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3063) = {
    SEE = 3063;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    let register_list = Slice(__opcode, 0, 15);
    decode_aarch32_instrs_LDM_e_A1enc_AS_txt(cond, P, U, W, Rn, register_list)
}

val execute_aarch32_instrs_LDM_u_Op_AS_txt : forall ('increment_name : Bool) 'n ('wordhigher : Bool),
  (0 <= 'n & 'n <= 15).
  (bool('increment_name), int('n), bits(15), bool('wordhigher)) -> unit

function execute_aarch32_instrs_LDM_u_Op_AS_txt (increment_name, n, registers, wordhigher) = {
    address : bits(32) = undefined;
    length : int = undefined;
    if PSTATE.EL == EL2 then {
        throw(Error_Undefined())
    } else if PSTATE.M == M32_User | PSTATE.M == M32_System then {
        throw(Error_Unpredictable())
    } else {
        let 'length = 4 * BitCount(registers);
        address : bits(32) = if increment_name then R_read(n) else
          R_read(n) - length;
        if wordhigher then {
            address = address + 4
        };
        foreach (i from 0 to 14 by 1 in inc) {
            if [registers[i]] == 0b1 then {
                Rmode_set(i, M32_User) = MemS_read(address, 4);
                address = address + 4
            };
            ()
        }
    }
}

val decode_aarch32_instrs_LDM_u_A1enc_AS_txt : (bits(4), bits(1), bits(1), bits(4), bits(15)) -> unit

function decode_aarch32_instrs_LDM_u_A1enc_AS_txt (cond, P, U, Rn, register_list) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let registers : bits(15) = register_list;
        let increment_name : bool = U == 0b1;
        let wordhigher : bool = P == U;
        if n == 15 | BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDM_u_Op_AS_txt(increment_name, n, registers, wordhigher)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3064) = {
    SEE = 3064;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let register_list = Slice(__opcode, 0, 15);
    if [__opcode[21]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDM_u_A1enc_AS_txt(cond, P, U, Rn, register_list)
    }
}

val execute_aarch32_instrs_MRS_Op_AS_txt : forall 'd ('read_spsr : Bool), (0 <= 'd & 'd <= 15).
  (int('d), bool('read_spsr)) -> unit

function execute_aarch32_instrs_MRS_Op_AS_txt (d, read_spsr) = {
    psr_val : bits(32) = undefined;
    if read_spsr then {
        if PSTATE.M == M32_User | PSTATE.M == M32_System then {
            throw(Error_Unpredictable())
        } else {
            R_set(d) = SPSR_read(32)
        }
    } else {
        let mask : bits(32) = 0b11111000111011110000001111011111;
        psr_val : bits(32) = GetPSRFromPSTATE(32, AArch32_NonDebugState) & mask;
        if PSTATE.EL == EL0 then {
            psr_val[22] = Bit(__UNKNOWN_bits(1));
            psr_val[9 .. 6] = __UNKNOWN_bits(4);
            psr_val[4 .. 0] = __UNKNOWN_bits(5)
        };
        R_set(d) = psr_val
    }
}

val decode_aarch32_instrs_MRS_A1enc_AS_txt : (bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_MRS_A1enc_AS_txt (cond, R, Rd) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let read_spsr : bool = R == 0b1;
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MRS_Op_AS_txt(d, read_spsr)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3065) = {
    SEE = 3065;
    let cond = Slice(__opcode, 28, 4);
    let R = Slice(__opcode, 22, 1);
    let Rd = Slice(__opcode, 12, 4);
    if ((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0) | [__opcode[8]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MRS_A1enc_AS_txt(cond, R, Rd)
    }
}

val decode_aarch32_instrs_MRS_T1enc_AS_txt : (bits(1), bits(4)) -> unit

function decode_aarch32_instrs_MRS_T1enc_AS_txt (R, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let read_spsr : bool = R == 0b1;
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MRS_Op_AS_txt(d, read_spsr)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 3066) = {
    SEE = 3066;
    let R = Slice(__opcode, 20, 1);
    let Rd = Slice(__opcode, 8, 4);
    if (((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[6]] != 0b0) | [__opcode[7]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0) | [__opcode[4]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MRS_T1enc_AS_txt(R, Rd)
    }
}

val execute_aarch32_instrs_MRS_br_Op_AS_txt : forall 'd ('read_spsr : Bool), (0 <= 'd & 'd <= 15).
  (bits(5), int('d), bool('read_spsr)) -> unit

function execute_aarch32_instrs_MRS_br_Op_AS_txt (SYSm, d, read_spsr) = {
    m : int = undefined;
    mode : bits(5) = undefined;
    if PSTATE.EL == EL0 then {
        throw(Error_Unpredictable())
    } else {
        let mode : bits(5) = PSTATE.M;
        if read_spsr then {
            SPSRaccessValid(SYSm, mode);
            match SYSm {
              0b01110 => {
                  R_set(d) = SPSR_fiq.bits[31 .. 0]
              },
              0b10000 => {
                  R_set(d) = SPSR_irq.bits[31 .. 0]
              },
              0b10010 => {
                  R_set(d) = SPSR_svc_read().bits[31 .. 0]
              },
              0b10100 => {
                  R_set(d) = SPSR_abt.bits[31 .. 0]
              },
              0b10110 => {
                  R_set(d) = SPSR_und.bits[31 .. 0]
              },
              0b11100 => {
                  if not_bool(ELUsingAArch32(EL3)) then {
                      AArch64_MonitorModeTrap()
                  };
                  R_set(d) = SPSR_mon.bits
              },
              0b11110 => {
                  R_set(d) = SPSR_hyp_read().bits[31 .. 0]
              },
              _ => ()
            }
        } else {
            BankedRegisterAccessValid(SYSm, mode);
            match SYSm {
              [bitzero, bitzero, _, _, _] => {
                  let 'm = UInt(SYSm[2 .. 0]) + 8;
                  R_set(d) = Rmode_read(m, M32_User)
              },
              [bitzero, bitone, _, _, _] => {
                  let 'm = UInt(SYSm[2 .. 0]) + 8;
                  R_set(d) = Rmode_read(m, M32_FIQ)
              },
              [bitone, bitzero, bitzero, bitzero, _] => {
                  let 'm = 14 - UInt([SYSm[0]]);
                  R_set(d) = Rmode_read(m, M32_IRQ)
              },
              [bitone, bitzero, bitzero, bitone, _] => {
                  let 'm = 14 - UInt([SYSm[0]]);
                  R_set(d) = Rmode_read(m, M32_Svc)
              },
              [bitone, bitzero, bitone, bitzero, _] => {
                  let 'm = 14 - UInt([SYSm[0]]);
                  R_set(d) = Rmode_read(m, M32_Abort)
              },
              [bitone, bitzero, bitone, bitone, _] => {
                  let 'm = 14 - UInt([SYSm[0]]);
                  R_set(d) = Rmode_read(m, M32_Undef)
              },
              [bitone, bitone, bitone, bitzero, _] => {
                  if not_bool(ELUsingAArch32(EL3)) then {
                      AArch64_MonitorModeTrap()
                  };
                  let 'm = 14 - UInt([SYSm[0]]);
                  R_set(d) = Rmode_read(m, M32_Monitor)
              },
              0b11110 => {
                  R_set(d) = ELR_hyp_read()
              },
              0b11111 => {
                  R_set(d) = Rmode_read(13, M32_Hyp)
              },
              _ => ()
            }
        }
    }
}

val decode_aarch32_instrs_MRS_br_A1enc_AS_txt : (bits(4), bits(1), bits(4), bits(4), bits(1)) -> unit

function decode_aarch32_instrs_MRS_br_A1enc_AS_txt (cond, R, M1, Rd, M) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let read_spsr : bool = R == 0b1;
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        let SYSm : bits(5) = M @ M1;
        execute_aarch32_instrs_MRS_br_Op_AS_txt(SYSm, d, read_spsr)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3067) = {
    SEE = 3067;
    let cond = Slice(__opcode, 28, 4);
    let R = Slice(__opcode, 22, 1);
    let M1 = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 8, 1);
    if (((([__opcode[10]] != 0b0 | [__opcode[11]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MRS_br_A1enc_AS_txt(cond, R, M1, Rd, M)
    }
}

val decode_aarch32_instrs_MRS_br_T1enc_AS_txt : (bits(1), bits(4), bits(4), bits(1)) -> unit

function decode_aarch32_instrs_MRS_br_T1enc_AS_txt (R, M1, Rd, M) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let read_spsr : bool = R == 0b1;
        if d == 15 then {
            throw(Error_Unpredictable())
        };
        let SYSm : bits(5) = M @ M1;
        execute_aarch32_instrs_MRS_br_Op_AS_txt(SYSm, d, read_spsr)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 3068) = {
    SEE = 3068;
    let R = Slice(__opcode, 20, 1);
    let M1 = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 4, 1);
    if ((((([__opcode[13]] != 0b0 | [__opcode[6]] != 0b0) | [__opcode[7]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MRS_br_T1enc_AS_txt(R, M1, Rd, M)
    }
}

val execute_aarch32_instrs_MSR_br_Op_AS_txt : forall 'n ('write_spsr : Bool),
  (0 <= 'n & 'n <= 15).
  (bits(5), int('n), bool('write_spsr)) -> unit

function execute_aarch32_instrs_MSR_br_Op_AS_txt (SYSm, n, write_spsr) = {
    m : int = undefined;
    mode : bits(5) = undefined;
    if PSTATE.EL == EL0 then {
        throw(Error_Unpredictable())
    } else {
        let mode : bits(5) = PSTATE.M;
        if write_spsr then {
            SPSRaccessValid(SYSm, mode);
            match SYSm {
              0b01110 => {
                  SPSR_fiq = Mk_SPSR_fiq_Type(ZeroExtend(R_read(n)))
              },
              0b10000 => {
                  SPSR_irq = Mk_SPSR_irq_Type(ZeroExtend(R_read(n)))
              },
              0b10010 => {
                  SPSR_svc_write() = Mk_SPSR_svc_Type(ZeroExtend(R_read(n)))
              },
              0b10100 => {
                  SPSR_abt = Mk_SPSR_abt_Type(ZeroExtend(R_read(n)))
              },
              0b10110 => {
                  SPSR_und = Mk_SPSR_und_Type(ZeroExtend(R_read(n)))
              },
              0b11100 => {
                  if not_bool(ELUsingAArch32(EL3)) then {
                      AArch64_MonitorModeTrap()
                  };
                  SPSR_mon = Mk_SPSR_mon_Type(R_read(n))
              },
              0b11110 => {
                  SPSR_hyp_write() = Mk_SPSR_hyp_Type(R_read(n))
              },
              _ => ()
            }
        } else {
            BankedRegisterAccessValid(SYSm, mode);
            match SYSm {
              [bitzero, bitzero, _, _, _] => {
                  let 'm = UInt(SYSm[2 .. 0]) + 8;
                  Rmode_set(m, M32_User) = R_read(n)
              },
              [bitzero, bitone, _, _, _] => {
                  let 'm = UInt(SYSm[2 .. 0]) + 8;
                  Rmode_set(m, M32_FIQ) = R_read(n)
              },
              [bitone, bitzero, bitzero, bitzero, _] => {
                  let 'm = 14 - UInt([SYSm[0]]);
                  Rmode_set(m, M32_IRQ) = R_read(n)
              },
              [bitone, bitzero, bitzero, bitone, _] => {
                  let 'm = 14 - UInt([SYSm[0]]);
                  Rmode_set(m, M32_Svc) = R_read(n)
              },
              [bitone, bitzero, bitone, bitzero, _] => {
                  let 'm = 14 - UInt([SYSm[0]]);
                  Rmode_set(m, M32_Abort) = R_read(n)
              },
              [bitone, bitzero, bitone, bitone, _] => {
                  let 'm = 14 - UInt([SYSm[0]]);
                  Rmode_set(m, M32_Undef) = R_read(n)
              },
              [bitone, bitone, bitone, bitzero, _] => {
                  if not_bool(ELUsingAArch32(EL3)) then {
                      AArch64_MonitorModeTrap()
                  };
                  let 'm = 14 - UInt([SYSm[0]]);
                  Rmode_set(m, M32_Monitor) = R_read(n)
              },
              0b11110 => {
                  ELR_hyp_write() = R_read(n)
              },
              0b11111 => {
                  Rmode_set(13, M32_Hyp) = R_read(n)
              },
              _ => ()
            }
        }
    }
}

val decode_aarch32_instrs_MSR_br_A1enc_AS_txt : (bits(4), bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_MSR_br_A1enc_AS_txt (cond, R, M1, M, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let write_spsr : bool = R == 0b1;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        let SYSm : bits(5) = M @ M1;
        execute_aarch32_instrs_MSR_br_Op_AS_txt(SYSm, n, write_spsr)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3069) = {
    SEE = 3069;
    let cond = Slice(__opcode, 28, 4);
    let R = Slice(__opcode, 22, 1);
    let M1 = Slice(__opcode, 16, 4);
    let M = Slice(__opcode, 8, 1);
    let Rn = Slice(__opcode, 0, 4);
    if (((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MSR_br_A1enc_AS_txt(cond, R, M1, M, Rn)
    }
}

val decode_aarch32_instrs_MSR_br_T1enc_AS_txt : (bits(1), bits(4), bits(4), bits(1)) -> unit

function decode_aarch32_instrs_MSR_br_T1enc_AS_txt (R, Rn, M1, M) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let write_spsr : bool = R == 0b1;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        let SYSm : bits(5) = M @ M1;
        execute_aarch32_instrs_MSR_br_Op_AS_txt(SYSm, n, write_spsr)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 3070) = {
    SEE = 3070;
    let R = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let M1 = Slice(__opcode, 8, 4);
    let M = Slice(__opcode, 4, 1);
    if ((((([__opcode[13]] != 0b0 | [__opcode[6]] != 0b0) | [__opcode[7]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MSR_br_T1enc_AS_txt(R, Rn, M1, M)
    }
}

val execute_aarch32_instrs_MSR_i_Op_AS_txt : forall ('write_spsr : Bool).
  (bits(32), bits(4), bool('write_spsr)) -> unit

function execute_aarch32_instrs_MSR_i_Op_AS_txt (imm32, mask, write_spsr) = {
    if write_spsr then {
        if PSTATE.M == M32_User | PSTATE.M == M32_System then {
            throw(Error_Unpredictable())
        } else {
            SPSRWriteByInstr(imm32, mask)
        }
    } else {
        CPSRWriteByInstr(imm32, mask)
    }
}

val decode_aarch32_instrs_MSR_i_A1enc_AS_txt : (bits(4), bits(1), bits(4), bits(12)) -> unit

function decode_aarch32_instrs_MSR_i_A1enc_AS_txt (cond, R, mask, imm12) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if mask == 0b0000 & R == 0b0 then {
            throw(Error_See("Related encodings"))
        };
        let imm32 : bits(32) = A32ExpandImm(imm12);
        let write_spsr : bool = R == 0b1;
        if mask == 0b0000 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MSR_i_Op_AS_txt(imm32, mask, write_spsr)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3071) = {
    SEE = 3071;
    let cond = Slice(__opcode, 28, 4);
    let R = Slice(__opcode, 22, 1);
    let mask = Slice(__opcode, 16, 4);
    let imm12 = Slice(__opcode, 0, 12);
    if (([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MSR_i_A1enc_AS_txt(cond, R, mask, imm12)
    }
}

val execute_aarch32_instrs_MSR_r_Op_AS_txt : forall 'n ('write_spsr : Bool),
  (0 <= 'n & 'n <= 15).
  (bits(4), int('n), bool('write_spsr)) -> unit

function execute_aarch32_instrs_MSR_r_Op_AS_txt (mask, n, write_spsr) = {
    if write_spsr then {
        if PSTATE.M == M32_User | PSTATE.M == M32_System then {
            throw(Error_Unpredictable())
        } else {
            SPSRWriteByInstr(R_read(n), mask)
        }
    } else {
        CPSRWriteByInstr(R_read(n), mask)
    }
}

val decode_aarch32_instrs_MSR_r_A1enc_AS_txt : (bits(4), bits(1), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MSR_r_A1enc_AS_txt (cond, R, mask, Rn) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let write_spsr : bool = R == 0b1;
        if mask == 0b0000 then {
            throw(Error_Unpredictable())
        };
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MSR_r_Op_AS_txt(mask, n, write_spsr)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3072) = {
    SEE = 3072;
    let cond = Slice(__opcode, 28, 4);
    let R = Slice(__opcode, 22, 1);
    let mask = Slice(__opcode, 16, 4);
    let Rn = Slice(__opcode, 0, 4);
    if ((((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0) | [__opcode[8]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MSR_r_A1enc_AS_txt(cond, R, mask, Rn)
    }
}

val decode_aarch32_instrs_MSR_r_T1enc_AS_txt : (bits(1), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_MSR_r_T1enc_AS_txt (R, Rn, mask) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let write_spsr : bool = R == 0b1;
        if mask == 0b0000 then {
            throw(Error_Unpredictable())
        };
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_MSR_r_Op_AS_txt(mask, n, write_spsr)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 3073) = {
    SEE = 3073;
    let R = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let mask = Slice(__opcode, 8, 4);
    if (((((([__opcode[13]] != 0b0 | [__opcode[6]] != 0b0) | [__opcode[7]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0) | [__opcode[4]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_MSR_r_T1enc_AS_txt(R, Rn, mask)
    }
}

val execute_aarch32_instrs_RFE_Op_AS_txt : forall ('increment_name : Bool) 'n ('wback : Bool) ('wordhigher : Bool),
  (0 <= 'n & 'n <= 15).
  (bool('increment_name), int('n), bool('wback), bool('wordhigher)) -> unit

function execute_aarch32_instrs_RFE_Op_AS_txt (increment_name, n, wback, wordhigher) = {
    address : bits(32) = undefined;
    new_pc_value : bits(32) = undefined;
    spsr : bits(32) = undefined;
    if PSTATE.EL == EL2 then {
        throw(Error_Undefined())
    } else if PSTATE.EL == EL0 then {
        throw(Error_Unpredictable())
    } else {
        address : bits(32) = if increment_name then R_read(n) else R_read(n) - 8;
        if wordhigher then {
            address = address + 4
        };
        let new_pc_value : bits(32) = MemA_read(address, 4);
        let spsr : bits(32) = MemA_read(address + 4, 4);
        if wback then {
            R_set(n) = if increment_name then R_read(n) + 8 else R_read(n) - 8
        };
        AArch32_ExceptionReturn(new_pc_value, spsr)
    }
}

val decode_aarch32_instrs_RFE_A1enc_AS_txt : (bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_RFE_A1enc_AS_txt (P, U, W, Rn) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let wback : bool = W == 0b1;
        let increment_name : bool = U == 0b1;
        let wordhigher : bool = P == U;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_RFE_Op_AS_txt(increment_name, n, wback, wordhigher)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, bitzero, _, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 3074) = {
    SEE = 3074;
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    if (((((((((([__opcode[12]] != 0b0 | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0) | [__opcode[4]] != 0b0) | [__opcode[5]] != 0b0) | [__opcode[6]] != 0b0) | [__opcode[7]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_RFE_A1enc_AS_txt(P, U, W, Rn)
    }
}

val decode_aarch32_instrs_RFE_T1enc_AS_txt : (bits(1), bits(4)) -> unit

function decode_aarch32_instrs_RFE_T1enc_AS_txt (W, Rn) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let wback : bool = W == 0b1;
        let increment_name : bool = false;
        let wordhigher : bool = false;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_RFE_Op_AS_txt(increment_name, n, wback, wordhigher)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 3075) = {
    SEE = 3075;
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    if (((((((((((((([__opcode[14]] != 0b1 | [__opcode[15]] != 0b1) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0) | [__opcode[4]] != 0b0) | [__opcode[5]] != 0b0) | [__opcode[6]] != 0b0) | [__opcode[7]] != 0b0) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_RFE_T1enc_AS_txt(W, Rn)
    }
}

val decode_aarch32_instrs_RFE_T2enc_AS_txt : (bits(1), bits(4)) -> unit

function decode_aarch32_instrs_RFE_T2enc_AS_txt (W, Rn) = {
    if ConditionPassed() then {
        let 'n = UInt(Rn);
        let wback : bool = W == 0b1;
        let increment_name : bool = true;
        let wordhigher : bool = false;
        if n == 15 then {
            throw(Error_Unpredictable())
        };
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_RFE_Op_AS_txt(increment_name, n, wback, wordhigher)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitone, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 3076) = {
    SEE = 3076;
    let W = Slice(__opcode, 21, 1);
    let Rn = Slice(__opcode, 16, 4);
    if (((((((((((((([__opcode[14]] != 0b1 | [__opcode[15]] != 0b1) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0) | [__opcode[4]] != 0b0) | [__opcode[5]] != 0b0) | [__opcode[6]] != 0b0) | [__opcode[7]] != 0b0) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_RFE_T2enc_AS_txt(W, Rn)
    }
}

val execute_aarch32_instrs_SMC_Op_AS_txt : unit -> unit

function execute_aarch32_instrs_SMC_Op_AS_txt () = {
    c : Constraint = undefined;
    AArch32_CheckForSMCUndefOrTrap();
    if not_bool(ELUsingAArch32(EL3)) then {
        if SCR_EL3[SMD] == 0b1 then {
            throw(Error_Undefined())
        };
        ()
    } else {
        if SCR[SCD] == 0b1 then {
            if IsSecure() then {
                let c : Constraint = ConstrainUnpredictable(Unpredictable_SMD);
                assert(c == Constraint_NOP | c == Constraint_UNDEF);
                if c == Constraint_NOP then {
                    EndOfInstruction()
                };
                ()
            };
            throw(Error_Undefined())
        };
        ()
    };
    if not_bool(ELUsingAArch32(EL3)) then {
        AArch64_CallSecureMonitor(Zeros(16))
    } else {
        AArch32_TakeSMCException()
    }
}

val decode_aarch32_instrs_SMC_A1enc_AS_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_SMC_A1enc_AS_txt (cond, imm4) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        execute_aarch32_instrs_SMC_Op_AS_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3077) = {
    SEE = 3077;
    let cond = Slice(__opcode, 28, 4);
    let imm4 = Slice(__opcode, 0, 4);
    if (((((((((([__opcode[8]] != 0b0 | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0) | [__opcode[16]] != 0b0) | [__opcode[17]] != 0b0) | [__opcode[18]] != 0b0) | [__opcode[19]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SMC_A1enc_AS_txt(cond, imm4)
    }
}

val decode_aarch32_instrs_SMC_T1enc_AS_txt : bits(4) -> unit

function decode_aarch32_instrs_SMC_T1enc_AS_txt imm4 = {
    if ConditionPassed() then {
        if InITBlock() & not_bool(LastInITBlock()) then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SMC_Op_AS_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 3078) = {
    SEE = 3078;
    let imm4 = Slice(__opcode, 16, 4);
    if (((((((((([__opcode[0]] != 0b0 | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0) | [__opcode[4]] != 0b0) | [__opcode[5]] != 0b0) | [__opcode[6]] != 0b0) | [__opcode[7]] != 0b0) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SMC_T1enc_AS_txt(imm4)
    }
}

val execute_aarch32_instrs_SRS_OpA_AS_txt : forall ('increment_name : Bool) ('wback : Bool) ('wordhigher : Bool).
  (bool('increment_name), bits(5), bool('wback), bool('wordhigher)) -> unit

function execute_aarch32_instrs_SRS_OpA_AS_txt (increment_name, mode, wback, wordhigher) = {
    if PSTATE.EL == EL2 then {
        throw(Error_Undefined())
    };
    if PSTATE.M == M32_User | PSTATE.M == M32_System then {
        throw(Error_Unpredictable())
    } else if mode == M32_Hyp then {
        throw(Error_Unpredictable())
    } else if mode == M32_Monitor then {
        if not_bool(HaveEL(EL3)) | not_bool(IsSecure()) then {
            throw(Error_Unpredictable())
        } else if not_bool(ELUsingAArch32(EL3)) then {
            AArch64_MonitorModeTrap()
        } else ()
    } else if BadMode(mode) then {
        throw(Error_Unpredictable())
    } else ();
    let base : bits(32) = Rmode_read(13, mode);
    address : bits(32) = if increment_name then base else base - 8;
    if wordhigher then {
        address = address + 4
    };
    MemA_set(address, 4) = LR_read();
    MemA_set(address + 4, 4) = SPSR_read(8 * 4);
    if wback then {
        Rmode_set(13, mode) = if increment_name then base + 8 else base - 8
    };
    ()
}

val decode_aarch32_instrs_SRS_A1enc_AS_txt : (bits(1), bits(1), bits(1), bits(5)) -> unit

function decode_aarch32_instrs_SRS_A1enc_AS_txt (P, U, W, mode) = {
    if ConditionPassed() then {
        let wback : bool = W == 0b1;
        let increment_name : bool = U == 0b1;
        let wordhigher : bool = P == U;
        execute_aarch32_instrs_SRS_OpA_AS_txt(increment_name, mode, wback, wordhigher)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, bitone, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 3079) = {
    SEE = 3079;
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let W = Slice(__opcode, 21, 1);
    let mode = Slice(__opcode, 0, 5);
    if ((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b0) | [__opcode[19]] != 0b1) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0) | [__opcode[5]] != 0b0) | [__opcode[6]] != 0b0) | [__opcode[7]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SRS_A1enc_AS_txt(P, U, W, mode)
    }
}

val execute_aarch32_instrs_SRS_OpT_AS_txt : forall ('increment_name : Bool) ('wback : Bool) ('wordhigher : Bool).
  (bool('increment_name), bits(5), bool('wback), bool('wordhigher)) -> unit

function execute_aarch32_instrs_SRS_OpT_AS_txt (increment_name, mode, wback, wordhigher) = {
    if PSTATE.EL == EL2 then {
        throw(Error_Undefined())
    };
    if PSTATE.M == M32_User | PSTATE.M == M32_System then {
        throw(Error_Unpredictable())
    } else if mode == M32_Hyp then {
        throw(Error_Unpredictable())
    } else if mode == M32_Monitor then {
        if not_bool(HaveEL(EL3)) | not_bool(IsSecure()) then {
            throw(Error_Unpredictable())
        } else if not_bool(ELUsingAArch32(EL3)) then {
            AArch64_MonitorModeTrap()
        } else ()
    } else if BadMode(mode) then {
        throw(Error_Unpredictable())
    } else ();
    let base : bits(32) = Rmode_read(13, mode);
    address : bits(32) = if increment_name then base else base - 8;
    if wordhigher then {
        address = address + 4
    };
    MemA_set(address, 4) = LR_read();
    MemA_set(address + 4, 4) = SPSR_read(8 * 4);
    if wback then {
        Rmode_set(13, mode) = if increment_name then base + 8 else base - 8
    };
    ()
}

val decode_aarch32_instrs_SRS_T1enc_AS_txt : (bits(1), bits(5)) -> unit

function decode_aarch32_instrs_SRS_T1enc_AS_txt (W, mode) = {
    if ConditionPassed() then {
        let wback : bool = W == 0b1;
        let increment_name : bool = false;
        let wordhigher : bool = false;
        execute_aarch32_instrs_SRS_OpT_AS_txt(increment_name, mode, wback, wordhigher)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 3080) = {
    SEE = 3080;
    let W = Slice(__opcode, 21, 1);
    let mode = Slice(__opcode, 0, 5);
    if ((((((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b0) | [__opcode[19]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[5]] != 0b0) | [__opcode[6]] != 0b0) | [__opcode[7]] != 0b0) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SRS_T1enc_AS_txt(W, mode)
    }
}

val decode_aarch32_instrs_SRS_T2enc_AS_txt : (bits(1), bits(5)) -> unit

function decode_aarch32_instrs_SRS_T2enc_AS_txt (W, mode) = {
    if ConditionPassed() then {
        let wback : bool = W == 0b1;
        let increment_name : bool = true;
        let wordhigher : bool = false;
        execute_aarch32_instrs_SRS_OpT_AS_txt(increment_name, mode, wback, wordhigher)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 3081) = {
    SEE = 3081;
    let W = Slice(__opcode, 21, 1);
    let mode = Slice(__opcode, 0, 5);
    if ((((((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b0) | [__opcode[19]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[5]] != 0b0) | [__opcode[6]] != 0b0) | [__opcode[7]] != 0b0) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SRS_T2enc_AS_txt(W, mode)
    }
}

val execute_aarch32_instrs_STM_u_Op_AS_txt : forall ('increment_name : Bool) 'n ('wordhigher : Bool),
  (0 <= 'n & 'n <= 15).
  (bool('increment_name), int('n), bits(16), bool('wordhigher)) -> unit

function execute_aarch32_instrs_STM_u_Op_AS_txt (increment_name, n, registers, wordhigher) = {
    address : bits(32) = undefined;
    length : int = undefined;
    if PSTATE.EL == EL2 then {
        throw(Error_Undefined())
    } else if PSTATE.M == M32_User | PSTATE.M == M32_System then {
        throw(Error_Unpredictable())
    } else {
        let 'length = 4 * BitCount(registers);
        address : bits(32) = if increment_name then R_read(n) else
          R_read(n) - length;
        if wordhigher then {
            address = address + 4
        };
        foreach (i from 0 to 14 by 1 in inc) {
            if [registers[i]] == 0b1 then {
                MemS_set(address, 4) = Rmode_read(i, M32_User);
                address = address + 4
            };
            ()
        };
        if [registers[15]] == 0b1 then {
            MemS_set(address, 4) = PCStoreValue()
        };
        ()
    }
}

val decode_aarch32_instrs_STM_u_A1enc_AS_txt : (bits(4), bits(1), bits(1), bits(4), bits(16)) -> unit

function decode_aarch32_instrs_STM_u_A1enc_AS_txt (cond, P, U, Rn, register_list) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'n = UInt(Rn);
        let registers : bits(16) = register_list;
        let increment_name : bool = U == 0b1;
        let wordhigher : bool = P == U;
        if n == 15 | BitCount(registers) < 1 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STM_u_Op_AS_txt(increment_name, n, registers, wordhigher)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitzero, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3082) = {
    SEE = 3082;
    let cond = Slice(__opcode, 28, 4);
    let P = Slice(__opcode, 24, 1);
    let U = Slice(__opcode, 23, 1);
    let Rn = Slice(__opcode, 16, 4);
    let register_list = Slice(__opcode, 0, 16);
    if [__opcode[21]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STM_u_A1enc_AS_txt(cond, P, U, Rn, register_list)
    }
}

val execute_aarch32_instrs_VMRS_Op_AS_txt : forall 't, (0 <= 't & 't <= 15).
  (bits(4), int('t)) -> unit

function execute_aarch32_instrs_VMRS_Op_AS_txt (reg, t) = {
    if reg == 0b0001 then {
        CheckVFPEnabled(true);
        if t == 15 then {
            (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = FPSR[N] @ (FPSR[Z] @ (FPSR[C] @ FPSR[V]))
        } else {
            R_set(t) = FPSCR_read__1().bits
        }
    } else if PSTATE.EL == EL0 then {
        throw(Error_Undefined())
    } else {
        CheckVFPEnabled(false);
        AArch32_CheckAdvSIMDOrFPRegisterTraps(reg);
        match reg {
          0b0000 => {
              R_set(t) = FPSID.bits
          },
          0b0101 => {
              R_set(t) = MVFR2_read().bits
          },
          0b0110 => {
              R_set(t) = MVFR1_read().bits
          },
          0b0111 => {
              R_set(t) = MVFR0_read().bits
          },
          0b1000 => {
              R_set(t) = FPEXC_read().bits
          },
          _ => {
              Unreachable()
          }
        }
    }
}

val decode_aarch32_instrs_VMRS_A1enc_AS_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VMRS_A1enc_AS_txt (cond, reg, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        if not_bool((match reg {
          [bitzero, bitzero, bitzero, _] => true,
          0b0101 => true,
          [bitzero, bitone, bitone, _] => true,
          0b1000 => true,
          _ => false
        }) : bool) then {
            throw(Error_Unpredictable())
        };
        if t == 15 & reg != 0b0001 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VMRS_Op_AS_txt(reg, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3083) = {
    SEE = 3083;
    let cond = Slice(__opcode, 28, 4);
    let reg = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[5]] != 0b0 | [__opcode[6]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMRS_A1enc_AS_txt(cond, reg, Rt)
    }
}

val decode_aarch32_instrs_VMRS_T1enc_AS_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VMRS_T1enc_AS_txt (reg, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        if not_bool((match reg {
          [bitzero, bitzero, bitzero, _] => true,
          0b0101 => true,
          [bitzero, bitone, bitone, _] => true,
          0b1000 => true,
          _ => false
        }) : bool) then {
            throw(Error_Unpredictable())
        };
        if t == 15 & reg != 0b0001 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VMRS_Op_AS_txt(reg, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 3084) = {
    SEE = 3084;
    let reg = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[5]] != 0b0 | [__opcode[6]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMRS_T1enc_AS_txt(reg, Rt)
    }
}

val execute_aarch32_instrs_VMSR_Op_AS_txt : forall 't, (0 <= 't & 't <= 15).
  (bits(4), int('t)) -> unit

function execute_aarch32_instrs_VMSR_Op_AS_txt (reg, t) = {
    if reg == 0b0001 then {
        CheckVFPEnabled(true);
        FPSCR_write() = Mk_FPSCR_Type(R_read(t))
    } else if PSTATE.EL == EL0 then {
        throw(Error_Undefined())
    } else {
        CheckVFPEnabled(false);
        match reg {
          0b0000 => (),
          0b1000 => {
              FPEXC_write() = Mk_FPEXC_Type(R_read(t))
          },
          _ => {
              Unreachable()
          }
        }
    }
}

val decode_aarch32_instrs_VMSR_A1enc_AS_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VMSR_A1enc_AS_txt (cond, reg, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        if not_bool((match reg {
          [bitzero, bitzero, bitzero, _] => true,
          _ => false
        }) : bool) & reg != 0b1000 then {
            let c : Constraint = ConstrainUnpredictable(Unpredictable_VMSR);
            assert(c == Constraint_UNDEF | c == Constraint_NOP);
            match c {
              Constraint_UNDEF => {
                  throw(Error_Undefined())
              },
              Constraint_NOP => {
                  EndOfInstruction()
              },
              _ => ()
            }
        };
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VMSR_Op_AS_txt(reg, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3085) = {
    SEE = 3085;
    let cond = Slice(__opcode, 28, 4);
    let reg = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[5]] != 0b0 | [__opcode[6]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMSR_A1enc_AS_txt(cond, reg, Rt)
    }
}

val decode_aarch32_instrs_VMSR_T1enc_AS_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_VMSR_T1enc_AS_txt (reg, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        if not_bool((match reg {
          [bitzero, bitzero, bitzero, _] => true,
          _ => false
        }) : bool) & reg != 0b1000 then {
            let c : Constraint = ConstrainUnpredictable(Unpredictable_VMSR);
            assert(c == Constraint_UNDEF | c == Constraint_NOP);
            match c {
              Constraint_UNDEF => {
                  throw(Error_Undefined())
              },
              Constraint_NOP => {
                  EndOfInstruction()
              },
              _ => ()
            }
        };
        if t == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_VMSR_Op_AS_txt(reg, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 3086) = {
    SEE = 3086;
    let reg = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[5]] != 0b0 | [__opcode[6]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_VMSR_T1enc_AS_txt(reg, Rt)
    }
}

val execute_aarch32_instrs_AESD_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_AESD_Op_A_txt (d, m) = {
    CheckCryptoEnabled32();
    let op1 : bits(128) = Q_read((d >> 1));
    let op2 : bits(128) = Q_read((m >> 1));
    Q_set((d >> 1)) = AESInvSubBytes(AESInvShiftRows(EOR(op1, op2)))
}

val decode_aarch32_instrs_AESD_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_AESD_A1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveAESExt()) then {
            throw(Error_Undefined())
        };
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_AESD_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3087) = {
    SEE = 3087;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_AESD_A1enc_A_txt(D, size, Vd, M, Vm)
}

val decode_aarch32_instrs_AESD_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_AESD_T1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveAESExt()) then {
            throw(Error_Undefined())
        };
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_AESD_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3088) = {
    SEE = 3088;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_AESD_T1enc_A_txt(D, size, Vd, M, Vm)
}

val execute_aarch32_instrs_AESE_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_AESE_Op_A_txt (d, m) = {
    CheckCryptoEnabled32();
    let op1 : bits(128) = Q_read((d >> 1));
    let op2 : bits(128) = Q_read((m >> 1));
    Q_set((d >> 1)) = AESSubBytes(AESShiftRows(EOR(op1, op2)))
}

val decode_aarch32_instrs_AESE_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_AESE_A1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveAESExt()) then {
            throw(Error_Undefined())
        };
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_AESE_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3089) = {
    SEE = 3089;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_AESE_A1enc_A_txt(D, size, Vd, M, Vm)
}

val decode_aarch32_instrs_AESE_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_AESE_T1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveAESExt()) then {
            throw(Error_Undefined())
        };
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_AESE_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3090) = {
    SEE = 3090;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_AESE_T1enc_A_txt(D, size, Vd, M, Vm)
}

val execute_aarch32_instrs_AESIMC_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_AESIMC_Op_A_txt (d, m) = {
    CheckCryptoEnabled32();
    Q_set((d >> 1)) = AESInvMixColumns(Q_read((m >> 1)))
}

val decode_aarch32_instrs_AESIMC_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_AESIMC_A1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveAESExt()) then {
            throw(Error_Undefined())
        };
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_AESIMC_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3091) = {
    SEE = 3091;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_AESIMC_A1enc_A_txt(D, size, Vd, M, Vm)
}

val decode_aarch32_instrs_AESIMC_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_AESIMC_T1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveAESExt()) then {
            throw(Error_Undefined())
        };
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_AESIMC_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3092) = {
    SEE = 3092;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_AESIMC_T1enc_A_txt(D, size, Vd, M, Vm)
}

val execute_aarch32_instrs_AESMC_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_AESMC_Op_A_txt (d, m) = {
    CheckCryptoEnabled32();
    Q_set((d >> 1)) = AESMixColumns(Q_read((m >> 1)))
}

val decode_aarch32_instrs_AESMC_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_AESMC_A1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveAESExt()) then {
            throw(Error_Undefined())
        };
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_AESMC_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3093) = {
    SEE = 3093;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_AESMC_A1enc_A_txt(D, size, Vd, M, Vm)
}

val decode_aarch32_instrs_AESMC_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_AESMC_T1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveAESExt()) then {
            throw(Error_Undefined())
        };
        if size != 0b00 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_AESMC_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3094) = {
    SEE = 3094;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_AESMC_T1enc_A_txt(D, size, Vd, M, Vm)
}

val execute_aarch32_instrs_CRC32_Op_A_txt : forall ('crc32c : Bool) 'd 'm 'n 'size,
  ('size in {8, 16, 32, 64} & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'd & 'd <= 15).
  (bool('crc32c), int('d), int('m), int('n), int('size)) -> unit

function execute_aarch32_instrs_CRC32_Op_A_txt (crc32c, d, m, n, size) = {
    let acc : bits(32) = R_read(n);
    assert(constraint('size - 1 < 32));
    let val_name : bits(0 + ('size - 1 - 0 + 1)) = R_read(m)[size - 1 .. 0];
    let poly : bits(32) = (if crc32c then UInt(0x1EDC6F41) else UInt(0x04C11DB7))[31 .. 0];
    let tempacc : bits(32 + 'size) = BitReverse(acc) @ Zeros(size);
    let tempval : bits(0 + ('size - 1 - 0 + 1) + 32) = BitReverse(val_name) @ Zeros(32);
    R_set(d) = BitReverse(Poly32Mod2(EOR(tempacc, tempval), poly))
}

val decode_aarch32_instrs_CRC32_A1enc_A_txt : (bits(4), bits(2), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_CRC32_A1enc_A_txt (cond, sz, Rn, Rd, C, Rm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if not_bool(HaveCRCExt()) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'size = (8 << UInt(sz));
        let crc32c : bool = C == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if size == 64 then {
            throw(Error_Unpredictable())
        };
        if cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_CRC32_Op_A_txt(crc32c, d, m, n, size)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, _, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero, _, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3095) = {
    SEE = 3095;
    let cond = Slice(__opcode, 28, 4);
    let sz = Slice(__opcode, 21, 2);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let C = Slice(__opcode, 9, 1);
    let Rm = Slice(__opcode, 0, 4);
    if ([__opcode[10]] != 0b0 | [__opcode[11]] != 0b0) | [__opcode[8]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CRC32_A1enc_A_txt(cond, sz, Rn, Rd, C, Rm)
    }
}

val decode_aarch32_instrs_CRC32_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(4)) -> unit

function decode_aarch32_instrs_CRC32_T1enc_A_txt (C, Rn, Rd, sz, Rm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveCRCExt()) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(Rd);
        let 'n = UInt(Rn);
        let 'm = UInt(Rm);
        let 'size = (8 << UInt(sz));
        let crc32c : bool = C == 0b1;
        if (d == 15 | n == 15) | m == 15 then {
            throw(Error_Unpredictable())
        };
        if size == 64 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_CRC32_Op_A_txt(crc32c, d, m, n, size)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 3096) = {
    SEE = 3096;
    let C = Slice(__opcode, 20, 1);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 8, 4);
    let sz = Slice(__opcode, 4, 2);
    let Rm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_CRC32_T1enc_A_txt(C, Rn, Rd, sz, Rm)
}

val execute_aarch32_instrs_DCPS1_Op_A_txt : unit -> unit

function execute_aarch32_instrs_DCPS1_Op_A_txt () = {
    LR_svc : bits(32) = undefined;
    tge : bits(1) = undefined;
    if not_bool(Halted()) then {
        throw(Error_Undefined())
    };
    if EL2Enabled() & PSTATE.EL == EL0 then {
        let tge : bits(1) = if ELUsingAArch32(EL2) then HCR_read()[TGE] else
          HCR_EL2[TGE];
        if tge == 0b1 then {
            throw(Error_Undefined())
        };
        ()
    };
    if PSTATE.EL != EL0 | ELUsingAArch32(EL1) then {
        if PSTATE.M == M32_Monitor then {
            SCR[NS] = 0b0
        };
        if PSTATE.EL != EL2 then {
            AArch32_WriteMode(M32_Svc);
            PSTATE.E = SCTLR_read__2()[EE];
            if HavePANExt() & SCTLR_read__2()[SPAN] == 0b0 then {
                PSTATE.PAN = 0b1
            };
            LR_svc = __UNKNOWN_bits(32);
            SPSR_svc_write() = Mk_SPSR_svc_Type(__UNKNOWN_bits(32))
        } else {
            PSTATE.E = HSCTLR_read()[EE];
            ELR_hyp_write() = __UNKNOWN_bits(32);
            HSR_write() = Mk_HSR_Type(__UNKNOWN_bits(32));
            SPSR_hyp_write() = Mk_SPSR_hyp_Type(__UNKNOWN_bits(32))
        };
        DLR_write() = __UNKNOWN_bits(32);
        DSPSR_write() = Mk_DSPSR_Type(__UNKNOWN_bits(32))
    } else {
        AArch64_MaybeZeroRegisterUppers();
        MaybeZeroSVEUppers(EL1);
        PSTATE.nRW = 0b0;
        PSTATE.SP = 0b1;
        PSTATE.EL = EL1;
        if HavePANExt() & SCTLR_EL1[SPAN] == 0b0 then {
            PSTATE.PAN = 0b1
        };
        if HaveUAOExt() then {
            PSTATE.UAO = 0b0
        };
        ELR_EL1 = __UNKNOWN_bits(64);
        ESR_EL1 = Mk_ESR_EL1_Type(__UNKNOWN_bits(64));
        SPSR_EL1 = Mk_SPSR_EL1_Type(__UNKNOWN_bits(64));
        DLR_EL0 = __UNKNOWN_bits(64);
        DSPSR_EL0 = Mk_DSPSR_EL0_Type(__UNKNOWN_bits(64));
        if (HaveIESB() & SCTLR_EL1[IESB] == 0b1) & not_bool(ConstrainUnpredictableBool(Unpredictable_IESBinDebug)) then {
            SynchronizeErrors()
        };
        ()
    };
    UpdateEDSCRFields()
}

val decode_aarch32_instrs_DCPS1_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_DCPS1_T1enc_A_txt () = {
    execute_aarch32_instrs_DCPS1_Op_A_txt()
}

function clause __DecodeT32 ((pc, (0b11110111100011111000000000000001 as __opcode)) if SEE < 3097) = {
    SEE = 3097;
    decode_aarch32_instrs_DCPS1_T1enc_A_txt()
}

val execute_aarch32_instrs_DCPS2_Op_A_txt : unit -> unit

function execute_aarch32_instrs_DCPS2_Op_A_txt () = {
    if not_bool(Halted()) | IsSecure() then {
        throw(Error_Undefined())
    };
    if ELUsingAArch32(EL2) then {
        AArch32_WriteMode(M32_Hyp);
        PSTATE.E = HSCTLR_read()[EE];
        ELR_hyp_write() = __UNKNOWN_bits(32);
        HSR_write() = Mk_HSR_Type(__UNKNOWN_bits(32));
        SPSR_hyp_write() = Mk_SPSR_hyp_Type(__UNKNOWN_bits(32));
        DLR_write() = __UNKNOWN_bits(32);
        DSPSR_write() = Mk_DSPSR_Type(__UNKNOWN_bits(32))
    } else {
        AArch64_MaybeZeroRegisterUppers();
        MaybeZeroSVEUppers(EL2);
        PSTATE.nRW = 0b0;
        PSTATE.SP = 0b1;
        PSTATE.EL = EL2;
        if ((HavePANExt() & SCTLR_EL2[SPAN] == 0b0) & HCR_EL2[E2H] == 0b1) & HCR_EL2[TGE] == 0b1 then {
            PSTATE.PAN = 0b1
        };
        if HaveUAOExt() then {
            PSTATE.UAO = 0b0
        };
        ELR_EL2 = __UNKNOWN_bits(64);
        ESR_EL2 = Mk_ESR_EL2_Type(__UNKNOWN_bits(64));
        SPSR_EL2 = Mk_SPSR_EL2_Type(__UNKNOWN_bits(64));
        DLR_EL0 = __UNKNOWN_bits(64);
        DSPSR_EL0 = Mk_DSPSR_EL0_Type(__UNKNOWN_bits(64));
        if (HaveIESB() & SCTLR_EL2[IESB] == 0b1) & not_bool(ConstrainUnpredictableBool(Unpredictable_IESBinDebug)) then {
            SynchronizeErrors()
        };
        ()
    };
    UpdateEDSCRFields()
}

val decode_aarch32_instrs_DCPS2_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_DCPS2_T1enc_A_txt () = {
    if not_bool(HaveEL(EL2)) then {
        throw(Error_Undefined())
    };
    execute_aarch32_instrs_DCPS2_Op_A_txt()
}

function clause __DecodeT32 ((pc, (0b11110111100011111000000000000010 as __opcode)) if SEE < 3098) = {
    SEE = 3098;
    decode_aarch32_instrs_DCPS2_T1enc_A_txt()
}

val execute_aarch32_instrs_DCPS3_Op_A_txt : unit -> unit

function execute_aarch32_instrs_DCPS3_Op_A_txt () = {
    from_secure : bool = undefined;
    sync_errors : bool = undefined;
    if not_bool(Halted()) | EDSCR_read()[SDD] == 0b1 then {
        throw(Error_Undefined())
    };
    if ELUsingAArch32(EL3) then {
        let from_secure : bool = IsSecure();
        if PSTATE.M == M32_Monitor then {
            SCR[NS] = 0b0
        };
        AArch32_WriteMode(M32_Monitor);
        if HavePANExt() then {
            if not_bool(from_secure) then {
                PSTATE.PAN = 0b0
            } else if SCTLR_read__2()[SPAN] == 0b0 then {
                PSTATE.PAN = 0b1
            } else ()
        };
        PSTATE.E = SCTLR_read__2()[EE];
        LR_mon = __UNKNOWN_bits(32);
        SPSR_mon = Mk_SPSR_mon_Type(__UNKNOWN_bits(32));
        DLR_write() = __UNKNOWN_bits(32);
        DSPSR_write() = Mk_DSPSR_Type(__UNKNOWN_bits(32))
    } else {
        AArch64_MaybeZeroRegisterUppers();
        MaybeZeroSVEUppers(EL3);
        PSTATE.nRW = 0b0;
        PSTATE.SP = 0b1;
        PSTATE.EL = EL3;
        if HaveUAOExt() then {
            PSTATE.UAO = 0b0
        };
        ELR_EL3 = __UNKNOWN_bits(64);
        ESR_EL3 = Mk_ESR_EL3_Type(__UNKNOWN_bits(64));
        SPSR_EL3 = Mk_SPSR_EL3_Type(__UNKNOWN_bits(64));
        DLR_EL0 = __UNKNOWN_bits(64);
        DSPSR_EL0 = Mk_DSPSR_EL0_Type(__UNKNOWN_bits(64));
        sync_errors : bool = HaveIESB() & SCTLR_EL3[IESB] == 0b1;
        if (HaveDoubleFaultExt() & SCR_EL3[EA] == 0b1) & SCR_EL3[NMEA] == 0b1 then {
            sync_errors = true
        };
        if not_bool(ConstrainUnpredictableBool(Unpredictable_IESBinDebug)) then {
            sync_errors = false
        };
        if sync_errors then {
            SynchronizeErrors()
        };
        ()
    };
    UpdateEDSCRFields()
}

val decode_aarch32_instrs_DCPS3_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_DCPS3_T1enc_A_txt () = {
    if not_bool(HaveEL(EL3)) then {
        throw(Error_Undefined())
    };
    execute_aarch32_instrs_DCPS3_Op_A_txt()
}

function clause __DecodeT32 ((pc, (0b11110111100011111000000000000011 as __opcode)) if SEE < 3099) = {
    SEE = 3099;
    decode_aarch32_instrs_DCPS3_T1enc_A_txt()
}

val execute_aarch32_instrs_HLT_Op_A_txt : unit -> unit

function execute_aarch32_instrs_HLT_Op_A_txt () = {
    Halt(DebugHalt_HaltInstruction)
}

val decode_aarch32_instrs_HLT_A1enc_A_txt : (bits(4), bits(12), bits(4)) -> unit

function decode_aarch32_instrs_HLT_A1enc_A_txt (cond, imm12, imm4) = {
    assert(cond != 0b1111);
    if EDSCR_read()[HDE] == 0b0 | not_bool(HaltingAllowed()) then {
        throw(Error_Undefined())
    };
    if cond != 0b1110 then {
        throw(Error_Unpredictable())
    };
    execute_aarch32_instrs_HLT_Op_A_txt()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3100) = {
    SEE = 3100;
    let cond = Slice(__opcode, 28, 4);
    let imm12 = Slice(__opcode, 8, 12);
    let imm4 = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_HLT_A1enc_A_txt(cond, imm12, imm4)
}

val decode_aarch32_instrs_HLT_T1enc_A_txt : bits(6) -> unit

function decode_aarch32_instrs_HLT_T1enc_A_txt imm6 = {
    if EDSCR_read()[HDE] == 0b0 | not_bool(HaltingAllowed()) then {
        throw(Error_Undefined())
    };
    execute_aarch32_instrs_HLT_Op_A_txt()
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 3101) = {
    SEE = 3101;
    let imm6 = Slice(__opcode, 0, 6);
    decode_aarch32_instrs_HLT_T1enc_A_txt(imm6)
}

val execute_aarch32_instrs_LDA_Op_A_txt : forall 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t)) -> unit

function execute_aarch32_instrs_LDA_Op_A_txt (n, t) = {
    let address : bits(32) = R_read(n);
    AArch32_SetLSInstructionSyndrome(4, false, t, true);
    R_set(t) = MemO_read(address, 4)
}

val decode_aarch32_instrs_LDA_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDA_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDA_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3102) = {
    SEE = 3102;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDA_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_LDA_T1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDA_T1enc_A_txt (Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDA_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 3103) = {
    SEE = 3103;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDA_T1enc_A_txt(Rn, Rt)
    }
}

val execute_aarch32_instrs_LDAB_Op_A_txt : forall 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t)) -> unit

function execute_aarch32_instrs_LDAB_Op_A_txt (n, t) = {
    let address : bits(32) = R_read(n);
    AArch32_SetLSInstructionSyndrome(1, false, t, true);
    R_set(t) = ZeroExtend(MemO_read(address, 1), 32)
}

val decode_aarch32_instrs_LDAB_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDAB_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDAB_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3104) = {
    SEE = 3104;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDAB_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_LDAB_T1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDAB_T1enc_A_txt (Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDAB_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 3105) = {
    SEE = 3105;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDAB_T1enc_A_txt(Rn, Rt)
    }
}

val execute_aarch32_instrs_LDAEX_Op_A_txt : forall 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t)) -> unit

function execute_aarch32_instrs_LDAEX_Op_A_txt (n, t) = {
    let address : bits(32) = R_read(n);
    AArch32_SetExclusiveMonitors(address, 4);
    AArch32_SetLSInstructionSyndrome(4, false, t, true);
    R_set(t) = MemO_read(address, 4)
}

val decode_aarch32_instrs_LDAEX_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDAEX_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDAEX_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3106) = {
    SEE = 3106;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDAEX_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_LDAEX_T1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDAEX_T1enc_A_txt (Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDAEX_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 3107) = {
    SEE = 3107;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDAEX_T1enc_A_txt(Rn, Rt)
    }
}

val execute_aarch32_instrs_LDAEXB_Op_A_txt : forall 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t)) -> unit

function execute_aarch32_instrs_LDAEXB_Op_A_txt (n, t) = {
    let address : bits(32) = R_read(n);
    AArch32_SetExclusiveMonitors(address, 1);
    AArch32_SetLSInstructionSyndrome(1, false, t, true);
    R_set(t) = ZeroExtend(MemO_read(address, 1), 32)
}

val decode_aarch32_instrs_LDAEXB_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDAEXB_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDAEXB_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3108) = {
    SEE = 3108;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDAEXB_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_LDAEXB_T1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDAEXB_T1enc_A_txt (Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDAEXB_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 3109) = {
    SEE = 3109;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDAEXB_T1enc_A_txt(Rn, Rt)
    }
}

val execute_aarch32_instrs_LDAEXD_Op_A_txt : forall 'n 't 't2,
  (0 <= 't2 & 't2 <= 16 & 0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t), int('t2)) -> unit

function execute_aarch32_instrs_LDAEXD_Op_A_txt (n, t, t2) = {
    let address : bits(32) = R_read(n);
    AArch32_SetExclusiveMonitors(address, 8);
    AArch32_SetLSInstructionSyndrome(8, false, t, true);
    let value_name : bits(64) = MemO_read(address, 8);
    R_set(t) = if BigEndian(AccType_ORDERED) then value_name[63 .. 32] else
      value_name[31 .. 0];
    R_set(t2) = if BigEndian(AccType_ORDERED) then value_name[31 .. 0] else
      value_name[63 .. 32]
}

val decode_aarch32_instrs_LDAEXD_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDAEXD_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 't2 = t + 1;
        let 'n = UInt(Rn);
        if ([Rt[0]] == 0b1 | t2 == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDAEXD_Op_A_txt(n, t, t2)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3110) = {
    SEE = 3110;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDAEXD_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_LDAEXD_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDAEXD_T1enc_A_txt (Rn, Rt, Rt2) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'n = UInt(Rn);
        if ((t == 15 | t2 == 15) | t == t2) | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDAEXD_Op_A_txt(n, t, t2)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 3111) = {
    SEE = 3111;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rt2 = Slice(__opcode, 8, 4);
    if (([__opcode[0]] != 0b1 | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDAEXD_T1enc_A_txt(Rn, Rt, Rt2)
    }
}

val execute_aarch32_instrs_LDAEXH_Op_A_txt : forall 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t)) -> unit

function execute_aarch32_instrs_LDAEXH_Op_A_txt (n, t) = {
    let address : bits(32) = R_read(n);
    AArch32_SetExclusiveMonitors(address, 2);
    AArch32_SetLSInstructionSyndrome(2, false, t, true);
    R_set(t) = ZeroExtend(MemO_read(address, 2), 32)
}

val decode_aarch32_instrs_LDAEXH_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDAEXH_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDAEXH_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3112) = {
    SEE = 3112;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDAEXH_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_LDAEXH_T1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDAEXH_T1enc_A_txt (Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDAEXH_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 3113) = {
    SEE = 3113;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDAEXH_T1enc_A_txt(Rn, Rt)
    }
}

val execute_aarch32_instrs_LDAH_Op_A_txt : forall 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t)) -> unit

function execute_aarch32_instrs_LDAH_Op_A_txt (n, t) = {
    let address : bits(32) = R_read(n);
    AArch32_SetLSInstructionSyndrome(2, false, t, true);
    R_set(t) = ZeroExtend(MemO_read(address, 2), 32)
}

val decode_aarch32_instrs_LDAH_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDAH_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDAH_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3114) = {
    SEE = 3114;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDAH_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_LDAH_T1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_LDAH_T1enc_A_txt (Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_LDAH_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 3115) = {
    SEE = 3115;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_LDAH_T1enc_A_txt(Rn, Rt)
    }
}

val execute_aarch32_instrs_SEVL_Op_A_txt : unit -> unit

function execute_aarch32_instrs_SEVL_Op_A_txt () = {
    SendEventLocal()
}

val decode_aarch32_instrs_SEVL_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_SEVL_A1enc_A_txt cond = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        execute_aarch32_instrs_SEVL_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3116) = {
    SEE = 3116;
    let cond = Slice(__opcode, 28, 4);
    if (((((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SEVL_A1enc_A_txt(cond)
    }
}

val decode_aarch32_instrs_SEVL_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_SEVL_T1enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_SEVL_Op_A_txt()
    };
    ()
}

function clause __DecodeT16 ((pc, (0b1011111101010000 as __opcode)) if SEE < 3117) = {
    SEE = 3117;
    decode_aarch32_instrs_SEVL_T1enc_A_txt()
}

val decode_aarch32_instrs_SEVL_T2enc_A_txt : unit -> unit

function decode_aarch32_instrs_SEVL_T2enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_SEVL_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101011111000000000000101 as __opcode)) if SEE < 3118) = {
    SEE = 3118;
    if (((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SEVL_T2enc_A_txt()
    }
}

val execute_aarch32_instrs_SHA1C_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHA1C_Op_A_txt (d, m, n) = {
    t : bits(32) = undefined;
    CheckCryptoEnabled32();
    X : bits(128) = Q_read((d >> 1));
    Y : bits(32) = Q_read((n >> 1))[31 .. 0];
    let W : bits(128) = Q_read((m >> 1));
    foreach (e from 0 to 3 by 1 in inc) {
        t = SHAchoose(X[63 .. 32], X[95 .. 64], X[127 .. 96]);
        Y = Y + ROL(X[31 .. 0], 5) + t + Elem_read(W, e, 32);
        X[63 .. 32] = ROL(X[63 .. 32], 30);
        (Y @ X) = ROL(Y @ X, 32)
    };
    Q_set((d >> 1)) = X
}

val decode_aarch32_instrs_SHA1C_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA1C_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveSHA1Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA1C_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3119) = {
    SEE = 3119;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA1C_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_SHA1C_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA1C_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveSHA1Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA1C_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3120) = {
    SEE = 3120;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA1C_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_SHA1H_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_SHA1H_Op_A_txt (d, m) = {
    CheckCryptoEnabled32();
    Q_set((d >> 1)) = ZeroExtend(ROL(Q_read((m >> 1))[31 .. 0], 30), 128)
}

val decode_aarch32_instrs_SHA1H_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA1H_A1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveSHA1Ext()) then {
            throw(Error_Undefined())
        };
        if size != 0b10 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA1H_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3121) = {
    SEE = 3121;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA1H_A1enc_A_txt(D, size, Vd, M, Vm)
}

val decode_aarch32_instrs_SHA1H_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA1H_T1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveSHA1Ext()) then {
            throw(Error_Undefined())
        };
        if size != 0b10 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA1H_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3122) = {
    SEE = 3122;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA1H_T1enc_A_txt(D, size, Vd, M, Vm)
}

val execute_aarch32_instrs_SHA1M_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHA1M_Op_A_txt (d, m, n) = {
    t : bits(32) = undefined;
    CheckCryptoEnabled32();
    X : bits(128) = Q_read((d >> 1));
    Y : bits(32) = Q_read((n >> 1))[31 .. 0];
    let W : bits(128) = Q_read((m >> 1));
    foreach (e from 0 to 3 by 1 in inc) {
        t = SHAmajority(X[63 .. 32], X[95 .. 64], X[127 .. 96]);
        Y = Y + ROL(X[31 .. 0], 5) + t + Elem_read(W, e, 32);
        X[63 .. 32] = ROL(X[63 .. 32], 30);
        (Y @ X) = ROL(Y @ X, 32)
    };
    Q_set((d >> 1)) = X
}

val decode_aarch32_instrs_SHA1M_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA1M_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveSHA1Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA1M_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3123) = {
    SEE = 3123;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA1M_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_SHA1M_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA1M_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveSHA1Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA1M_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3124) = {
    SEE = 3124;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA1M_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_SHA1P_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHA1P_Op_A_txt (d, m, n) = {
    t : bits(32) = undefined;
    CheckCryptoEnabled32();
    X : bits(128) = Q_read((d >> 1));
    Y : bits(32) = Q_read((n >> 1))[31 .. 0];
    let W : bits(128) = Q_read((m >> 1));
    foreach (e from 0 to 3 by 1 in inc) {
        t = SHAparity(X[63 .. 32], X[95 .. 64], X[127 .. 96]);
        Y = Y + ROL(X[31 .. 0], 5) + t + Elem_read(W, e, 32);
        X[63 .. 32] = ROL(X[63 .. 32], 30);
        (Y @ X) = ROL(Y @ X, 32)
    };
    Q_set((d >> 1)) = X
}

val decode_aarch32_instrs_SHA1P_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA1P_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveSHA1Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA1P_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3125) = {
    SEE = 3125;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA1P_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_SHA1P_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA1P_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveSHA1Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA1P_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3126) = {
    SEE = 3126;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA1P_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_SHA1SU0_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHA1SU0_Op_A_txt (d, m, n) = {
    CheckCryptoEnabled32();
    let op1 : bits(128) = Q_read((d >> 1));
    op2 : bits(128) = Q_read((n >> 1));
    let op3 : bits(128) = Q_read((m >> 1));
    let op2 : bits(128) = op2[63 .. 0] @ op1[127 .. 64];
    Q_set((d >> 1)) = EOR(EOR(op1, op2), op3)
}

val decode_aarch32_instrs_SHA1SU0_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA1SU0_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveSHA1Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA1SU0_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3127) = {
    SEE = 3127;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA1SU0_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_SHA1SU0_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA1SU0_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveSHA1Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA1SU0_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3128) = {
    SEE = 3128;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA1SU0_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_SHA1SU1_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_SHA1SU1_Op_A_txt (d, m) = {
    CheckCryptoEnabled32();
    let X : bits(128) = Q_read((d >> 1));
    let Y : bits(128) = Q_read((m >> 1));
    let T : bits(128) = EOR(X, LSR(Y, 32));
    let W0 : bits(32) = ROL(T[31 .. 0], 1);
    let W1 : bits(32) = ROL(T[63 .. 32], 1);
    let W2 : bits(32) = ROL(T[95 .. 64], 1);
    let W3 : bits(32) = EOR(ROL(T[127 .. 96], 1), ROL(T[31 .. 0], 2));
    Q_set((d >> 1)) = ((W3 @ W2) @ W1) @ W0
}

val decode_aarch32_instrs_SHA1SU1_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA1SU1_A1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveSHA1Ext()) then {
            throw(Error_Undefined())
        };
        if size != 0b10 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA1SU1_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3129) = {
    SEE = 3129;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA1SU1_A1enc_A_txt(D, size, Vd, M, Vm)
}

val decode_aarch32_instrs_SHA1SU1_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA1SU1_T1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveSHA1Ext()) then {
            throw(Error_Undefined())
        };
        if size != 0b10 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA1SU1_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3130) = {
    SEE = 3130;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA1SU1_T1enc_A_txt(D, size, Vd, M, Vm)
}

val execute_aarch32_instrs_SHA256H_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHA256H_Op_A_txt (d, m, n) = {
    CheckCryptoEnabled32();
    let X : bits(128) = Q_read((d >> 1));
    let Y : bits(128) = Q_read((n >> 1));
    let W : bits(128) = Q_read((m >> 1));
    let part1 : bool = true;
    Q_set((d >> 1)) = SHA256hash(X, Y, W, part1)
}

val decode_aarch32_instrs_SHA256H_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA256H_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveSHA256Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA256H_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3131) = {
    SEE = 3131;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA256H_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_SHA256H_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA256H_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveSHA256Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA256H_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3132) = {
    SEE = 3132;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA256H_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_SHA256H2_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHA256H2_Op_A_txt (d, m, n) = {
    CheckCryptoEnabled32();
    let X : bits(128) = Q_read((n >> 1));
    let Y : bits(128) = Q_read((d >> 1));
    let W : bits(128) = Q_read((m >> 1));
    let part1 : bool = false;
    Q_set((d >> 1)) = SHA256hash(X, Y, W, part1)
}

val decode_aarch32_instrs_SHA256H2_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA256H2_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveSHA256Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA256H2_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3133) = {
    SEE = 3133;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA256H2_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_SHA256H2_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA256H2_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveSHA256Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA256H2_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3134) = {
    SEE = 3134;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA256H2_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_SHA256SU0_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_SHA256SU0_Op_A_txt (d, m) = {
    elt : bits(32) = undefined;
    CheckCryptoEnabled32();
    result : bits(128) = undefined;
    let X : bits(128) = Q_read((d >> 1));
    let Y : bits(128) = Q_read((m >> 1));
    let T : bits(128) = Y[31 .. 0] @ X[127 .. 32];
    foreach (e from 0 to 3 by 1 in inc) {
        elt = Elem_read(T, e, 32);
        elt = EOR(EOR(ROR(elt, 7), ROR(elt, 18)), LSR(elt, 3));
        result = Elem_set(result, e, 32, elt + Elem_read(X, e, 32))
    };
    Q_set((d >> 1)) = result
}

val decode_aarch32_instrs_SHA256SU0_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA256SU0_A1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveSHA256Ext()) then {
            throw(Error_Undefined())
        };
        if size != 0b10 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA256SU0_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3135) = {
    SEE = 3135;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA256SU0_A1enc_A_txt(D, size, Vd, M, Vm)
}

val decode_aarch32_instrs_SHA256SU0_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA256SU0_T1enc_A_txt (D, size, Vd, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveSHA256Ext()) then {
            throw(Error_Undefined())
        };
        if size != 0b10 then {
            throw(Error_Undefined())
        };
        if [Vd[0]] == 0b1 | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA256SU0_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3136) = {
    SEE = 3136;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA256SU0_T1enc_A_txt(D, size, Vd, M, Vm)
}

val execute_aarch32_instrs_SHA256SU1_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_SHA256SU1_Op_A_txt (d, m, n) = {
    CheckCryptoEnabled32();
    elt : bits(32) = undefined;
    result : bits(128) = undefined;
    let X : bits(128) = Q_read((d >> 1));
    let Y : bits(128) = Q_read((n >> 1));
    let Z : bits(128) = Q_read((m >> 1));
    let T0 : bits(128) = Z[31 .. 0] @ Y[127 .. 32];
    T1 : bits(64) = Z[127 .. 64];
    foreach (e from 0 to 1 by 1 in inc) {
        elt = Elem_read(T1, e, 32);
        elt = EOR(EOR(ROR(elt, 17), ROR(elt, 19)), LSR(elt, 10));
        elt = elt + Elem_read(X, e, 32) + Elem_read(T0, e, 32);
        result = Elem_set(result, e, 32, elt)
    };
    let T1 : bits(64) = result[63 .. 0];
    foreach (e from 2 to 3 by 1 in inc) {
        elt = Elem_read(T1, e - 2, 32);
        elt = EOR(EOR(ROR(elt, 17), ROR(elt, 19)), LSR(elt, 10));
        elt = elt + Elem_read(X, e, 32) + Elem_read(T0, e, 32);
        result = Elem_set(result, e, 32, elt)
    };
    Q_set((d >> 1)) = result
}

val decode_aarch32_instrs_SHA256SU1_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA256SU1_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveSHA256Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA256SU1_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3137) = {
    SEE = 3137;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA256SU1_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_SHA256SU1_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_SHA256SU1_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        if not_bool(HaveSHA256Ext()) then {
            throw(Error_Undefined())
        };
        if Q != 0b1 then {
            throw(Error_Undefined())
        };
        if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
            throw(Error_Undefined())
        };
        let 'd = UInt(D @ Vd);
        let 'n = UInt(N @ Vn);
        let 'm = UInt(M @ Vm);
        execute_aarch32_instrs_SHA256SU1_Op_A_txt(d, m, n)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3138) = {
    SEE = 3138;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_SHA256SU1_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_STL_Op_A_txt : forall 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t)) -> unit

function execute_aarch32_instrs_STL_Op_A_txt (n, t) = {
    let address : bits(32) = R_read(n);
    AArch32_SetLSInstructionSyndrome(4, false, t, true);
    MemO_set(address, 4) = R_read(t)
}

val decode_aarch32_instrs_STL_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STL_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STL_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3139) = {
    SEE = 3139;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 0, 4);
    if (((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STL_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_STL_T1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STL_T1enc_A_txt (Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STL_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 3140) = {
    SEE = 3140;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STL_T1enc_A_txt(Rn, Rt)
    }
}

val execute_aarch32_instrs_STLB_Op_A_txt : forall 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t)) -> unit

function execute_aarch32_instrs_STLB_Op_A_txt (n, t) = {
    let address : bits(32) = R_read(n);
    AArch32_SetLSInstructionSyndrome(1, false, t, true);
    MemO_set(address, 1) = R_read(t)[7 .. 0]
}

val decode_aarch32_instrs_STLB_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STLB_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STLB_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3141) = {
    SEE = 3141;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 0, 4);
    if (((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STLB_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_STLB_T1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STLB_T1enc_A_txt (Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STLB_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 3142) = {
    SEE = 3142;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STLB_T1enc_A_txt(Rn, Rt)
    }
}

val execute_aarch32_instrs_STLEX_Op_A_txt : forall 'd 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('n), int('t)) -> unit

function execute_aarch32_instrs_STLEX_Op_A_txt (d, n, t) = {
    let address : bits(32) = R_read(n);
    if AArch32_ExclusiveMonitorsPass(address, 4) then {
        AArch32_SetLSInstructionSyndrome(4, false, t, true);
        MemO_set(address, 4) = R_read(t);
        R_set(d) = ZeroExtend(0b0)
    } else {
        R_set(d) = ZeroExtend(0b1)
    }
}

val decode_aarch32_instrs_STLEX_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STLEX_A1enc_A_txt (cond, Rn, Rd, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if (d == 15 | t == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if d == n | d == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STLEX_Op_A_txt(d, n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3143) = {
    SEE = 3143;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rt = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b1 | [__opcode[9]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STLEX_A1enc_A_txt(cond, Rn, Rd, Rt)
    }
}

val decode_aarch32_instrs_STLEX_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STLEX_T1enc_A_txt (Rn, Rt, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if (d == 15 | t == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if d == n | d == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STLEX_Op_A_txt(d, n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 3144) = {
    SEE = 3144;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STLEX_T1enc_A_txt(Rn, Rt, Rd)
    }
}

val execute_aarch32_instrs_STLEXB_Op_A_txt : forall 'd 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('n), int('t)) -> unit

function execute_aarch32_instrs_STLEXB_Op_A_txt (d, n, t) = {
    let address : bits(32) = R_read(n);
    if AArch32_ExclusiveMonitorsPass(address, 1) then {
        AArch32_SetLSInstructionSyndrome(1, false, t, true);
        MemO_set(address, 1) = R_read(t)[7 .. 0];
        R_set(d) = ZeroExtend(0b0)
    } else {
        R_set(d) = ZeroExtend(0b1)
    }
}

val decode_aarch32_instrs_STLEXB_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STLEXB_A1enc_A_txt (cond, Rn, Rd, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if (d == 15 | t == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if d == n | d == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STLEXB_Op_A_txt(d, n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3145) = {
    SEE = 3145;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rt = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b1 | [__opcode[9]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STLEXB_A1enc_A_txt(cond, Rn, Rd, Rt)
    }
}

val decode_aarch32_instrs_STLEXB_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STLEXB_T1enc_A_txt (Rn, Rt, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if (d == 15 | t == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if d == n | d == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STLEXB_Op_A_txt(d, n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 3146) = {
    SEE = 3146;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STLEXB_T1enc_A_txt(Rn, Rt, Rd)
    }
}

val execute_aarch32_instrs_STLEXD_Op_A_txt : forall 'd 'n 't 't2,
  (0 <= 't2 & 't2 <= 16 & 0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('n), int('t), int('t2)) -> unit

function execute_aarch32_instrs_STLEXD_Op_A_txt (d, n, t, t2) = {
    let address : bits(32) = R_read(n);
    let value_name : bits(64) = if BigEndian(AccType_ORDERED) then
      R_read(t) @ R_read(t2)
    else
      R_read(t2) @ R_read(t);
    if AArch32_ExclusiveMonitorsPass(address, 8) then {
        AArch32_SetLSInstructionSyndrome(8, false, t, true);
        MemO_set(address, 8) = value_name;
        R_set(d) = ZeroExtend(0b0)
    } else {
        R_set(d) = ZeroExtend(0b1)
    }
}

val decode_aarch32_instrs_STLEXD_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STLEXD_A1enc_A_txt (cond, Rn, Rd, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 't2 = t + 1;
        let 'n = UInt(Rn);
        if ((d == 15 | [Rt[0]] == 0b1) | t2 == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if (d == n | d == t) | d == t2 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STLEXD_Op_A_txt(d, n, t, t2)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3147) = {
    SEE = 3147;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rt = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b1 | [__opcode[9]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STLEXD_A1enc_A_txt(cond, Rn, Rd, Rt)
    }
}

val decode_aarch32_instrs_STLEXD_T1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STLEXD_T1enc_A_txt (Rn, Rt, Rt2, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 't2 = UInt(Rt2);
        let 'n = UInt(Rn);
        if ((d == 15 | t == 15) | t2 == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if (d == n | d == t) | d == t2 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STLEXD_Op_A_txt(d, n, t, t2)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 3148) = {
    SEE = 3148;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rt2 = Slice(__opcode, 8, 4);
    let Rd = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_STLEXD_T1enc_A_txt(Rn, Rt, Rt2, Rd)
}

val execute_aarch32_instrs_STLEXH_Op_A_txt : forall 'd 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15 & 0 <= 'd & 'd <= 15).
  (int('d), int('n), int('t)) -> unit

function execute_aarch32_instrs_STLEXH_Op_A_txt (d, n, t) = {
    let address : bits(32) = R_read(n);
    if AArch32_ExclusiveMonitorsPass(address, 2) then {
        AArch32_SetLSInstructionSyndrome(2, false, t, true);
        MemO_set(address, 2) = R_read(t)[15 .. 0];
        R_set(d) = ZeroExtend(0b0)
    } else {
        R_set(d) = ZeroExtend(0b1)
    }
}

val decode_aarch32_instrs_STLEXH_A1enc_A_txt : (bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STLEXH_A1enc_A_txt (cond, Rn, Rd, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if (d == 15 | t == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if d == n | d == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STLEXH_Op_A_txt(d, n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3149) = {
    SEE = 3149;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rd = Slice(__opcode, 12, 4);
    let Rt = Slice(__opcode, 0, 4);
    if [__opcode[8]] != 0b1 | [__opcode[9]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STLEXH_A1enc_A_txt(cond, Rn, Rd, Rt)
    }
}

val decode_aarch32_instrs_STLEXH_T1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STLEXH_T1enc_A_txt (Rn, Rt, Rd) = {
    if ConditionPassed() then {
        let 'd = UInt(Rd);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if (d == 15 | t == 15) | n == 15 then {
            throw(Error_Unpredictable())
        };
        if d == n | d == t then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STLEXH_Op_A_txt(d, n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 3150) = {
    SEE = 3150;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    let Rd = Slice(__opcode, 0, 4);
    if (([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STLEXH_T1enc_A_txt(Rn, Rt, Rd)
    }
}

val execute_aarch32_instrs_STLH_Op_A_txt : forall 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 15).
  (int('n), int('t)) -> unit

function execute_aarch32_instrs_STLH_Op_A_txt (n, t) = {
    let address : bits(32) = R_read(n);
    AArch32_SetLSInstructionSyndrome(2, false, t, true);
    MemO_set(address, 2) = R_read(t)[15 .. 0]
}

val decode_aarch32_instrs_STLH_A1enc_A_txt : (bits(4), bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STLH_A1enc_A_txt (cond, Rn, Rt) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STLH_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3151) = {
    SEE = 3151;
    let cond = Slice(__opcode, 28, 4);
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 0, 4);
    if (((([__opcode[12]] != 0b1 | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STLH_A1enc_A_txt(cond, Rn, Rt)
    }
}

val decode_aarch32_instrs_STLH_T1enc_A_txt : (bits(4), bits(4)) -> unit

function decode_aarch32_instrs_STLH_T1enc_A_txt (Rn, Rt) = {
    if ConditionPassed() then {
        let 't = UInt(Rt);
        let 'n = UInt(Rn);
        if t == 15 | n == 15 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_STLH_Op_A_txt(n, t)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone] as __opcode)) if SEE < 3152) = {
    SEE = 3152;
    let Rn = Slice(__opcode, 16, 4);
    let Rt = Slice(__opcode, 12, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[0]] != 0b1) | [__opcode[1]] != 0b1) | [__opcode[2]] != 0b1) | [__opcode[3]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_STLH_T1enc_A_txt(Rn, Rt)
    }
}

val execute_aarch32_instrs_VCVTA_asimd_Op_A_txt : forall 'd 'elements 'esize ('is_unsigned : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('regs), FPRounding, bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VCVTA_asimd_Op_A_txt (d__arg, elements, esize, m, regs, rounding, is_unsigned) = {
    d : int = d__arg;
    CheckAdvSIMDEnabled();
    result : bits('esize) = undefined;
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPToFixed(esize, Elem_read(D_read(m + r), e, esize), 0, is_unsigned, StandardFPSCRValue(), rounding))
        }
    }
}

val decode_aarch32_instrs_VCVTA_asimd_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVTA_asimd_A1enc_A_txt (D, size, Vd, RM, op, Q, M, Vm) = {
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let rounding : FPRounding = FPDecodeRM(RM);
    let is_unsigned : bool = op == 0b1;
    esize : {|16, 32|} = 16;
    elements : {|2, 4|} = 2;
    match size {
      0b01 => {
          esize = 16;
          elements = 4
      },
      0b10 => {
          esize = 32;
          elements = 2
      },
      _ => ()
    };
    let 'esize = esize;
    let 'elements = elements;
    let 'd = UInt(D @ Vd);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    execute_aarch32_instrs_VCVTA_asimd_Op_A_txt(d, elements, esize, m, regs, rounding, is_unsigned)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitone, _, _, _, _, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3153) = {
    SEE = 3153;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let RM = Slice(__opcode, 8, 2);
    let op = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVTA_asimd_A1enc_A_txt(D, size, Vd, RM, op, Q, M, Vm)
}

val decode_aarch32_instrs_VCVTA_asimd_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVTA_asimd_T1enc_A_txt (D, size, Vd, RM, op, Q, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let rounding : FPRounding = FPDecodeRM(RM);
    let is_unsigned : bool = op == 0b1;
    esize : {|16, 32|} = 16;
    elements : {|2, 4|} = 2;
    match size {
      0b01 => {
          esize = 16;
          elements = 4
      },
      0b10 => {
          esize = 32;
          elements = 2
      },
      _ => ()
    };
    let 'esize = esize;
    let 'elements = elements;
    let 'd = UInt(D @ Vd);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    execute_aarch32_instrs_VCVTA_asimd_Op_A_txt(d, elements, esize, m, regs, rounding, is_unsigned)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitone, _, _, _, _, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3154) = {
    SEE = 3154;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let RM = Slice(__opcode, 8, 2);
    let op = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVTA_asimd_T1enc_A_txt(D, size, Vd, RM, op, Q, M, Vm)
}

val execute_aarch32_instrs_VCVTA_vfp_Op_A_txt : forall 'd 'esize ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('m), FPRounding, bool('is_unsigned)) -> unit

function execute_aarch32_instrs_VCVTA_vfp_Op_A_txt (d, esize, m, rounding, is_unsigned) = {
    CheckVFPEnabled(true);
    match esize {
      16 => {
          S_set(d) = FPToFixed(32, S_read(m)[15 .. 0], 0, is_unsigned, FPSCR_read(), rounding)
      },
      32 => {
          S_set(d) = FPToFixed(32, S_read(m), 0, is_unsigned, FPSCR_read(), rounding)
      },
      64 => {
          S_set(d) = FPToFixed(32, D_read(m), 0, is_unsigned, FPSCR_read(), rounding)
      },
      _ => ()
    }
}

val decode_aarch32_instrs_VCVTA_vfp_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVTA_vfp_A1enc_A_txt (D, RM, Vd, size, op, M, Vm) = {
    if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
        throw(Error_Undefined())
    };
    let rounding : FPRounding = FPDecodeRM(RM);
    let is_unsigned : bool = op == 0b0;
    let 'd = UInt(Vd @ D);
    esize : {|16, 32, 64|} = 16;
    m : range(0, 31) = undefined;
    match size {
      0b01 => {
          esize = 16;
          m = UInt(Vm @ M)
      },
      0b10 => {
          esize = 32;
          m = UInt(Vm @ M)
      },
      0b11 => {
          esize = 64;
          m = UInt(M @ Vm)
      },
      _ => ()
    };
    let 'm = m;
    let 'esize = esize;
    execute_aarch32_instrs_VCVTA_vfp_Op_A_txt(d, esize, m, rounding, is_unsigned)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3155) = {
    SEE = 3155;
    let D = Slice(__opcode, 22, 1);
    let RM = Slice(__opcode, 16, 2);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let op = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVTA_vfp_A1enc_A_txt(D, RM, Vd, size, op, M, Vm)
}

val decode_aarch32_instrs_VCVTA_vfp_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVTA_vfp_T1enc_A_txt (D, RM, Vd, size, op, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
        throw(Error_Undefined())
    };
    let rounding : FPRounding = FPDecodeRM(RM);
    let is_unsigned : bool = op == 0b0;
    let 'd = UInt(Vd @ D);
    esize : {|16, 32, 64|} = 16;
    m : range(0, 31) = undefined;
    match size {
      0b01 => {
          esize = 16;
          m = UInt(Vm @ M)
      },
      0b10 => {
          esize = 32;
          m = UInt(Vm @ M)
      },
      0b11 => {
          esize = 64;
          m = UInt(M @ Vm)
      },
      _ => ()
    };
    let 'm = m;
    let 'esize = esize;
    execute_aarch32_instrs_VCVTA_vfp_Op_A_txt(d, esize, m, rounding, is_unsigned)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitone, bitone, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3156) = {
    SEE = 3156;
    let D = Slice(__opcode, 22, 1);
    let RM = Slice(__opcode, 16, 2);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let op = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVTA_vfp_T1enc_A_txt(D, RM, Vd, size, op, M, Vm)
}

val execute_aarch32_instrs_VMAXNM_Op_A_txt : forall ('advsimd : Bool) 'd 'elements 'esize 'm ('maximum : Bool) 'n 'regs,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bool('advsimd), int('d), int('elements), int('esize), int('m), bool('maximum), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VMAXNM_Op_A_txt (advsimd, d__arg, elements, esize, m, maximum, n, regs) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    op2 : bits('esize) = undefined;
    CheckAdvSIMDOrVFPEnabled(true, advsimd);
    if advsimd then {
        foreach (r from 0 to (regs - 1) by 1 in inc) {
            foreach (e from 0 to (elements - 1) by 1 in inc) {
                op1 = Elem_read(D_read(n + r), e, esize);
                op2 = Elem_read(D_read(m + r), e, esize);
                if maximum then {
                    D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPMaxNum(op1, op2, StandardFPSCRValue()))
                } else {
                    D_set(d + r) = Elem_set(D_read(d + r), e, esize, FPMinNum(op1, op2, StandardFPSCRValue()))
                }
            }
        }
    } else {
        match esize {
          16 => {
              if maximum then {
                  S_set(d) = Zeros(16) @ FPMaxNum(S_read(n)[15 .. 0], S_read(m)[15 .. 0], FPSCR_read())
              } else {
                  S_set(d) = Zeros(16) @ FPMinNum(S_read(n)[15 .. 0], S_read(m)[15 .. 0], FPSCR_read())
              }
          },
          32 => {
              if maximum then {
                  S_set(d) = FPMaxNum(S_read(n), S_read(m), FPSCR_read())
              } else {
                  S_set(d) = FPMinNum(S_read(n), S_read(m), FPSCR_read())
              }
          },
          64 => {
              if maximum then {
                  D_set(d) = FPMaxNum(D_read(n), D_read(m), FPSCR_read())
              } else {
                  D_set(d) = FPMinNum(D_read(n), D_read(m), FPSCR_read())
              }
          },
          _ => ()
        }
    }
}

val decode_aarch32_instrs_VMAXNM_A1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMAXNM_A1enc_A_txt (D, op, sz, Vn, Vd, N, Q, M, Vm) = {
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveFP16Ext()) then {
        throw(Error_Undefined())
    };
    let maximum : bool = op == 0b0;
    let advsimd : bool = true;
    esize : {|16, 32|} = 16;
    elements : {|2, 4|} = 2;
    match sz {
      0b0 => {
          esize = 32;
          elements = 2
      },
      0b1 => {
          esize = 16;
          elements = 4
      }
    };
    let 'esize = esize;
    let 'elements = elements;
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    execute_aarch32_instrs_VMAXNM_Op_A_txt(advsimd, d, elements, esize, m, maximum, n, regs)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 3157) = {
    SEE = 3157;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 21, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMAXNM_A1enc_A_txt(D, op, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VMAXNM_A2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMAXNM_A2enc_A_txt (D, Vn, Vd, size, N, op, M, Vm) = {
    elements : int = undefined;
    regs : int = undefined;
    if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
        throw(Error_Undefined())
    };
    let regs = regs;
    let elements = elements;
    let advsimd : bool = false;
    let maximum : bool = op == 0b0;
    esize : {|16, 32, 64|} = 16;
    d : range(0, 31) = undefined;
    n : range(0, 31) = undefined;
    m : range(0, 31) = undefined;
    match size {
      0b01 => {
          esize = 16;
          d = UInt(Vd @ D);
          n = UInt(Vn @ N);
          m = UInt(Vm @ M)
      },
      0b10 => {
          esize = 32;
          d = UInt(Vd @ D);
          n = UInt(Vn @ N);
          m = UInt(Vm @ M)
      },
      0b11 => {
          esize = 64;
          d = UInt(D @ Vd);
          n = UInt(N @ Vn);
          m = UInt(M @ Vm)
      },
      _ => ()
    };
    let 'n = n;
    let 'm = m;
    let 'esize = esize;
    let 'd = d;
    execute_aarch32_instrs_VMAXNM_Op_A_txt(advsimd, d, elements, esize, m, maximum, n, regs)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3158) = {
    SEE = 3158;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let op = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMAXNM_A2enc_A_txt(D, Vn, Vd, size, N, op, M, Vm)
}

val decode_aarch32_instrs_VMAXNM_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMAXNM_T1enc_A_txt (D, op, sz, Vn, Vd, N, Q, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveFP16Ext()) then {
        throw(Error_Undefined())
    };
    let maximum : bool = op == 0b0;
    let advsimd : bool = true;
    esize : {|16, 32|} = 16;
    elements : {|2, 4|} = 2;
    match sz {
      0b0 => {
          esize = 32;
          elements = 2
      },
      0b1 => {
          esize = 16;
          elements = 4
      }
    };
    let 'esize = esize;
    let 'elements = elements;
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    execute_aarch32_instrs_VMAXNM_Op_A_txt(advsimd, d, elements, esize, m, maximum, n, regs)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitone, bitone, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 3159) = {
    SEE = 3159;
    let D = Slice(__opcode, 22, 1);
    let op = Slice(__opcode, 21, 1);
    let sz = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMAXNM_T1enc_A_txt(D, op, sz, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VMAXNM_T2enc_A_txt : (bits(1), bits(4), bits(4), bits(2), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMAXNM_T2enc_A_txt (D, Vn, Vd, size, N, op, M, Vm) = {
    elements : int = undefined;
    regs : int = undefined;
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
        throw(Error_Undefined())
    };
    let regs = regs;
    let elements = elements;
    let advsimd : bool = false;
    let maximum : bool = op == 0b0;
    esize : {|16, 32, 64|} = 16;
    d : range(0, 31) = undefined;
    n : range(0, 31) = undefined;
    m : range(0, 31) = undefined;
    match size {
      0b01 => {
          esize = 16;
          d = UInt(Vd @ D);
          n = UInt(Vn @ N);
          m = UInt(Vm @ M)
      },
      0b10 => {
          esize = 32;
          d = UInt(Vd @ D);
          n = UInt(Vn @ N);
          m = UInt(Vm @ M)
      },
      0b11 => {
          esize = 64;
          d = UInt(D @ Vd);
          n = UInt(N @ Vn);
          m = UInt(M @ Vm)
      },
      _ => ()
    };
    let 'n = n;
    let 'm = m;
    let 'esize = esize;
    let 'd = d;
    execute_aarch32_instrs_VMAXNM_Op_A_txt(advsimd, d, elements, esize, m, maximum, n, regs)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3160) = {
    SEE = 3160;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let op = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMAXNM_T2enc_A_txt(D, Vn, Vd, size, N, op, M, Vm)
}

val execute_aarch32_instrs_VRINTA_asimd_Op_A_txt : forall 'd 'elements 'esize ('exact : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('exact), int('m), int('regs), FPRounding) -> unit

function execute_aarch32_instrs_VRINTA_asimd_Op_A_txt (d__arg, elements, esize, exact, m, regs, rounding) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    result : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(D_read(m + r), e, esize);
            result = FPRoundInt(op1, StandardFPSCRValue(), rounding, exact);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result)
        }
    }
}

val decode_aarch32_instrs_VRINTA_asimd_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(3), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRINTA_asimd_A1enc_A_txt (D, size, Vd, op, Q, M, Vm) = {
    if [op[2]] != [op[0]] then {
        throw(Error_See("Related encodings"))
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let rounding : FPRounding = FPDecodeRM([op[2]] @ not_vec([op[1]]));
    let exact : bool = false;
    esize : {|16, 32|} = 16;
    elements : {|2, 4|} = 2;
    match size {
      0b01 => {
          esize = 16;
          elements = 4
      },
      0b10 => {
          esize = 32;
          elements = 2
      },
      _ => ()
    };
    let 'esize = esize;
    let 'elements = elements;
    let 'd = UInt(D @ Vd);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    execute_aarch32_instrs_VRINTA_asimd_Op_A_txt(d, elements, esize, exact, m, regs, rounding)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3161) = {
    SEE = 3161;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 7, 3);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRINTA_asimd_A1enc_A_txt(D, size, Vd, op, Q, M, Vm)
}

val decode_aarch32_instrs_VRINTA_asimd_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(3), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRINTA_asimd_T1enc_A_txt (D, size, Vd, op, Q, M, Vm) = {
    if [op[2]] != [op[0]] then {
        throw(Error_See("Related encodings"))
    };
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let rounding : FPRounding = FPDecodeRM([op[2]] @ not_vec([op[1]]));
    let exact : bool = false;
    esize : {|16, 32|} = 16;
    elements : {|2, 4|} = 2;
    match size {
      0b01 => {
          esize = 16;
          elements = 4
      },
      0b10 => {
          esize = 32;
          elements = 2
      },
      _ => ()
    };
    let 'esize = esize;
    let 'elements = elements;
    let 'd = UInt(D @ Vd);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    execute_aarch32_instrs_VRINTA_asimd_Op_A_txt(d, elements, esize, exact, m, regs, rounding)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3162) = {
    SEE = 3162;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let op = Slice(__opcode, 7, 3);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRINTA_asimd_T1enc_A_txt(D, size, Vd, op, Q, M, Vm)
}

val execute_aarch32_instrs_VRINTA_vfp_Op_A_txt : forall 'd 'esize ('exact : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), bool('exact), int('m), FPRounding) -> unit

function execute_aarch32_instrs_VRINTA_vfp_Op_A_txt (d, esize, exact, m, rounding) = {
    CheckVFPEnabled(true);
    match esize {
      16 => {
          S_set(d) = Zeros(16) @ FPRoundInt(S_read(m)[15 .. 0], FPSCR_read(), rounding, exact)
      },
      32 => {
          S_set(d) = FPRoundInt(S_read(m), FPSCR_read(), rounding, exact)
      },
      64 => {
          D_set(d) = FPRoundInt(D_read(m), FPSCR_read(), rounding, exact)
      },
      _ => ()
    }
}

val decode_aarch32_instrs_VRINTA_vfp_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRINTA_vfp_A1enc_A_txt (D, RM, Vd, size, M, Vm) = {
    if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
        throw(Error_Undefined())
    };
    let rounding : FPRounding = FPDecodeRM(RM);
    let exact : bool = false;
    esize : {|16, 32, 64|} = 16;
    d : range(0, 31) = undefined;
    m : range(0, 31) = undefined;
    match size {
      0b01 => {
          esize = 16;
          d = UInt(Vd @ D);
          m = UInt(Vm @ M)
      },
      0b10 => {
          esize = 32;
          d = UInt(Vd @ D);
          m = UInt(Vm @ M)
      },
      0b11 => {
          esize = 64;
          d = UInt(D @ Vd);
          m = UInt(M @ Vm)
      },
      _ => ()
    };
    let 'm = m;
    let 'esize = esize;
    let 'd = d;
    execute_aarch32_instrs_VRINTA_vfp_Op_A_txt(d, esize, exact, m, rounding)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, bitone, bitzero, _, _, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3163) = {
    SEE = 3163;
    let D = Slice(__opcode, 22, 1);
    let RM = Slice(__opcode, 16, 2);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRINTA_vfp_A1enc_A_txt(D, RM, Vd, size, M, Vm)
}

val decode_aarch32_instrs_VRINTA_vfp_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRINTA_vfp_T1enc_A_txt (D, RM, Vd, size, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
        throw(Error_Undefined())
    };
    let rounding : FPRounding = FPDecodeRM(RM);
    let exact : bool = false;
    esize : {|16, 32, 64|} = 16;
    d : range(0, 31) = undefined;
    m : range(0, 31) = undefined;
    match size {
      0b01 => {
          esize = 16;
          d = UInt(Vd @ D);
          m = UInt(Vm @ M)
      },
      0b10 => {
          esize = 32;
          d = UInt(Vd @ D);
          m = UInt(Vm @ M)
      },
      0b11 => {
          esize = 64;
          d = UInt(D @ Vd);
          m = UInt(M @ Vm)
      },
      _ => ()
    };
    let 'm = m;
    let 'esize = esize;
    let 'd = d;
    execute_aarch32_instrs_VRINTA_vfp_Op_A_txt(d, esize, exact, m, rounding)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, bitone, bitzero, _, _, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3164) = {
    SEE = 3164;
    let D = Slice(__opcode, 22, 1);
    let RM = Slice(__opcode, 16, 2);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRINTA_vfp_T1enc_A_txt(D, RM, Vd, size, M, Vm)
}

val execute_aarch32_instrs_VRINTX_asimd_Op_A_txt : forall 'd 'elements 'esize ('exact : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('exact), int('m), int('regs), FPRounding) -> unit

function execute_aarch32_instrs_VRINTX_asimd_Op_A_txt (d__arg, elements, esize, exact, m, regs, rounding) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    result : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(D_read(m + r), e, esize);
            result = FPRoundInt(op1, StandardFPSCRValue(), rounding, exact);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result)
        }
    }
}

val decode_aarch32_instrs_VRINTX_asimd_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRINTX_asimd_A1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let rounding : FPRounding = FPRounding_TIEEVEN;
    let exact : bool = true;
    esize : {|16, 32|} = 16;
    elements : {|2, 4|} = 2;
    match size {
      0b01 => {
          esize = 16;
          elements = 4
      },
      0b10 => {
          esize = 32;
          elements = 2
      },
      _ => ()
    };
    let 'esize = esize;
    let 'elements = elements;
    let 'd = UInt(D @ Vd);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    execute_aarch32_instrs_VRINTX_asimd_Op_A_txt(d, elements, esize, exact, m, regs, rounding)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3165) = {
    SEE = 3165;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRINTX_asimd_A1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VRINTX_asimd_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRINTX_asimd_T1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let rounding : FPRounding = FPRounding_TIEEVEN;
    let exact : bool = true;
    esize : {|16, 32|} = 16;
    elements : {|2, 4|} = 2;
    match size {
      0b01 => {
          esize = 16;
          elements = 4
      },
      0b10 => {
          esize = 32;
          elements = 2
      },
      _ => ()
    };
    let 'esize = esize;
    let 'elements = elements;
    let 'd = UInt(D @ Vd);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    execute_aarch32_instrs_VRINTX_asimd_Op_A_txt(d, elements, esize, exact, m, regs, rounding)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3166) = {
    SEE = 3166;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRINTX_asimd_T1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_VRINTX_vfp_Op_A_txt : forall 'd 'esize ('exact : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), bool('exact), int('m)) -> unit

function execute_aarch32_instrs_VRINTX_vfp_Op_A_txt (d, esize, exact, m) = {
    CheckVFPEnabled(true);
    let rounding : FPRounding = FPRoundingMode(FPSCR_read());
    match esize {
      16 => {
          S_set(d) = Zeros(16) @ FPRoundInt(S_read(m)[15 .. 0], FPSCR_read(), rounding, exact)
      },
      32 => {
          S_set(d) = FPRoundInt(S_read(m), FPSCR_read(), rounding, exact)
      },
      64 => {
          D_set(d) = FPRoundInt(D_read(m), FPSCR_read(), rounding, exact)
      },
      _ => ()
    }
}

val decode_aarch32_instrs_VRINTX_vfp_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRINTX_vfp_A1enc_A_txt (cond, D, Vd, size, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let exact : bool = true;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VRINTX_vfp_Op_A_txt(d, esize, exact, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3167) = {
    SEE = 3167;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRINTX_vfp_A1enc_A_txt(cond, D, Vd, size, M, Vm)
}

val decode_aarch32_instrs_VRINTX_vfp_T1enc_A_txt : (bits(1), bits(4), bits(2), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRINTX_vfp_T1enc_A_txt (D, Vd, size, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let exact : bool = true;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VRINTX_vfp_Op_A_txt(d, esize, exact, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, _, _, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3168) = {
    SEE = 3168;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRINTX_vfp_T1enc_A_txt(D, Vd, size, M, Vm)
}

val execute_aarch32_instrs_VRINTZ_asimd_Op_A_txt : forall 'd 'elements 'esize ('exact : Bool) 'm 'regs,
  ('regs in {1, 2} & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 'elements in {2, 4} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), bool('exact), int('m), int('regs), FPRounding) -> unit

function execute_aarch32_instrs_VRINTZ_asimd_Op_A_txt (d__arg, elements, esize, exact, m, regs, rounding) = {
    d : int = d__arg;
    op1 : bits('esize) = undefined;
    result : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            op1 = Elem_read(D_read(m + r), e, esize);
            result = FPRoundInt(op1, StandardFPSCRValue(), rounding, exact);
            D_set(d + r) = Elem_set(D_read(d + r), e, esize, result)
        }
    }
}

val decode_aarch32_instrs_VRINTZ_asimd_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRINTZ_asimd_A1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let rounding : FPRounding = FPRounding_ZERO;
    let exact : bool = false;
    esize : {|16, 32|} = 16;
    elements : {|2, 4|} = 2;
    match size {
      0b01 => {
          esize = 16;
          elements = 4
      },
      0b10 => {
          esize = 32;
          elements = 2
      },
      _ => ()
    };
    let 'esize = esize;
    let 'elements = elements;
    let 'd = UInt(D @ Vd);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    execute_aarch32_instrs_VRINTZ_asimd_Op_A_txt(d, elements, esize, exact, m, regs, rounding)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3169) = {
    SEE = 3169;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRINTZ_asimd_A1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val decode_aarch32_instrs_VRINTZ_asimd_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRINTZ_asimd_T1enc_A_txt (D, size, Vd, Q, M, Vm) = {
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    if size == 0b01 & not_bool(HaveFP16Ext()) | size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let rounding : FPRounding = FPRounding_ZERO;
    let exact : bool = false;
    esize : {|16, 32|} = 16;
    elements : {|2, 4|} = 2;
    match size {
      0b01 => {
          esize = 16;
          elements = 4
      },
      0b10 => {
          esize = 32;
          elements = 2
      },
      _ => ()
    };
    let 'esize = esize;
    let 'elements = elements;
    let 'd = UInt(D @ Vd);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b0 then 1 else 2;
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    execute_aarch32_instrs_VRINTZ_asimd_Op_A_txt(d, elements, esize, exact, m, regs, rounding)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3170) = {
    SEE = 3170;
    let D = Slice(__opcode, 22, 1);
    let size = Slice(__opcode, 18, 2);
    let Vd = Slice(__opcode, 12, 4);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRINTZ_asimd_T1enc_A_txt(D, size, Vd, Q, M, Vm)
}

val execute_aarch32_instrs_VRINTZ_vfp_Op_A_txt : forall 'd 'esize ('exact : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), bool('exact), int('m), FPRounding) -> unit

function execute_aarch32_instrs_VRINTZ_vfp_Op_A_txt (d, esize, exact, m, rounding) = {
    CheckVFPEnabled(true);
    match esize {
      16 => {
          S_set(d) = Zeros(16) @ FPRoundInt(S_read(m)[15 .. 0], FPSCR_read(), rounding, exact)
      },
      32 => {
          S_set(d) = FPRoundInt(S_read(m), FPSCR_read(), rounding, exact)
      },
      64 => {
          D_set(d) = FPRoundInt(D_read(m), FPSCR_read(), rounding, exact)
      },
      _ => ()
    }
}

val decode_aarch32_instrs_VRINTZ_vfp_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRINTZ_vfp_A1enc_A_txt (cond, D, Vd, size, op, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        let rounding : FPRounding = if op == 0b1 then FPRounding_ZERO else
          FPRoundingMode(FPSCR_read());
        let exact : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VRINTZ_vfp_Op_A_txt(d, esize, exact, m, rounding)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3171) = {
    SEE = 3171;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let op = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRINTZ_vfp_A1enc_A_txt(cond, D, Vd, size, op, M, Vm)
}

val decode_aarch32_instrs_VRINTZ_vfp_T1enc_A_txt : (bits(1), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VRINTZ_vfp_T1enc_A_txt (D, Vd, size, op, M, Vm) = {
    if ConditionPassed() then {
        if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
            throw(Error_Undefined())
        };
        if size == 0b01 & InITBlock() then {
            throw(Error_Unpredictable())
        };
        let rounding : FPRounding = if op == 0b1 then FPRounding_ZERO else
          FPRoundingMode(FPSCR_read());
        let exact : bool = false;
        esize : {|16, 32, 64|} = 16;
        d : range(0, 31) = undefined;
        m : range(0, 31) = undefined;
        match size {
          0b01 => {
              esize = 16;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b10 => {
              esize = 32;
              d = UInt(Vd @ D);
              m = UInt(Vm @ M)
          },
          0b11 => {
              esize = 64;
              d = UInt(D @ Vd);
              m = UInt(M @ Vm)
          },
          _ => ()
        };
        let 'm = m;
        let 'esize = esize;
        let 'd = d;
        execute_aarch32_instrs_VRINTZ_vfp_Op_A_txt(d, esize, exact, m, rounding)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, _, _, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3172) = {
    SEE = 3172;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let op = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VRINTZ_vfp_T1enc_A_txt(D, Vd, size, op, M, Vm)
}

val execute_aarch32_instrs_VSEL_Op_A_txt : forall 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31).
  (bits(4), int('d), int('esize), int('m), int('n)) -> unit

function execute_aarch32_instrs_VSEL_Op_A_txt (cond, d, esize, m, n) = {
    CheckVFPEnabled(true);
    match esize {
      16 => {
          S_set(d) = Zeros(16) @ (if ConditionHolds(cond) then S_read(n) else
            S_read(m))[15 .. 0]
      },
      32 => {
          S_set(d) = if ConditionHolds(cond) then S_read(n) else S_read(m)
      },
      64 => {
          D_set(d) = if ConditionHolds(cond) then D_read(n) else D_read(m)
      },
      _ => ()
    }
}

val decode_aarch32_instrs_VSEL_A1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSEL_A1enc_A_txt (D, cc, Vn, Vd, size, N, M, Vm) = {
    if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
        throw(Error_Undefined())
    };
    esize : {|16, 32, 64|} = 16;
    d : range(0, 31) = undefined;
    n : range(0, 31) = undefined;
    m : range(0, 31) = undefined;
    match size {
      0b01 => {
          esize = 16;
          d = UInt(Vd @ D);
          n = UInt(Vn @ N);
          m = UInt(Vm @ M)
      },
      0b10 => {
          esize = 32;
          d = UInt(Vd @ D);
          n = UInt(Vn @ N);
          m = UInt(Vm @ M)
      },
      0b11 => {
          esize = 64;
          d = UInt(D @ Vd);
          n = UInt(N @ Vn);
          m = UInt(M @ Vm)
      },
      _ => ()
    };
    let 'n = n;
    let 'm = m;
    let 'esize = esize;
    let 'd = d;
    let cond : bits(4) = (cc @ EOR([cc[1]], [cc[0]])) @ 0b0;
    execute_aarch32_instrs_VSEL_Op_A_txt(cond, d, esize, m, n)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3173) = {
    SEE = 3173;
    let D = Slice(__opcode, 22, 1);
    let cc = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSEL_A1enc_A_txt(D, cc, Vn, Vd, size, N, M, Vm)
}

val decode_aarch32_instrs_VSEL_T1enc_A_txt : (bits(1), bits(2), bits(4), bits(4), bits(2), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VSEL_T1enc_A_txt (D, cc, Vn, Vd, size, N, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if size == 0b00 | size == 0b01 & not_bool(HaveFP16Ext()) then {
        throw(Error_Undefined())
    };
    esize : {|16, 32, 64|} = 16;
    d : range(0, 31) = undefined;
    n : range(0, 31) = undefined;
    m : range(0, 31) = undefined;
    match size {
      0b01 => {
          esize = 16;
          d = UInt(Vd @ D);
          n = UInt(Vn @ N);
          m = UInt(Vm @ M)
      },
      0b10 => {
          esize = 32;
          d = UInt(Vd @ D);
          n = UInt(Vn @ N);
          m = UInt(Vm @ M)
      },
      0b11 => {
          esize = 64;
          d = UInt(D @ Vd);
          n = UInt(N @ Vn);
          m = UInt(M @ Vm)
      },
      _ => ()
    };
    let 'n = n;
    let 'm = m;
    let 'esize = esize;
    let 'd = d;
    let cond : bits(4) = (cc @ EOR([cc[1]], [cc[0]])) @ 0b0;
    execute_aarch32_instrs_VSEL_Op_A_txt(cond, d, esize, m, n)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _, bitzero, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3174) = {
    SEE = 3174;
    let D = Slice(__opcode, 22, 1);
    let cc = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let size = Slice(__opcode, 8, 2);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VSEL_T1enc_A_txt(D, cc, Vn, Vd, size, N, M, Vm)
}

val execute_aarch32_instrs_SETPAN_Op_A_txt : bits(1) -> unit

function execute_aarch32_instrs_SETPAN_Op_A_txt value_name = {
    if PSTATE.EL != EL0 then {
        PSTATE.PAN = value_name
    };
    ()
}

val decode_aarch32_instrs_SETPAN_A1enc_A_txt : bits(1) -> unit

function decode_aarch32_instrs_SETPAN_A1enc_A_txt imm1 = {
    if not_bool(HavePANExt()) then {
        throw(Error_Undefined())
    };
    let value_name : bits(1) = imm1;
    execute_aarch32_instrs_SETPAN_Op_A_txt(value_name)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 3175) = {
    SEE = 3175;
    let imm1 = Slice(__opcode, 9, 1);
    if ((((((((((((([__opcode[16]] != 0b0 | [__opcode[17]] != 0b0) | [__opcode[18]] != 0b0) | [__opcode[19]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0) | [__opcode[8]] != 0b0) | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0) | [__opcode[3]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SETPAN_A1enc_A_txt(imm1)
    }
}

val decode_aarch32_instrs_SETPAN_T1enc_A_txt : bits(1) -> unit

function decode_aarch32_instrs_SETPAN_T1enc_A_txt imm1 = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HavePANExt()) then {
        throw(Error_Undefined())
    };
    let value_name : bits(1) = imm1;
    execute_aarch32_instrs_SETPAN_Op_A_txt(value_name)
}

function clause __DecodeT16 ((pc, ([bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, bitzero, bitzero, bitzero] as __opcode)) if SEE < 3176) = {
    SEE = 3176;
    let imm1 = Slice(__opcode, 3, 1);
    if (([__opcode[4]] != 0b1 | [__opcode[0]] != 0b0) | [__opcode[1]] != 0b0) | [__opcode[2]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SETPAN_T1enc_A_txt(imm1)
    }
}

val execute_aarch32_instrs_ESB_Op_A_txt : unit -> unit

function execute_aarch32_instrs_ESB_Op_A_txt () = {
    SynchronizeErrors();
    AArch32_ESBOperation();
    if (PSTATE.EL == EL0 | PSTATE.EL == EL1) & EL2Enabled() then {
        AArch32_vESBOperation()
    };
    TakeUnmaskedSErrorInterrupts()
}

val decode_aarch32_instrs_ESB_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_ESB_A1enc_A_txt cond = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if not_bool(HaveRASExt()) then {
            EndOfInstruction()
        };
        if cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ESB_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3177) = {
    SEE = 3177;
    let cond = Slice(__opcode, 28, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_ESB_A1enc_A_txt(cond)
    }
}

val decode_aarch32_instrs_ESB_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_ESB_T1enc_A_txt () = {
    if ConditionPassed() then {
        if not_bool(HaveRASExt()) then {
            EndOfInstruction()
        };
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_ESB_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101011111000000000010000 as __opcode)) if SEE < 3178) = {
    SEE = 3178;
    if (((([__opcode[28]] != 0b1 | [__opcode[29]] != 0b1) | [__opcode[30]] != 0b1) | [__opcode[31]] != 0b1) | [__opcode[2]] != 0b0) | [__opcode[4]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_ESB_T1enc_A_txt()
    }
}

val execute_aarch32_instrs_TSB_Op_A_txt : unit -> unit

function execute_aarch32_instrs_TSB_Op_A_txt () = {
    TraceSynchronizationBarrier()
}

val decode_aarch32_instrs_TSB_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_TSB_A1enc_A_txt cond = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if not_bool(HaveSelfHostedTrace()) then {
            EndOfInstruction()
        };
        if cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_TSB_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3179) = {
    SEE = 3179;
    let cond = Slice(__opcode, 28, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_TSB_A1enc_A_txt(cond)
    }
}

val decode_aarch32_instrs_TSB_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_TSB_T1enc_A_txt () = {
    if ConditionPassed() then {
        if not_bool(HaveSelfHostedTrace()) then {
            EndOfInstruction()
        };
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_TSB_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101011111000000000010010 as __opcode)) if SEE < 3180) = {
    SEE = 3180;
    if (((([__opcode[28]] != 0b1 | [__opcode[29]] != 0b1) | [__opcode[30]] != 0b1) | [__opcode[31]] != 0b1) | [__opcode[2]] != 0b0) | [__opcode[4]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_TSB_T1enc_A_txt()
    }
}

val execute_aarch32_instrs_CSDB_Op_A_txt : unit -> unit

function execute_aarch32_instrs_CSDB_Op_A_txt () = {
    ConsumptionOfSpeculativeDataBarrier()
}

val decode_aarch32_instrs_CSDB_A1enc_A_txt : bits(4) -> unit

function decode_aarch32_instrs_CSDB_A1enc_A_txt cond = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if cond != 0b1110 then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_CSDB_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3181) = {
    SEE = 3181;
    let cond = Slice(__opcode, 28, 4);
    if (((((([__opcode[8]] != 0b1 | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1) | [__opcode[12]] != 0b0) | [__opcode[13]] != 0b0) | [__opcode[14]] != 0b0) | [__opcode[15]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CSDB_A1enc_A_txt(cond)
    }
}

val decode_aarch32_instrs_CSDB_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_CSDB_T1enc_A_txt () = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_CSDB_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101011111000000000010100 as __opcode)) if SEE < 3182) = {
    SEE = 3182;
    if (((([__opcode[28]] != 0b1 | [__opcode[29]] != 0b1) | [__opcode[30]] != 0b1) | [__opcode[31]] != 0b1) | [__opcode[2]] != 0b0) | [__opcode[4]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_CSDB_T1enc_A_txt()
    }
}

val execute_aarch32_instrs_SSBB_Op_A_txt : unit -> unit

function execute_aarch32_instrs_SSBB_Op_A_txt () = {
    SpeculativeStoreBypassBarrierToVA()
}

val decode_aarch32_instrs_SSBB_A1enc_A_txt : unit -> unit

function decode_aarch32_instrs_SSBB_A1enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_SSBB_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, (0b11110101011111111111000001000000 as __opcode)) if SEE < 3183) = {
    SEE = 3183;
    if (((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[12]] != 0b1) | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SSBB_A1enc_A_txt()
    }
}

val decode_aarch32_instrs_SSBB_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_SSBB_T1enc_A_txt () = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_SSBB_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101111111000111101000000 as __opcode)) if SEE < 3184) = {
    SEE = 3184;
    if ((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_SSBB_T1enc_A_txt()
    }
}

val execute_aarch32_instrs_PSSBB_Op_A_txt : unit -> unit

function execute_aarch32_instrs_PSSBB_Op_A_txt () = {
    SpeculativeStoreBypassBarrierToPA()
}

val decode_aarch32_instrs_PSSBB_A1enc_A_txt : unit -> unit

function decode_aarch32_instrs_PSSBB_A1enc_A_txt () = {
    if ConditionPassed() then {
        execute_aarch32_instrs_PSSBB_Op_A_txt()
    };
    ()
}

function clause __DecodeA32 ((pc, (0b11110101011111111111000001000100 as __opcode)) if SEE < 3185) = {
    SEE = 3185;
    if (((((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[12]] != 0b1) | [__opcode[13]] != 0b1) | [__opcode[14]] != 0b1) | [__opcode[15]] != 0b1) | [__opcode[8]] != 0b0) | [__opcode[9]] != 0b0) | [__opcode[10]] != 0b0) | [__opcode[11]] != 0b0 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_PSSBB_A1enc_A_txt()
    }
}

val decode_aarch32_instrs_PSSBB_T1enc_A_txt : unit -> unit

function decode_aarch32_instrs_PSSBB_T1enc_A_txt () = {
    if ConditionPassed() then {
        if InITBlock() then {
            throw(Error_Unpredictable())
        };
        execute_aarch32_instrs_PSSBB_Op_A_txt()
    };
    ()
}

function clause __DecodeT32 ((pc, (0b11110011101111111000111101000100 as __opcode)) if SEE < 3186) = {
    SEE = 3186;
    if ((((((([__opcode[16]] != 0b1 | [__opcode[17]] != 0b1) | [__opcode[18]] != 0b1) | [__opcode[19]] != 0b1) | [__opcode[13]] != 0b0) | [__opcode[8]] != 0b1) | [__opcode[9]] != 0b1) | [__opcode[10]] != 0b1) | [__opcode[11]] != 0b1 then {
        throw(Error_ConstrainedUnpredictable())
    } else {
        decode_aarch32_instrs_PSSBB_T1enc_A_txt()
    }
}

val execute_aarch32_instrs_VDOT_Op_A_txt : forall 'd 'esize ('is_signed : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('m), int('n), int('regs), bool('is_signed)) -> unit

function execute_aarch32_instrs_VDOT_Op_A_txt (d, esize, m, n, regs, is_signed) = {
    operand1 : bits(64) = undefined;
    operand2 : bits(64) = undefined;
    result : bits(64) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        operand1 = D_read(n + r);
        operand2 = D_read(m + r);
        result = D_read(d + r);
        element1 : int = undefined;
        element2 : int = undefined;
        foreach (e from 0 to 1 by 1 in inc) {
            res : int = 0;
            foreach (i from 0 to 3 by 1 in inc) {
                if is_signed then {
                    element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                    element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)))
                } else {
                    element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                    element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)))
                };
                res = res + element1 * element2
            };
            let 'res = res;
            result = Elem_set(result, e, esize, Elem_read(result, e, esize) + res)
        };
        D_set(d + r) = result
    }
}

val decode_aarch32_instrs_VDOT_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VDOT_A1enc_A_txt (D, Vn, Vd, N, Q, M, U, Vm) = {
    if not_bool(HaveDOTPExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let is_signed : bool = U == 0b0;
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'esize = 32;
    let 'regs = if Q == 0b1 then 2 else 1;
    execute_aarch32_instrs_VDOT_Op_A_txt(d, esize, m, n, regs, is_signed)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3187) = {
    SEE = 3187;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let U = Slice(__opcode, 4, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VDOT_A1enc_A_txt(D, Vn, Vd, N, Q, M, U, Vm)
}

val decode_aarch32_instrs_VDOT_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VDOT_T1enc_A_txt (D, Vn, Vd, N, Q, M, U, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveDOTPExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let is_signed : bool = U == 0b0;
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'esize = 32;
    let 'regs = if Q == 0b1 then 2 else 1;
    execute_aarch32_instrs_VDOT_Op_A_txt(d, esize, m, n, regs, is_signed)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3188) = {
    SEE = 3188;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let U = Slice(__opcode, 4, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VDOT_T1enc_A_txt(D, Vn, Vd, N, Q, M, U, Vm)
}

val execute_aarch32_instrs_VDOT_s_Op_A_txt : forall 'd 'esize 'index ('is_signed : Bool) 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 32 & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('index), int('m), int('n), int('regs), bool('is_signed)) -> unit

function execute_aarch32_instrs_VDOT_s_Op_A_txt (d, esize, index, m, n, regs, is_signed) = {
    operand1 : bits(64) = undefined;
    let operand2 : bits(64) = D_read(m);
    result : bits(64) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        operand1 = D_read(n + r);
        result = D_read(d + r);
        element1 : int = undefined;
        element2 : int = undefined;
        foreach (e from 0 to 1 by 1 in inc) {
            res : int = 0;
            foreach (i from 0 to 3 by 1 in inc) {
                if is_signed then {
                    element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                    element2 = SInt(Elem_read(operand2, 4 * index + i, DIV(esize, 4)))
                } else {
                    element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                    element2 = UInt(Elem_read(operand2, 4 * index + i, DIV(esize, 4)))
                };
                res = res + element1 * element2
            };
            let 'res = res;
            result = Elem_set(result, e, esize, Elem_read(result, e, esize) + res)
        };
        D_set(d + r) = result
    }
}

val decode_aarch32_instrs_VDOT_s_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VDOT_s_A1enc_A_txt (op1, D, op2, Vn, Vd, N, Q, M, U, Vm) = {
    if not_bool(HaveDOTPExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let is_signed : bool = U == 0b0;
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(Vm[3 .. 0]);
    let 'index = UInt(M);
    let 'esize = 32;
    let 'regs = if Q == 0b1 then 2 else 1;
    execute_aarch32_instrs_VDOT_s_Op_A_txt(d, esize, index, m, n, regs, is_signed)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3189) = {
    SEE = 3189;
    let op1 = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let op2 = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let U = Slice(__opcode, 4, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VDOT_s_A1enc_A_txt(op1, D, op2, Vn, Vd, N, Q, M, U, Vm)
}

val decode_aarch32_instrs_VDOT_s_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VDOT_s_T1enc_A_txt (op1, D, op2, Vn, Vd, N, Q, M, U, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveDOTPExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let is_signed : bool = U == 0b0;
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(Vm[3 .. 0]);
    let 'index = UInt(M);
    let 'esize = 32;
    let 'regs = if Q == 0b1 then 2 else 1;
    execute_aarch32_instrs_VDOT_s_Op_A_txt(d, esize, index, m, n, regs, is_signed)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3190) = {
    SEE = 3190;
    let op1 = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let op2 = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let U = Slice(__opcode, 4, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VDOT_s_T1enc_A_txt(op1, D, op2, Vn, Vd, N, Q, M, U, Vm)
}

val execute_aarch32_instrs_VJCVT_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_VJCVT_Op_A_txt (d, m) = {
    CheckVFPEnabled(true);
    let fltval : bits(64) = D_read(m);
    intval : bits(32) = undefined;
    Z : bits(1) = undefined;
    (intval, Z) = FPToFixedJS(32, fltval, FPSCR_read(), false);
    FPSCR_write() = Mk_FPSCR_Type([FPSCR_read__1().bits with 31 .. 28 = (0b0 @ Z) @ 0b00]);
    S_set(d) = intval
}

val decode_aarch32_instrs_VJCVT_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VJCVT_A1enc_A_txt (cond, D, Vd, M, Vm) = {
    assert(cond != 0b1111);
    if not_bool(HaveFJCVTZSExt()) then {
        throw(Error_Undefined())
    };
    if cond != 0b1110 then {
        throw(Error_Unpredictable())
    };
    let 'd = UInt(Vd @ D);
    let 'm = UInt(M @ Vm);
    execute_aarch32_instrs_VJCVT_Op_A_txt(d, m)
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitzero, bitone, bitone, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3191) = {
    SEE = 3191;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VJCVT_A1enc_A_txt(cond, D, Vd, M, Vm)
}

val decode_aarch32_instrs_VJCVT_T1enc_A_txt : (bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VJCVT_T1enc_A_txt (D, Vd, M, Vm) = {
    if not_bool(HaveFJCVTZSExt()) then {
        throw(Error_Undefined())
    };
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    let 'd = UInt(Vd @ D);
    let 'm = UInt(M @ Vm);
    execute_aarch32_instrs_VJCVT_Op_A_txt(d, m)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitzero, bitone, bitone, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3192) = {
    SEE = 3192;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VJCVT_T1enc_A_txt(D, Vd, M, Vm)
}

val execute_aarch32_instrs_VCMLA_Op_A_txt : forall 'd 'elements 'esize 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs), bits(2)) -> unit

function execute_aarch32_instrs_VCMLA_Op_A_txt (d__arg, elements, esize, m, n, regs, rot) = {
    d : int = d__arg;
    operand1 : bits(64) = undefined;
    operand2 : bits(64) = undefined;
    operand3 : bits(64) = undefined;
    result1 : bits('esize) = undefined;
    result2 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        operand1 = D_read(n + r);
        operand2 = D_read(m + r);
        operand3 = D_read(d + r);
        foreach (e from 0 to (DIV(elements, 2) - 1) by 1 in inc) {
            element1 : bits('esize) = undefined;
            element2 : bits('esize) = undefined;
            element3 : bits('esize) = undefined;
            element4 : bits('esize) = undefined;
            match rot {
              0b00 => {
                  element1 = Elem_read(operand2, e * 2, esize);
                  element2 = Elem_read(operand1, e * 2, esize);
                  element3 = Elem_read(operand2, e * 2 + 1, esize);
                  element4 = Elem_read(operand1, e * 2, esize)
              },
              0b01 => {
                  element1 = FPNeg(Elem_read(operand2, e * 2 + 1, esize));
                  element2 = Elem_read(operand1, e * 2 + 1, esize);
                  element3 = Elem_read(operand2, e * 2, esize);
                  element4 = Elem_read(operand1, e * 2 + 1, esize)
              },
              0b10 => {
                  element1 = FPNeg(Elem_read(operand2, e * 2, esize));
                  element2 = Elem_read(operand1, e * 2, esize);
                  element3 = FPNeg(Elem_read(operand2, e * 2 + 1, esize));
                  element4 = Elem_read(operand1, e * 2, esize)
              },
              0b11 => {
                  element1 = Elem_read(operand2, e * 2 + 1, esize);
                  element2 = Elem_read(operand1, e * 2 + 1, esize);
                  element3 = FPNeg(Elem_read(operand2, e * 2, esize));
                  element4 = Elem_read(operand1, e * 2 + 1, esize)
              }
            };
            let element4 = element4;
            let element3 = element3;
            let element2 = element2;
            let element1 = element1;
            result1 = FPMulAdd(Elem_read(operand3, e * 2, esize), element2, element1, StandardFPSCRValue());
            result2 = FPMulAdd(Elem_read(operand3, e * 2 + 1, esize), element4, element3, StandardFPSCRValue());
            D_set(d + r) = Elem_set(D_read(d + r), e * 2, esize, result1);
            D_set(d + r) = Elem_set(D_read(d + r), e * 2 + 1, esize, result2)
        }
    }
}

val decode_aarch32_instrs_VCMLA_A1enc_A_txt : (bits(2), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCMLA_A1enc_A_txt (rot, D, S, Vn, Vd, N, Q, M, Vm) = {
    if not_bool(HaveFCADDExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'esize = (16 << UInt(S));
    if not_bool(HaveFP16Ext()) & esize == 16 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(64, esize);
    let 'regs = if Q == 0b0 then 1 else 2;
    assert(constraint('esize in {16, 32}));
    execute_aarch32_instrs_VCMLA_Op_A_txt(d, elements, esize, m, n, regs, rot)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, bitone, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3193) = {
    SEE = 3193;
    let rot = Slice(__opcode, 23, 2);
    let D = Slice(__opcode, 22, 1);
    let S = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCMLA_A1enc_A_txt(rot, D, S, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VCMLA_T1enc_A_txt : (bits(2), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCMLA_T1enc_A_txt (rot, D, S, Vn, Vd, N, Q, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveFCADDExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'esize = (16 << UInt(S));
    if not_bool(HaveFP16Ext()) & esize == 16 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(64, esize);
    let 'regs = if Q == 0b0 then 1 else 2;
    assert(constraint('esize in {16, 32}));
    execute_aarch32_instrs_VCMLA_Op_A_txt(d, elements, esize, m, n, regs, rot)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, bitone, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3194) = {
    SEE = 3194;
    let rot = Slice(__opcode, 23, 2);
    let D = Slice(__opcode, 22, 1);
    let S = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCMLA_T1enc_A_txt(rot, D, S, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VCMLA_idx_Op_A_txt : forall 'd 'elements 'esize 'index 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1} & 'esize in {16, 32} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('index), int('m), int('n), int('regs), bits(2)) -> unit

function execute_aarch32_instrs_VCMLA_idx_Op_A_txt (d__arg, elements, esize, index, m, n, regs, rot) = {
    d : int = d__arg;
    operand1 : bits(64) = undefined;
    operand2 : bits(64) = undefined;
    operand3 : bits(64) = undefined;
    result1 : bits('esize) = undefined;
    result2 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        operand1 = D_read(n + r);
        operand2 = Din_read(m);
        operand3 = D_read(d + r);
        foreach (e from 0 to (DIV(elements, 2) - 1) by 1 in inc) {
            element1 : bits('esize) = undefined;
            element2 : bits('esize) = undefined;
            element3 : bits('esize) = undefined;
            element4 : bits('esize) = undefined;
            match rot {
              0b00 => {
                  element1 = Elem_read(operand2, index * 2, esize);
                  element2 = Elem_read(operand1, e * 2, esize);
                  element3 = Elem_read(operand2, index * 2 + 1, esize);
                  element4 = Elem_read(operand1, e * 2, esize)
              },
              0b01 => {
                  element1 = FPNeg(Elem_read(operand2, index * 2 + 1, esize));
                  element2 = Elem_read(operand1, e * 2 + 1, esize);
                  element3 = Elem_read(operand2, index * 2, esize);
                  element4 = Elem_read(operand1, e * 2 + 1, esize)
              },
              0b10 => {
                  element1 = FPNeg(Elem_read(operand2, index * 2, esize));
                  element2 = Elem_read(operand1, e * 2, esize);
                  element3 = FPNeg(Elem_read(operand2, index * 2 + 1, esize));
                  element4 = Elem_read(operand1, e * 2, esize)
              },
              0b11 => {
                  element1 = Elem_read(operand2, index * 2 + 1, esize);
                  element2 = Elem_read(operand1, e * 2 + 1, esize);
                  element3 = FPNeg(Elem_read(operand2, index * 2, esize));
                  element4 = Elem_read(operand1, e * 2 + 1, esize)
              }
            };
            let element4 = element4;
            let element3 = element3;
            let element2 = element2;
            let element1 = element1;
            result1 = FPMulAdd(Elem_read(operand3, e * 2, esize), element2, element1, StandardFPSCRValue());
            result2 = FPMulAdd(Elem_read(operand3, e * 2 + 1, esize), element4, element3, StandardFPSCRValue());
            D_set(d + r) = Elem_set(D_read(d + r), e * 2, esize, result1);
            D_set(d + r) = Elem_set(D_read(d + r), e * 2 + 1, esize, result2)
        }
    }
}

val decode_aarch32_instrs_VCMLA_idx_A1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCMLA_idx_A1enc_A_txt (S, D, rot, Vn, Vd, N, Q, M, Vm) = {
    if not_bool(HaveFCADDExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = if S == 0b1 then UInt(M @ Vm) else UInt(Vm);
    let 'esize = (16 << UInt(S));
    if not_bool(HaveFP16Ext()) & esize == 16 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(64, esize);
    let 'regs = if Q == 0b0 then 1 else 2;
    let 'index = if S == 0b1 then 0 else UInt(M);
    assert(constraint((0 <= 'm & 'm <= 31 & 'esize in {16, 32})));
    execute_aarch32_instrs_VCMLA_idx_Op_A_txt(d, elements, esize, index, m, n, regs, rot)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3195) = {
    SEE = 3195;
    let S = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let rot = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCMLA_idx_A1enc_A_txt(S, D, rot, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VCMLA_idx_T1enc_A_txt : (bits(1), bits(1), bits(2), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCMLA_idx_T1enc_A_txt (S, D, rot, Vn, Vd, N, Q, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveFCADDExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = if S == 0b1 then UInt(M @ Vm) else UInt(Vm);
    let 'esize = (16 << UInt(S));
    if not_bool(HaveFP16Ext()) & esize == 16 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(64, esize);
    let 'regs = if Q == 0b0 then 1 else 2;
    let 'index = if S == 0b1 then 0 else UInt(M);
    assert(constraint((0 <= 'm & 'm <= 31 & 'esize in {16, 32})));
    execute_aarch32_instrs_VCMLA_idx_Op_A_txt(d, elements, esize, index, m, n, regs, rot)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3196) = {
    SEE = 3196;
    let S = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let rot = Slice(__opcode, 20, 2);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCMLA_idx_T1enc_A_txt(S, D, rot, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VCADD_Op_A_txt : forall 'd 'elements 'esize 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 32} & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('esize), int('m), int('n), int('regs), bits(1)) -> unit

function execute_aarch32_instrs_VCADD_Op_A_txt (d__arg, elements, esize, m, n, regs, rot) = {
    d : int = d__arg;
    operand1 : bits(64) = undefined;
    operand2 : bits(64) = undefined;
    result1 : bits('esize) = undefined;
    result2 : bits('esize) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        operand1 = D_read(n + r);
        operand2 = D_read(m + r);
        foreach (e from 0 to (DIV(elements, 2) - 1) by 1 in inc) {
            element1 : bits('esize) = undefined;
            element3 : bits('esize) = undefined;
            match rot {
              0b0 => {
                  element1 = FPNeg(Elem_read(operand2, e * 2 + 1, esize));
                  element3 = Elem_read(operand2, e * 2, esize)
              },
              0b1 => {
                  element1 = Elem_read(operand2, e * 2 + 1, esize);
                  element3 = FPNeg(Elem_read(operand2, e * 2, esize))
              }
            };
            let element3 = element3;
            let element1 = element1;
            result1 = FPAdd(Elem_read(operand1, e * 2, esize), element1, StandardFPSCRValue());
            result2 = FPAdd(Elem_read(operand1, e * 2 + 1, esize), element3, StandardFPSCRValue());
            D_set(d + r) = Elem_set(D_read(d + r), e * 2, esize, result1);
            D_set(d + r) = Elem_set(D_read(d + r), e * 2 + 1, esize, result2)
        }
    }
}

val decode_aarch32_instrs_VCADD_A1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCADD_A1enc_A_txt (rot, D, S, Vn, Vd, N, Q, M, Vm) = {
    if not_bool(HaveFCADDExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'esize = (16 << UInt(S));
    if not_bool(HaveFP16Ext()) & esize == 16 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(64, esize);
    let 'regs = if Q == 0b0 then 1 else 2;
    assert(constraint('esize in {16, 32}));
    execute_aarch32_instrs_VCADD_Op_A_txt(d, elements, esize, m, n, regs, rot)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3197) = {
    SEE = 3197;
    let rot = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let S = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCADD_A1enc_A_txt(rot, D, S, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VCADD_T1enc_A_txt : (bits(1), bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCADD_T1enc_A_txt (rot, D, S, Vn, Vd, N, Q, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveFCADDExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'esize = (16 << UInt(S));
    if not_bool(HaveFP16Ext()) & esize == 16 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(64, esize);
    let 'regs = if Q == 0b0 then 1 else 2;
    assert(constraint('esize in {16, 32}));
    execute_aarch32_instrs_VCADD_Op_A_txt(d, elements, esize, m, n, regs, rot)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3198) = {
    SEE = 3198;
    let rot = Slice(__opcode, 24, 1);
    let D = Slice(__opcode, 22, 1);
    let S = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCADD_T1enc_A_txt(rot, D, S, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VFMAL_Op_A_txt : forall 'd 'datasize 'esize 'm 'n 'regs ('sub_op : Bool),
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'datasize in {32, 64} & 0 <= 'd & 'd <= 31).
  (bits(1), int('d), int('datasize), int('esize), int('m), int('n), int('regs), bool('sub_op)) -> unit

function execute_aarch32_instrs_VFMAL_Op_A_txt (Q, d, datasize, esize, m, n, regs, sub_op) = {
    CheckAdvSIMDEnabled();
    operand1 : bits('datasize) = undefined;
    operand2 : bits('datasize) = undefined;
    operand3 : bits(64) = undefined;
    result : bits(64) = undefined;
    element1 : bits(div('esize, 2)) = undefined;
    element2 : bits(div('esize, 2)) = undefined;
    if Q == 0b0 then {
        assert(constraint('datasize - 1 < 32));
        operand1 = S_read(n)[datasize - 1 .. 0];
        operand2 = S_read(m)[datasize - 1 .. 0]
    } else {
        operand1 = D_read(n)[datasize - 1 .. 0];
        operand2 = D_read(m)[datasize - 1 .. 0]
    };
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        operand3 = D_read(d + r);
        foreach (e from 0 to 1 by 1 in inc) {
            element1 = Elem_read(operand1, 2 * r + e, DIV(esize, 2));
            element2 = Elem_read(operand2, 2 * r + e, DIV(esize, 2));
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAddH(Elem_read(operand3, e, esize), element1, element2, StandardFPSCRValue()))
        };
        D_set(d + r) = result
    }
}

val decode_aarch32_instrs_VFMAL_A1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFMAL_A1enc_A_txt (S, D, Vn, Vd, N, Q, M, Vm) = {
    if not_bool(HaveFP16MulNoRoundingToFP32Ext()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & [Vd[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = if Q == 0b1 then UInt(N @ Vn) else UInt(Vn @ N);
    let 'm = if Q == 0b1 then UInt(M @ Vm) else UInt(Vm @ M);
    let 'esize = 32;
    let 'regs = if Q == 0b1 then 2 else 1;
    let 'datasize = if Q == 0b1 then 64 else 32;
    let sub_op : bool = S == 0b1;
    assert(constraint((0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31)));
    execute_aarch32_instrs_VFMAL_Op_A_txt(Q, d, datasize, esize, m, n, regs, sub_op)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 3199) = {
    SEE = 3199;
    let S = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFMAL_A1enc_A_txt(S, D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VFMAL_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFMAL_T1enc_A_txt (S, D, Vn, Vd, N, Q, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveFP16MulNoRoundingToFP32Ext()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & [Vd[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = if Q == 0b1 then UInt(N @ Vn) else UInt(Vn @ N);
    let 'm = if Q == 0b1 then UInt(M @ Vm) else UInt(Vm @ M);
    let 'esize = 32;
    let 'regs = if Q == 0b1 then 2 else 1;
    let 'datasize = if Q == 0b1 then 64 else 32;
    let sub_op : bool = S == 0b1;
    assert(constraint((0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31)));
    execute_aarch32_instrs_VFMAL_Op_A_txt(Q, d, datasize, esize, m, n, regs, sub_op)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 3200) = {
    SEE = 3200;
    let S = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFMAL_T1enc_A_txt(S, D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VFMAL_i_Op_A_txt : forall 'd 'datasize 'esize 'index 'm 'n 'regs ('sub_op : Bool),
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 'datasize in {32, 64} & 0 <= 'd & 'd <= 31).
  (bits(1), int('d), int('datasize), int('esize), int('index), int('m), int('n), int('regs), bool('sub_op)) -> unit

function execute_aarch32_instrs_VFMAL_i_Op_A_txt (Q, d, datasize, esize, index, m, n, regs, sub_op) = {
    CheckAdvSIMDEnabled();
    operand1 : bits('datasize) = undefined;
    operand2 : bits('datasize) = undefined;
    operand3 : bits(64) = undefined;
    result : bits(64) = undefined;
    element1 : bits(div('esize, 2)) = undefined;
    if Q == 0b0 then {
        assert(constraint('datasize - 1 < 32));
        operand1 = S_read(n)[datasize - 1 .. 0];
        operand2 = S_read(m)[datasize - 1 .. 0]
    } else {
        operand1 = D_read(n)[datasize - 1 .. 0];
        operand2 = D_read(m)[datasize - 1 .. 0]
    };
    let element2 : bits(div('esize, 2)) = Elem_read(operand2, index, DIV(esize, 2));
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        operand3 = D_read(d + r);
        foreach (e from 0 to 1 by 1 in inc) {
            element1 = Elem_read(operand1, 2 * r + e, DIV(esize, 2));
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAddH(Elem_read(operand3, e, esize), element1, element2, StandardFPSCRValue()))
        };
        D_set(d + r) = result
    }
}

val decode_aarch32_instrs_VFMAL_i_A1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFMAL_i_A1enc_A_txt (D, S, Vn, Vd, N, Q, M, Vm) = {
    if not_bool(HaveFP16MulNoRoundingToFP32Ext()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & [Vd[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = if Q == 0b1 then UInt(N @ Vn) else UInt(Vn @ N);
    let 'm = if Q == 0b1 then UInt(Vm[2 .. 0]) else UInt(Vm[2 .. 0] @ M);
    let 'index = if Q == 0b1 then UInt(M @ [Vm[3]]) else UInt([Vm[3]]);
    let 'esize = 32;
    let 'regs = if Q == 0b1 then 2 else 1;
    let 'datasize = if Q == 0b1 then 64 else 32;
    let sub_op : bool = S == 0b1;
    assert(constraint((0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3})));
    execute_aarch32_instrs_VFMAL_i_Op_A_txt(Q, d, datasize, esize, index, m, n, regs, sub_op)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 3201) = {
    SEE = 3201;
    let D = Slice(__opcode, 22, 1);
    let S = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFMAL_i_A1enc_A_txt(D, S, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VFMAL_i_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFMAL_i_T1enc_A_txt (D, S, Vn, Vd, N, Q, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveFP16MulNoRoundingToFP32Ext()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & [Vd[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = if Q == 0b1 then UInt(N @ Vn) else UInt(Vn @ N);
    let 'm = if Q == 0b1 then UInt(Vm[2 .. 0]) else UInt(Vm[2 .. 0] @ M);
    let 'index = if Q == 0b1 then UInt(M @ [Vm[3]]) else UInt([Vm[3]]);
    let 'esize = 32;
    let 'regs = if Q == 0b1 then 2 else 1;
    let 'datasize = if Q == 0b1 then 64 else 32;
    let sub_op : bool = S == 0b1;
    assert(constraint((0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3})));
    execute_aarch32_instrs_VFMAL_i_Op_A_txt(Q, d, datasize, esize, index, m, n, regs, sub_op)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 3202) = {
    SEE = 3202;
    let D = Slice(__opcode, 22, 1);
    let S = Slice(__opcode, 20, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFMAL_i_T1enc_A_txt(D, S, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VDOT_bf16_Op_A_txt : forall 'd 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VDOT_bf16_Op_A_txt (d, m, n, regs) = {
    operand1 : bits(64) = undefined;
    operand2 : bits(64) = undefined;
    result : bits(64) = undefined;
    CheckAdvSIMDEnabled();
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        operand1 = Din_read(n + r);
        operand2 = Din_read(m + r);
        result = Din_read(d + r);
        foreach (e from 0 to 1 by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let elt2_a : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
            let sum : bits(32) = BFAdd(BFMul(elt1_a, elt2_a), BFMul(elt1_b, elt2_b));
            result = Elem_set(result, e, 32, BFAdd(Elem_read(result, e, 32), sum))
        };
        D_set(d + r) = result
    }
}

val decode_aarch32_instrs_VDOT_bf16_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VDOT_bf16_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if not_bool(HaveAArch32BF16Ext()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b1 then 2 else 1;
    execute_aarch32_instrs_VDOT_bf16_Op_A_txt(d, m, n, regs)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3203) = {
    SEE = 3203;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VDOT_bf16_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VDOT_bf16_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VDOT_bf16_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveAArch32BF16Ext()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b1 then 2 else 1;
    execute_aarch32_instrs_VDOT_bf16_Op_A_txt(d, m, n, regs)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3204) = {
    SEE = 3204;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VDOT_bf16_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VDOT_bf16_i_Op_A_txt : forall 'd 'i 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'i in {0, 1} & 0 <= 'd & 'd <= 31).
  (int('d), int('i), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VDOT_bf16_i_Op_A_txt (d, i, m, n, regs) = {
    operand1 : bits(64) = undefined;
    result : bits(64) = undefined;
    CheckAdvSIMDEnabled();
    let operand2 : bits(64) = Din_read(m);
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        operand1 = Din_read(n + r);
        result = Din_read(d + r);
        foreach (e from 0 to 1 by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let elt2_a : bits(16) = Elem_read(operand2, 2 * i + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * i + 1, 16);
            let sum : bits(32) = BFAdd(BFMul(elt1_a, elt2_a), BFMul(elt1_b, elt2_b));
            result = Elem_set(result, e, 32, BFAdd(Elem_read(result, e, 32), sum))
        };
        D_set(d + r) = result
    }
}

val decode_aarch32_instrs_VDOT_bf16_i_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VDOT_bf16_i_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if not_bool(HaveAArch32BF16Ext()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(Vm);
    let 'i = UInt(M);
    let 'regs = if Q == 0b1 then 2 else 1;
    execute_aarch32_instrs_VDOT_bf16_i_Op_A_txt(d, i, m, n, regs)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3205) = {
    SEE = 3205;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VDOT_bf16_i_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VDOT_bf16_i_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VDOT_bf16_i_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveAArch32BF16Ext()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(Vm);
    let 'i = UInt(M);
    let 'regs = if Q == 0b1 then 2 else 1;
    execute_aarch32_instrs_VDOT_bf16_i_Op_A_txt(d, i, m, n, regs)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3206) = {
    SEE = 3206;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VDOT_bf16_i_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VMMLA_Op_A_txt : forall 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n)) -> unit

function execute_aarch32_instrs_VMMLA_Op_A_txt (d, m, n) = {
    CheckAdvSIMDEnabled();
    let op1 : bits(128) = Q_read((n >> 1));
    let op2 : bits(128) = Q_read((m >> 1));
    let acc : bits(128) = Q_read((d >> 1));
    Q_set((d >> 1)) = BFMatMulAdd(acc, op1, op2)
}

val decode_aarch32_instrs_VMMLA_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMMLA_A1enc_A_txt (D, Vn, Vd, N, M, Vm) = {
    if not_bool(HaveAArch32BF16Ext()) then {
        throw(Error_Undefined())
    };
    if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'regs = 2;
    execute_aarch32_instrs_VMMLA_Op_A_txt(d, m, n)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3207) = {
    SEE = 3207;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMMLA_A1enc_A_txt(D, Vn, Vd, N, M, Vm)
}

val decode_aarch32_instrs_VMMLA_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VMMLA_T1enc_A_txt (D, Vn, Vd, N, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveAArch32BF16Ext()) then {
        throw(Error_Undefined())
    };
    if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'regs = 2;
    execute_aarch32_instrs_VMMLA_Op_A_txt(d, m, n)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3208) = {
    SEE = 3208;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VMMLA_T1enc_A_txt(D, Vn, Vd, N, M, Vm)
}

val execute_aarch32_instrs_VCVT_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_VCVT_Op_A_txt (d, m) = {
    operand : bits(128) = undefined;
    result : bits(64) = undefined;
    if ConditionPassed() then {
        EncodingSpecificOperations();
        CheckAdvSIMDEnabled();
        let operand : bits(128) = Q_read((m >> 1));
        foreach (e from 0 to 3 by 1 in inc) {
            let op : bits(32) = Elem_read(operand, e, 32);
            result = Elem_set(result, e, 16, FPConvertBF__1(op, StandardFPSCRValue()))
        };
        D_set(d) = result
    };
    ()
}

val decode_aarch32_instrs_VCVT_A1enc_A_txt : (bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_A1enc_A_txt (D, Vd, M, Vm) = {
    if not_bool(HaveAArch32BF16Ext()) then {
        throw(Error_Undefined())
    };
    if [Vm[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'm = UInt(M @ Vm);
    execute_aarch32_instrs_VCVT_Op_A_txt(d, m)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3209) = {
    SEE = 3209;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_A1enc_A_txt(D, Vd, M, Vm)
}

val decode_aarch32_instrs_VCVT_T1enc_A_txt : (bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVT_T1enc_A_txt (D, Vd, M, Vm) = {
    if not_bool(HaveAArch32BF16Ext()) then {
        throw(Error_Undefined())
    };
    if [Vm[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'm = UInt(M @ Vm);
    execute_aarch32_instrs_VCVT_Op_A_txt(d, m)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitone, _, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3210) = {
    SEE = 3210;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVT_T1enc_A_txt(D, Vd, M, Vm)
}

val execute_aarch32_instrs_VCVTB_bf16_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_VCVTB_bf16_Op_A_txt (d, m) = {
    CheckVFPEnabled(true);
    S_set(d) = [S_read(d) with 15 .. 0 = FPConvertBF__1(S_read(m), FPSCR_read())]
}

val decode_aarch32_instrs_VCVTB_bf16_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVTB_bf16_A1enc_A_txt (cond, D, Vd, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if not_bool(HaveAArch32BF16Ext()) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(Vd @ D);
        let 'm = UInt(Vm @ M);
        execute_aarch32_instrs_VCVTB_bf16_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3211) = {
    SEE = 3211;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVTB_bf16_A1enc_A_txt(cond, D, Vd, M, Vm)
}

val decode_aarch32_instrs_VCVTB_bf16_T1enc_A_txt : (bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVTB_bf16_T1enc_A_txt (D, Vd, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveAArch32BF16Ext()) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(Vd @ D);
        let 'm = UInt(Vm @ M);
        execute_aarch32_instrs_VCVTB_bf16_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3212) = {
    SEE = 3212;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVTB_bf16_T1enc_A_txt(D, Vd, M, Vm)
}

val execute_aarch32_instrs_VCVTT_Op_A_txt : forall 'd 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m)) -> unit

function execute_aarch32_instrs_VCVTT_Op_A_txt (d, m) = {
    CheckVFPEnabled(true);
    S_set(d) = [S_read(d) with 31 .. 16 = FPConvertBF__1(S_read(m), FPSCR_read())]
}

val decode_aarch32_instrs_VCVTT_A1enc_A_txt : (bits(4), bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVTT_A1enc_A_txt (cond, D, Vd, M, Vm) = {
    if ConditionPassed() then {
        assert(cond != 0b1111);
        if not_bool(HaveAArch32BF16Ext()) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(Vd @ D);
        let 'm = UInt(Vm @ M);
        execute_aarch32_instrs_VCVTT_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeA32 ((pc, ([_, _, _, _, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if Slice(__opcode, 28, 4) != 0b1111 & SEE < 3213) = {
    SEE = 3213;
    let cond = Slice(__opcode, 28, 4);
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVTT_A1enc_A_txt(cond, D, Vd, M, Vm)
}

val decode_aarch32_instrs_VCVTT_T1enc_A_txt : (bits(1), bits(4), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VCVTT_T1enc_A_txt (D, Vd, M, Vm) = {
    if ConditionPassed() then {
        if not_bool(HaveAArch32BF16Ext()) then {
            throw(Error_Undefined())
        };
        let 'd = UInt(Vd @ D);
        let 'm = UInt(Vm @ M);
        execute_aarch32_instrs_VCVTT_Op_A_txt(d, m)
    };
    ()
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitzero, bitzero, bitone, bitone, bitone, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3214) = {
    SEE = 3214;
    let D = Slice(__opcode, 22, 1);
    let Vd = Slice(__opcode, 12, 4);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VCVTT_T1enc_A_txt(D, Vd, M, Vm)
}

val execute_aarch32_instrs_VFMA_bf_Op_A_txt : forall 'd 'elements 'm 'n 'sel,
  ('sel in {0, 1} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'elements == 4 & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('m), int('n), int('sel)) -> unit

function execute_aarch32_instrs_VFMA_bf_Op_A_txt (d, elements, m, n, sel) = {
    CheckAdvSIMDEnabled();
    let operand1 : bits(128) = Q_read((n >> 1));
    let operand2 : bits(128) = Q_read((m >> 1));
    let operand3 : bits(128) = Q_read((d >> 1));
    result : bits(128) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(32) = Elem_read(operand1, 2 * e + sel, 16) @ Zeros(16);
        let element2 : bits(32) = Elem_read(operand2, 2 * e + sel, 16) @ Zeros(16);
        let addend : bits(32) = Elem_read(operand3, e, 32);
        result = Elem_set(result, e, 32, FPMulAdd(addend, element1, element2, StandardFPSCRValue()))
    };
    Q_set((d >> 1)) = result
}

val decode_aarch32_instrs_VFMA_bf_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFMA_bf_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if not_bool(HaveAArch32BF16Ext()) then {
        throw(Error_Undefined())
    };
    if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'elements = DIV(128, 32);
    let 'sel = UInt(Q);
    execute_aarch32_instrs_VFMA_bf_Op_A_txt(d, elements, m, n, sel)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 3215) = {
    SEE = 3215;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFMA_bf_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VFMA_bf_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFMA_bf_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveAArch32BF16Ext()) then {
        throw(Error_Undefined())
    };
    if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'elements = DIV(128, 32);
    let 'sel = UInt(Q);
    execute_aarch32_instrs_VFMA_bf_Op_A_txt(d, elements, m, n, sel)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 3216) = {
    SEE = 3216;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFMA_bf_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_VFMA_bfs_Op_A_txt : forall 'd 'elements 'i 'm 'n 'sel,
  ('sel in {0, 1} & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'i in {0, 1, 2, 3} & 'elements == 4 & 0 <= 'd & 'd <= 31).
  (int('d), int('elements), int('i), int('m), int('n), int('sel)) -> unit

function execute_aarch32_instrs_VFMA_bfs_Op_A_txt (d, elements, i, m, n, sel) = {
    CheckAdvSIMDEnabled();
    let operand1 : bits(128) = Q_read((n >> 1));
    let operand2 : bits(64) = D_read(m);
    let operand3 : bits(128) = Q_read((d >> 1));
    result : bits(128) = undefined;
    let element2 : bits(32) = Elem_read(operand2, i, 16) @ Zeros(16);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(32) = Elem_read(operand1, 2 * e + sel, 16) @ Zeros(16);
        let addend : bits(32) = Elem_read(operand3, e, 32);
        result = Elem_set(result, e, 32, FPMulAdd(addend, element1, element2, StandardFPSCRValue()))
    };
    Q_set((d >> 1)) = result
}

val decode_aarch32_instrs_VFMA_bfs_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFMA_bfs_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if not_bool(HaveAArch32BF16Ext()) then {
        throw(Error_Undefined())
    };
    if [Vd[0]] == 0b1 | [Vn[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(Vm[2 .. 0]);
    let 'i = UInt(M @ [Vm[3]]);
    let 'elements = DIV(128, 32);
    let 'sel = UInt(Q);
    execute_aarch32_instrs_VFMA_bfs_Op_A_txt(d, elements, i, m, n, sel)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 3217) = {
    SEE = 3217;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFMA_bfs_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VFMA_bfs_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VFMA_bfs_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveAArch32BF16Ext()) then {
        throw(Error_Undefined())
    };
    if [Vd[0]] == 0b1 | [Vn[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(Vm[2 .. 0]);
    let 'i = UInt(M @ [Vm[3]]);
    let 'elements = DIV(128, 32);
    let 'sel = UInt(Q);
    execute_aarch32_instrs_VFMA_bfs_Op_A_txt(d, elements, i, m, n, sel)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, bitone, bitone, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 3218) = {
    SEE = 3218;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VFMA_bfs_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_MMLA_Op_A_txt : forall 'd 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned)) -> unit

function execute_aarch32_instrs_MMLA_Op_A_txt (d, m, n, op1_unsigned, op2_unsigned) = {
    CheckAdvSIMDEnabled();
    let operand1 : bits(128) = Q_read((n >> 1));
    let operand2 : bits(128) = Q_read((m >> 1));
    let addend : bits(128) = Q_read((d >> 1));
    Q_set((d >> 1)) = MatMulAdd(addend, operand1, operand2, op1_unsigned, op2_unsigned)
}

val decode_aarch32_instrs_MMLA_A1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_MMLA_A1enc_A_txt (B, D, Vn, Vd, N, M, U, Vm) = {
    if not_bool(HaveAArch32Int8MatMulExt()) then {
        throw(Error_Undefined())
    };
    op1_unsigned : bool = undefined;
    op2_unsigned : bool = undefined;
    match B @ U {
      0b00 => {
          op1_unsigned = false;
          op2_unsigned = false
      },
      0b01 => {
          op1_unsigned = true;
          op2_unsigned = true
      },
      0b10 => {
          op1_unsigned = true;
          op2_unsigned = false
      },
      0b11 => {
          throw(Error_Undefined())
      }
    };
    let op2_unsigned = op2_unsigned;
    let op1_unsigned = op1_unsigned;
    if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    execute_aarch32_instrs_MMLA_Op_A_txt(d, m, n, op1_unsigned, op2_unsigned)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 3219) = {
    SEE = 3219;
    let B = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let U = Slice(__opcode, 4, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MMLA_A1enc_A_txt(B, D, Vn, Vd, N, M, U, Vm)
}

val decode_aarch32_instrs_MMLA_T1enc_A_txt : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_MMLA_T1enc_A_txt (B, D, Vn, Vd, N, M, U, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveAArch32Int8MatMulExt()) then {
        throw(Error_Undefined())
    };
    op1_unsigned : bool = undefined;
    op2_unsigned : bool = undefined;
    match B @ U {
      0b00 => {
          op1_unsigned = false;
          op2_unsigned = false
      },
      0b01 => {
          op1_unsigned = true;
          op2_unsigned = true
      },
      0b10 => {
          op1_unsigned = true;
          op2_unsigned = false
      },
      0b11 => {
          throw(Error_Undefined())
      }
    };
    let op2_unsigned = op2_unsigned;
    let op1_unsigned = op1_unsigned;
    if ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1 then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    execute_aarch32_instrs_MMLA_Op_A_txt(d, m, n, op1_unsigned, op2_unsigned)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, bitone, _, _, _, _, _, _] as __opcode)) if SEE < 3220) = {
    SEE = 3220;
    let B = Slice(__opcode, 23, 1);
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let M = Slice(__opcode, 5, 1);
    let U = Slice(__opcode, 4, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_MMLA_T1enc_A_txt(B, D, Vn, Vd, N, M, U, Vm)
}

val execute_aarch32_instrs_VUSDOT_Op_A_txt : forall 'd 'm 'n 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31).
  (int('d), int('m), int('n), int('regs)) -> unit

function execute_aarch32_instrs_VUSDOT_Op_A_txt (d, m, n, regs) = {
    element1 : int = undefined;
    element2 : int = undefined;
    CheckAdvSIMDEnabled();
    operand1 : bits(64) = undefined;
    operand2 : bits(64) = undefined;
    result : bits(64) = undefined;
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        operand1 = Din_read(n + r);
        operand2 = Din_read(m + r);
        result = Din_read(d + r);
        foreach (e from 0 to 1 by 1 in inc) {
            res : bits(32) = Elem_read(result, e, 32);
            foreach (b from 0 to 3 by 1 in inc) {
                element1 = UInt(Elem_read(operand1, 4 * e + b, 8));
                element2 = SInt(Elem_read(operand2, 4 * e + b, 8));
                res = res + element1 * element2
            };
            result = Elem_set(result, e, 32, res)
        };
        D_set(d + r) = result
    }
}

val decode_aarch32_instrs_VUSDOT_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VUSDOT_A1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if not_bool(HaveAArch32Int8MatMulExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b1 then 2 else 1;
    execute_aarch32_instrs_VUSDOT_Op_A_txt(d, m, n, regs)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3221) = {
    SEE = 3221;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VUSDOT_A1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val decode_aarch32_instrs_VUSDOT_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_VUSDOT_T1enc_A_txt (D, Vn, Vd, N, Q, M, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveAArch32Int8MatMulExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & (([Vd[0]] == 0b1 | [Vn[0]] == 0b1) | [Vm[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(M @ Vm);
    let 'regs = if Q == 0b1 then 2 else 1;
    execute_aarch32_instrs_VUSDOT_Op_A_txt(d, m, n, regs)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 3222) = {
    SEE = 3222;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_VUSDOT_T1enc_A_txt(D, Vn, Vd, N, Q, M, Vm)
}

val execute_aarch32_instrs_DOT_Op_A_txt : forall 'd 'i 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) 'regs,
  ('regs in {1, 2} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'i in {0, 1} & 0 <= 'd & 'd <= 31).
  (int('d), int('i), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), int('regs)) -> unit

function execute_aarch32_instrs_DOT_Op_A_txt (d, i, m, n, op1_unsigned, op2_unsigned, regs) = {
    element1 : int = undefined;
    element2 : int = undefined;
    CheckAdvSIMDEnabled();
    operand1 : bits(64) = undefined;
    result : bits(64) = undefined;
    let operand2 : bits(64) = Din_read(m);
    foreach (r from 0 to (regs - 1) by 1 in inc) {
        operand1 = Din_read(n + r);
        result = Din_read(d + r);
        foreach (e from 0 to 1 by 1 in inc) {
            res : bits(32) = Elem_read(result, e, 32);
            foreach (b from 0 to 3 by 1 in inc) {
                element1 = asl_Int(Elem_read(operand1, 4 * e + b, 8), op1_unsigned);
                element2 = asl_Int(Elem_read(operand2, 4 * i + b, 8), op2_unsigned);
                res = res + element1 * element2
            };
            result = Elem_set(result, e, 32, res)
        };
        D_set(d + r) = result
    }
}

val decode_aarch32_instrs_DOT_A1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_DOT_A1enc_A_txt (D, Vn, Vd, N, Q, M, U, Vm) = {
    if not_bool(HaveAArch32Int8MatMulExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let op1_unsigned : bool = U == 0b0;
    let op2_unsigned : bool = U == 0b1;
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(Vm);
    let 'i = UInt(M);
    let 'regs = if Q == 0b1 then 2 else 1;
    execute_aarch32_instrs_DOT_Op_A_txt(d, i, m, n, op1_unsigned, op2_unsigned, regs)
}

function clause __DecodeA32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3223) = {
    SEE = 3223;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let U = Slice(__opcode, 4, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_DOT_A1enc_A_txt(D, Vn, Vd, N, Q, M, U, Vm)
}

val decode_aarch32_instrs_DOT_T1enc_A_txt : (bits(1), bits(4), bits(4), bits(1), bits(1), bits(1), bits(1), bits(4)) -> unit

function decode_aarch32_instrs_DOT_T1enc_A_txt (D, Vn, Vd, N, Q, M, U, Vm) = {
    if InITBlock() then {
        throw(Error_Unpredictable())
    };
    if not_bool(HaveAArch32Int8MatMulExt()) then {
        throw(Error_Undefined())
    };
    if Q == 0b1 & ([Vd[0]] == 0b1 | [Vn[0]] == 0b1) then {
        throw(Error_Undefined())
    };
    let op1_unsigned : bool = U == 0b0;
    let op2_unsigned : bool = U == 0b1;
    let 'd = UInt(D @ Vd);
    let 'n = UInt(N @ Vn);
    let 'm = UInt(Vm);
    let 'i = UInt(M);
    let 'regs = if Q == 0b1 then 2 else 1;
    execute_aarch32_instrs_DOT_Op_A_txt(d, i, m, n, op1_unsigned, op2_unsigned, regs)
}

function clause __DecodeT32 ((pc, ([bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 3224) = {
    SEE = 3224;
    let D = Slice(__opcode, 22, 1);
    let Vn = Slice(__opcode, 16, 4);
    let Vd = Slice(__opcode, 12, 4);
    let N = Slice(__opcode, 7, 1);
    let Q = Slice(__opcode, 6, 1);
    let M = Slice(__opcode, 5, 1);
    let U = Slice(__opcode, 4, 1);
    let Vm = Slice(__opcode, 0, 4);
    decode_aarch32_instrs_DOT_T1enc_A_txt(D, Vn, Vd, N, Q, M, U, Vm)
}
